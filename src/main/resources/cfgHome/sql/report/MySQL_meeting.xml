<?xml version="1.0" encoding="UTF-8"?>
<sqlcfg>
	<report>
		<MeetingAttendStatics>
			<main>
			<reportInfo><![CDATA[<Report>
					<Property key="name" value="会议参加情况统计" />
					<QuerySource>
						<Property key="type" value="dataBase" />
						<Property key="referenceId" value="" />
						<TableList type="" description="">
						</TableList>
						<LinkList>
						</LinkList>
						<bean name="meetingReportManager" methodName="getMeetingAttendStatics"/>
					</QuerySource>
					<Filter>
					</Filter>
					<CustomReportList>
					</CustomReportList>
					<UserConditionList>
					</UserConditionList>
					<ReportHead acrossreport="false">
						<ReportColumn tableCode="" code="" name="" title="人员" type="0" dateType="" />
						<ReportColumn tableCode="" code="" name="" title="时间" type="0" dateType="" />
					</ReportHead>
					<ShowDataList>
						<ReportColumn tableCode="" code="" name="" title="会议总数"
							calctype="0" />
						<ReportColumn tableCode="" code="" name="" title="参加数"
							calctype="0" />
						<ReportColumn tableCode="" code="" name="" title="不参加数"
							calctype="0" />
						<ReportColumn tableCode="" code="" name="" title="未回执数"
							calctype="0" />
						<ReportColumn tableCode="" code="" name="" title="待定数"
							calctype="0" />
						<ReportColumn tableCode="" code="" name="" title="参加比"
							calctype="0" />
						<ReportColumn tableCode="" code="" name="" title="参会时长"
							calctype="0" />		
						<ReportColumn tableCode="" code="" name="" title="工作时间"
							calctype="0" />
						<ReportColumn tableCode="" code="" name="" title="会议参加时间比"
							calctype="0" />
						<ReportColumn tableCode="" code="" name="" title="参会频率(个/天)"
							calctype="0" />
					</ShowDataList>
					<SumDataList>
					</SumDataList>
					<ViewModule showcondition="stat_formstat.jsp" getrusult="showReportResult.jsp" />
					<ReportShowDetail enable="true">
						<ParamMap title="" var="" />
						<Penetrate title="会议总数" url="meeting.do?method=listMeetingByReport&amp;statType=mtReply&amp;fieldType=" whole="false" />
						<Penetrate title="参加数" url="meeting.do?method=listMeetingByReport&amp;statType=mtReply&amp;fieldType=31" whole="false" />
						<Penetrate title="不参加数" url="meeting.do?method=listMeetingByReport&amp;statType=mtReply&amp;fieldType=32" whole="false" />
						<Penetrate title="未回执数" url="meeting.do?method=listMeetingByReport&amp;statType=mtReply&amp;fieldType=11" whole="false" />
						<Penetrate title="待定数" url="meeting.do?method=listMeetingByReport&amp;statType=mtReply&amp;fieldType=33" whole="false" />
					</ReportShowDetail>
					<FormShowDetail enable="false">
					</FormShowDetail>
					<Description>会议参加情况统计</Description>
					<ReportChartList>
						<ReportChart name="personal" title="会议参加情况统计" type="anychart">
							<ChartHead>
								<ReportColumn tableCode="" code="" name="" title="人员" />					
							</ChartHead>
							<ChartColum>
								<ReportColumn tableCode="" code="" name="" title="参加数"/>
								<ReportColumn tableCode="" code="" name="" title="不参加数"/>
								<ReportColumn tableCode="" code="" name="" title="未回执数"/>
								<ReportColumn tableCode="" code="" name="" title="待定数"/>
							</ChartColum>
							<Property name="chartType" value="7"/>
							<Property name="is3d" value="true"/>
							<Property name="revert" value="false"/>
						</ReportChart>
						<ReportChart name="personal" title="会议参加情况统计" type="anychart">
							<ChartHead>
								<ReportColumn tableCode="" code="" name="" title="人员" />
							</ChartHead>
							<ChartColum>
								<ReportColumn tableCode="" code="" name="" title="参会时长"/>
								<ReportColumn tableCode="" code="" name="" title="工作时间"/>
							</ChartColum>
							<Property name="chartType" value="1"/>
							<Property name="is3d" value="false"/>
						</ReportChart>
						<ReportChart name="group" title="会议参加情况统计" type="anychart">
							<ChartHead>
								<ReportColumn tableCode="" code="" name="" title="人员" />
							</ChartHead>
							<ChartColum>
								<ReportColumn tableCode="" code="" name="" title="参加数"/>
								<ReportColumn tableCode="" code="" name="" title="不参加数"/>
								<ReportColumn tableCode="" code="" name="" title="未回执数"/>
								<ReportColumn tableCode="" code="" name="" title="待定数"/>
							</ChartColum>
							<Property name="chartType" value="1"/>
							<Property name="is3d" value="false"/>
						</ReportChart>
						<ReportChart name="group" title="会议参加情况统计" type="anychart">
							<ChartHead>
								<ReportColumn tableCode="" code="" name="" title="人员" />
							</ChartHead>
							<ChartColum>
								<ReportColumn tableCode="" code="" name="" title="会议参加时间比"> 
									<Property  name="chartType" value="1"/>
								</ReportColumn>
								<ReportColumn tableCode="" code="" name="" title="参会频率(个/天)" > 
									<Property  name="chartType" value="3"/>
				        </ReportColumn>
							</ChartColum>
				      <ExtraYaxis>
								<Property name="name" value="1" />
								<Property name="label.format" value="{%Value}{numDecimals:0}%"/>
								<Property name="reportColumn" value="会议参加时间比" />
							</ExtraYaxis>
						</ReportChart>
					</ReportChartList>
				</Report>    
			    ]]>
			    </reportInfo>
				<subjectReport>
				<![CDATA[
				    select memb.name as '人员', memb.id as userId,:start_time as beginDate, :end_time as endDate,                             
					case :time when 0 then '本日'                                                                                           
					when 1 then '本周'                                                                                                      
					when 2 then '本月'                                                                                                      
					when 5 then '本年'                                                                                                      
					else concat(concat(:start_time,'到'),:end_time)                                                                     
					end as '时间',                                                                                                          
					IFNULL((attend+notattend+notreceipt+undetermined),0) as '会议总数',                                                               
					IFNULL(attend,0) as '参加数',IFNULL(notattend,0) as '不参加数', IFNULL(notreceipt,0) as '未回执数',IFNULL(undetermined,0) as '待定数',
					IFNULL(attend/(attend+notattend+notreceipt+undetermined),0) as '参加比',
					IFNULL(total_time,0) as '参会时长' 
					from
					(select org_member.name,org_member.id from org_member where id in (:user_id)) 	memb left join
					(                                                                                                                   
					select mem.name as per,mem.id as user_id,                                                                               
					sum(case when a.sub_state=31 then 1 else 0 end) as attend,                                                              
					sum(case when a.sub_state=32 then 1 else 0  end)as notattend,                                                           
					sum(case when a.sub_state=11 or a.sub_state=12 then 1 else 0 end) as notreceipt,                                        
					sum(case when a.sub_state=33 then 1 else 0 end) as undetermined,                                                        
					sum(case when a.sub_state=31 then TIMESTAMPDIFF(MINUTE,m.BEGIN_DATE,m.END_DATE) else 0 end) as total_time         
					FROM ctp_affair a INNER JOIN MEETING m ON m.ID=a.OBJECT_ID		                                                                                                   
					left join org_member mem on mem.id=a.member_id                                                                          
					where a.APP = 6 AND a.SUB_APP=5 and a.member_id in (:user_id) and                                                       
					case when 0=:time then date(a.COMPLETE_TIME) >= :start_time and date(a.COMPLETE_TIME) < :end_time                     
					when (1=:time or 2=:time or 4=:time or 5=:time) then date(a.COMPLETE_TIME) >= :start_time and date(a.COMPLETE_TIME) <= :end_time       
					else true                                                                                                               
					end                                                                                                                     
					and a.IS_DELETE=0 and a.state!=2                                                                                                      
					group by a.member_id                                                                                                    
					) tmp on tmp.user_id=memb.id     
				]]>
				</subjectReport>
			</main>
		</MeetingAttendStatics>
		<MeetingJoinRoleStatistics>
			<main>
				<subjectReport>
				<![CDATA[			    
					select b.per as '人员',b.user_id as userId , :start_time as beginDate, :end_time as endDate,b.dtime as '时间' ,b.create_user as '发起人', b.emcee as '主持人' , b.recorder as '记录人', b.conferee  as '与会人'		
					from (                                                                                                                                                                                                        
					select mem.name as per,mem.id as user_id,                                                                                                                                                                     
					case :time when 0 then '本日'                                                                                                                                                                                 
					when 1 then '本周'                                                                                                                                                                                            
					when 2 then '本月'                                                                                                                                                                                            
					when 5 then '本年'                                                                                                                                                                                            
					else concat(concat(:start_time,'到'),:end_time)                                                                                                                                                           
					end as dtime,                                                                                                                                                                                                 
					IFNULL(sum(create_user),0) as create_user,IFNULL(sum(emcee),0) as emcee,IFNULL(sum(recorder),0) as recorder, IFNULL(sum(conferee),0) as conferee                                                                                                      
					from
					(select member.name, member.id from org_member member where member.id IN (:user_id) 
					) mem left join 
					(                                                                                                                                                                                                         
					select m.create_user as user_id,count(*)as create_user,0 as emcee, 0 as recorder,0 as conferee                                                                                                                
					from meeting m                                                                                                                                                                                                
						where case when 0=:time then m.END_DATE >= :start_time and m.END_DATE < :end_time                                                                                                                       
						when (1=:time or 2=:time or 4=:time or 5=:time) then date(m.END_DATE) >= :start_time and date(m.END_DATE) <= :end_time                                                                                  
						else true                                                                                                                                                                                                   
						end                                                                                                                                                                                     
						and m.create_user in(:user_id) and m.state!=0 and m.room_state not in(0,2)				                                                                                                         
						group by m.create_user                                                                                                                                                                  
					union                                                                                                                                                                                                         
					select                                                                                                                                                                                                        
						m.emcee_id as user_id,                                                                                                                                                                                      
						0 as create_user,                                                                                                                                                                        
						count(*) as emcee,                                                                                                                              
						0 as recorder, 0 as conferee                                                                                                                    
					from meeting  m                                                                                                                                                                                               
					where                                                                                                                                                                                                         
						case when 0=:time then m.END_DATE >= :start_time and m.END_DATE < :end_time                                                                                                                             
						when (1=:time or 2=:time or 4=:time or 5=:time) then date(m.END_DATE) >= :start_time and date(m.END_DATE) <= :end_time                                                                                  
						else true                                                                                                                                                                                                   
						end                                                                                                                                                                                                          
						and m.emcee_id in (:user_id) and m.state!=0 and m.room_state not in(0,2)                                                                                                                  
						group by user_id                                                                                                                                                                                             
					union 
					select                                                                                                                                                                                                         
						m.recorder_id as user_id,                                                                                                                                                                                    
						0 as create_user,                                                                                                                                                                                            
						0 as emcee,                                                                                                                                           
						count(*) as recorder, 0 as conferee                                                                                                                       
					from meeting  m                                                                                                                                                                                                
					where                                                                                                                                                                                                          
						case when 0=:time then m.END_DATE >= :start_time and m.END_DATE < :end_time                                                                                                                              
						when (1=:time or 2=:time or 4=:time or 5=:time) then date(m.END_DATE) >= :start_time and date(m.END_DATE) <= :end_time                                                                                  
						else true                                                                                                                                                                                                   
						end                                                                                                                                                                                                         
						and m.recorder_id in (:user_id) and m.state!=0 and m.room_state not in(0,2)                                                                                                                  
						group by user_id                                                                                                                                                                                            
					union 
					select                                                                                                                                                                                                        
						conf.CONFEREE_ID as user_id,0 as create_user,0 as emcee,0 as recorder,                                                                                                                                        
						count(DISTINCT m.ID) as conferee 
					from  meeting_conferee conf INNER JOIN ORG_MEMBER memb 
					ON conf.CONFEREE_ID=memb.ID and conf.type in(1,3) and conf.CONFEREE_TYPE='Member'
					INNER JOIN meeting m  on m.ID=conf.MEETING_ID                                                                                                               
					where                                                                                                                                                                                                         
						MEMB.id in (:user_id)
					   and m.STATE!=0 and m.room_state not in(0,2) and m.emcee_Id != memb.id AND m.recorder_Id != memb.id AND                                                                                                                                  		
						case when 0=:time then m.END_DATE >= :start_time and m.END_DATE < :end_time                                                                                                                           
						when (1=:time or 2=:time or 4=:time or 5=:time) then date(m.END_DATE) >= :start_time and date(m.END_DATE) <= :end_time                                                                                
						else true                                                                                                                                                                                                 
						end                                                                                                                                                                                                       
					group by conf.CONFEREE_ID 
				union all
				select                                                                                                                                                                                                        
				mem.id as user_id,0 as create_user,0 as emcee,0 as recorder,                                                                                                                                        
				COUNT(DISTINCT a.meeting_id) as conferee
				from
				(		select DISTINCT r.SOURCE_ID AS id,
						r.ORG_ACCOUNT_ID AS relate_id 
						from ORG_RELATIONSHIP r 
						where r.TYPE='Member_Post' AND r.SOURCE_ID IN (:user_id)
					UNION
						select DISTINCT r.SOURCE_ID AS id,
						r.OBJECTIVE0_ID AS relate_id 
						from ORG_RELATIONSHIP r 
						where r.TYPE='Member_Post' AND r.SOURCE_ID IN (:user_id)
					UNION
						select DISTINCT r.SOURCE_ID AS id,
						r.OBJECTIVE1_ID AS relate_id 
						from ORG_RELATIONSHIP r 
						where r.TYPE='Member_Post' AND r.SOURCE_ID IN (:user_id)
					UNION
						select DISTINCT r.SOURCE_ID AS id,
						r.OBJECTIVE2_ID AS relate_id 
						from ORG_RELATIONSHIP r 
						where r.TYPE='Member_Post' AND r.SOURCE_ID IN (:user_id)
					UNION
						select DISTINCT r.OBJECTIVE0_ID AS id,
						r.SOURCE_ID AS relate_id
						from ORG_RELATIONSHIP r
						where r.TYPE='Team_Member' AND r.OBJECTIVE0_ID IN (:user_id)
				) mem left join
				(select                                                                                                                                                                                                        
				m.emcee_Id,m.recorder_Id,conf.CONFEREE_ID user_id,                                                                                                                                       
				m.ID as meeting_id 
				from  meeting_conferee conf INNER JOIN ORG_MEMBER memb 
				ON conf.type in(1,3) and ( 
				    (CONF.CONFEREE_ID IN (SELECT r.ORG_ACCOUNT_ID FROM ORG_RELATIONSHIP r WHERE r.SOURCE_ID=memb.id AND r.TYPE='Member_Post') AND CONF.CONFEREE_TYPE='Account')
					OR (CONF.CONFEREE_ID IN (SELECT r.OBJECTIVE0_ID FROM ORG_RELATIONSHIP r WHERE r.SOURCE_ID=memb.id AND r.TYPE='Member_Post') AND CONF.CONFEREE_TYPE='Department')
					OR (CONF.CONFEREE_ID IN (SELECT r.OBJECTIVE1_ID FROM ORG_RELATIONSHIP r WHERE r.SOURCE_ID=memb.id AND r.TYPE='Member_Post') AND CONF.CONFEREE_TYPE='Post')
					OR (CONF.CONFEREE_ID IN (SELECT r.OBJECTIVE2_ID FROM ORG_RELATIONSHIP r WHERE r.SOURCE_ID=memb.id AND r.TYPE='Member_Post') AND CONF.CONFEREE_TYPE='Level')
					OR (CONF.CONFEREE_ID IN (SELECT r.SOURCE_ID FROM ORG_RELATIONSHIP r WHERE r.OBJECTIVE0_ID=memb.id AND r.TYPE='Team_Member') AND CONF.CONFEREE_TYPE='Team')
				)
				INNER JOIN meeting m  on m.ID=conf.MEETING_ID                                                                                                               
				where                                                                                                                                                                                                         
					MEMB.id in (:user_id)
						   and m.STATE!=0 and m.room_state not in(0,2) and m.emcee_Id != memb.id AND m.recorder_Id != memb.id AND                                                                                                                                  		
							case when 0=:time then m.END_DATE >= :start_time and m.END_DATE < :end_time                                                                                                                           
							when (1=:time or 2=:time or 4=:time or 5=:time) then date(m.END_DATE) >= :start_time and date(m.END_DATE) <= :end_time                                                                                
							else true                                                                                                                                                                                                 
							end                                                                                                                                                                                                       
				) a 
				on mem.relate_id=a.user_id
				AND mem.id!=a.emcee_Id AND mem.id!=a.recorder_Id
				group by mem.id 
				) a 
				on a.user_id=mem.id
				group by mem.id, mem.name ) b                                                                                                                                                                                         
				where b.per is not null                                                                                                                                                                                         
				]]>
				</subjectReport>
			</main>
		</MeetingJoinRoleStatistics>
	</report>
</sqlcfg>