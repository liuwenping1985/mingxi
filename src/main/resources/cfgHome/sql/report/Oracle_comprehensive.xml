<?xml version="1.0" encoding="UTF-8"?>
<sqlcfg>
	<report>
		<WorkDailyStatistics>
			<getCollaborativeStatistics>
				<sql1>
                <![CDATA[SELECT a.name AS "管理范围",]]>
				</sql1>
				<sql2>
                <![CDATA[cast('协同' AS VARCHAR(6)) AS "类型",]]>
				</sql2>
				<sql3>
                <![CDATA[cast('公文' AS VARCHAR(6)) AS "类型",]]>
				</sql3>
				<sql4>
                <![CDATA[
                   (CASE WHEN b.total IS NULL THEN 0 ELSE b.total END) AS "数量",                                                                                                           
                           (CASE WHEN c.total IS NULL THEN 0 ELSE c.total END) AS "平均数",                                                                                              
                           (CASE WHEN b.over_due IS NULL THEN 0 ELSE b.over_due END) AS "超期数",                                                                                                   
                           (CASE WHEN CAST(ROUND(b.over_due/b.total*100,2) AS CHAR(6)) IS NULL THEN '0.00%' ELSE CONCAT(CAST(ROUND(b.over_due/b.total*100,2) AS CHAR(6)),'%') END) AS "超期百分比",
                       a.member_id as member_id,:startTime as start_time,:endTime as end_time                                                            
                       FROM (                                                                                                                                                                     
                   (SELECT                                                                                                                                                                  
                     o.ID                AS member_id,                                                                                                                                      
                     o.NAME              AS NAME,                                                                                                                                           
                     o.ORG_DEPARTMENT_ID AS dep_id                                                                                                                                          
                   FROM org_member o                                                                                                                                                        
                   WHERE o.ID IN(:users)) a                                                                                                                                                 
                   LEFT JOIN                                                                                                                                                                
                   (SELECT                                                                                                                                                                  
                     ca.MEMBER_ID AS member_id,                                                                                                                                             
                     COUNT(ca.MEMBER_ID) AS total,                                                                                                                                          
                     SUM(CASE WHEN :timeStr2 THEN 1 ELSE 0 END) AS over_due                                                                                                          
                   FROM ctp_affair ca                                                      
                   WHERE ca.member_id IN(:users) 
                   	  and ca.is_delete = 0                                                                                                                                       
                      AND ca.app in( :apptype)                                                                                                                                                  
                       AND (ca.state = :state   
                ]]>
				</sql4>
				<sql5>
                <![CDATA[
                   GROUP BY ca.member_id) b                                                                                                                                                 
                   ON a.member_id=b.member_id                                                                                                                                               
                   LEFT JOIN                                                                                                                                                                
                   (SELECT                                                                                                                                                                  
                     middle.DEPARTMENT_ID as dep_id,SUM(middle.AVG_NUMBER) as total                                                                                                                                        
                   FROM rpt_collaborative middle                                                                                                                                  
                   WHERE  middle.APP_TYPE in( :apptype)                                                                                                                                              
                       AND middle.STATUS = :status AND (:time=3 OR (:time!=3                                                                                                                          
                       AND TO_DATE(:avgStart,'yyyy-mm-dd') <= middle.query_time                                                                                                                                              
                       AND middle.QUERY_TIME < TO_DATE(:avgEnd,'yyyy-mm-dd')))                                                                                                                                                  
                   GROUP BY middle.DEPARTMENT_ID) c                                                                                                                                          
                   ON a.dep_id=c.dep_id                                                                                                                                                     
                ) order by a.name     
                ]]>
				</sql5>
				<sql6>
                <![CDATA[
                (CASE WHEN b.total IS NULL THEN 0 ELSE b.total END) AS "数量",
                     (CASE WHEN d.total IS NULL THEN 0 ELSE d.total END) AS "平均数",
            (CASE WHEN b.over_due IS NULL THEN 0 ELSE b.over_due END) AS "超期数",
            (CASE WHEN ROUND(b.over_due/b.total*100,2) IS NULL THEN '0.00%' ELSE CONCAT(ROUND(b.over_due/b.total*100,2),'%') END) AS "超期百分比",
            a.member_id as member_id,:startTime as start_time,:endTime as end_time 
        FROM (
            (SELECT
              o.ID                AS member_id,
              o.NAME              AS NAME,
              o.ORG_DEPARTMENT_ID AS dep_id 
            FROM org_member o 
            WHERE o.ID IN(:users)) a 
            LEFT JOIN
            (SELECT 
               doc.create_user_id AS member_id,
               COUNT(*) AS total,
			   SUM(CASE WHEN affair.is_process_over_time=1 THEN 1 ELSE 0 END) AS over_due 
            FROM doc_resources doc left JOIN CTP_AFFAIR affair on affair.ID=doc.SOURCE_ID and doc.mime_type_id=1
            WHERE doc.MIME_TYPE_ID=:mime_type_id 
               AND doc.CREATE_USER_ID IN(:users) 
               AND (CASE WHEN 3=:time THEN 1 WHEN doc.CREATE_TIME<TO_DATE(:endTime,'yyyy-mm-dd') AND doc.create_time>=TO_DATE(:startTime,'yyyy-mm-dd') THEN 1 ELSE 0 END)=1
            GROUP BY doc.create_user_id) b 
            ON a.member_id=b.member_id 
            LEFT JOIN 
               (SELECT                                                                                                                                                                  
                     middle.DEPARTMENT_ID as dep_id,SUM(middle.AVG_NUMBER) as total                                                                                                                                        
                   FROM rpt_collaborative middle                                                                                                                                  
                   WHERE  middle.APP_TYPE in( :apptype)                                                                                                                                              
                       AND middle.STATUS = 16 AND (:time=3 OR (:time!=3                                                                                                                          
                       AND TO_DATE(:avgStart,'yyyy-mm-dd') <= middle.query_time                                                                                                                                              
                       AND middle.QUERY_TIME < TO_DATE(:avgEnd,'yyyy-mm-dd') ))                                                                                                                                                 
                   GROUP BY middle.DEPARTMENT_ID) d           
            ON a.dep_id=d.dep_id) order by a.name
                ]]>
				</sql6>
				<sql7>
                <![CDATA[]]>
				</sql7>
				<sql8>
                <![CDATA[]]>
				</sql8>
				<sql9>
                <![CDATA[]]>
				</sql9>
			</getCollaborativeStatistics>
			<generateStatus>
				<sql1>
                <![CDATA[ AND 1=1) ]]>
				</sql1>
				<sql2>
                <![CDATA[cast('已办' AS VARCHAR(6)) AS "状态",]]>
				</sql2>
				<sql3>
                <![CDATA[ AND ca.COMPLETE_TIME>=TO_DATE(:startTime,'yyyy-mm-dd') AND ca.COMPLETE_TIME<TO_DATE(:endTime,'yyyy-mm-dd')) ]]>
				</sql3>
				<sql4>
                <![CDATA[]]>
				</sql4>
				<sql5>
                <![CDATA[]]>
				</sql5>
				<sql6>
                <![CDATA[ or ca.state=3 and EXISTS (select * from doc_resources d where d.id=ca.ARCHIVE_ID and d.CREATE_TIME>=TO_DATE(:startTime,'yyyy-mm-dd') AND d.CREATE_TIME<TO_DATE(:endTime,'yyyy-mm-dd'))]]>
				</sql6>
				<sql7>
                <![CDATA[]]>
				</sql7>
				<sql8>
                <![CDATA[]]>
				</sql8>
				<sql9>
                <![CDATA[ ca.is_cover_time=1 ]]>
				</sql9>
				<sql10>
                <![CDATA[cast('已发' AS VARCHAR(6)) AS "状态",]]>
				</sql10>
				<sql11>
                <![CDATA[  AND ca.create_date>=TO_DATE(:startTime,'yyyy-mm-dd') AND ca.create_date<TO_DATE(:endTime,'yyyy-mm-dd'))]]>
				</sql11>
				<sql12>
                <![CDATA[]]>
				</sql12>
				<sql13>
                <![CDATA[]]>
				</sql13>
				<sql14>
                <![CDATA[ (ca.is_process_over_time =1) ]]>
				</sql14>
				<sql15>
                <![CDATA[cast('待办' AS VARCHAR(6)) AS "状态",]]>
				</sql15>
				<sql16>
                <![CDATA[ AND ca.ARCHIVE_ID is null AND ca.RECEIVE_TIME>=TO_DATE(:startTime,'yyyy-mm-dd') AND ca.RECEIVE_TIME<TO_DATE(:endTime,'yyyy-mm-dd'))]]>
				</sql16>
				<sql17>
                <![CDATA[]]>
				</sql17>
				<sql18>
                <![CDATA[]]>
				</sql18>
				<sql19>
                <![CDATA[  ]]>
				</sql19>
				<sql20>
				
                <![CDATA[ ca.is_cover_time=1 ]]>
				</sql20>
				<sql21>
                <![CDATA[cast('暂存待办' AS VARCHAR(12)) AS "状态",]]>
				</sql21>
				<sql22>
                <![CDATA[ AND ca.RECEIVE_TIME>=TO_DATE(:startTime,'yyyy-mm-dd') AND ca.RECEIVE_TIME<TO_DATE(:endTime,'yyyy-mm-dd'))]]>
				</sql22>
				<sql23>
                <![CDATA[]]>
				</sql23>
				<sql24>
                <![CDATA[]]>
				</sql24>
				<sql25>
                <![CDATA[ and ca.SUB_STATE=13 ]]>
				</sql25>
				<sql26>
                <![CDATA[ ca.is_cover_time=1 ]]>
				</sql26>
				<sql27>
                <![CDATA[cast('已归档' AS VARCHAR(9)) AS "状态",]]>
				</sql27>
				<sql28>
                <![CDATA[ AND CA.OBJECT_ID!=-1 AND CA.SUB_OBJECT_ID!=-1 ]]>
				</sql28>
				<sql29>
                <![CDATA[ or ca.state=3 and ca.ARCHIVE_ID is not null and EXISTS (select * from doc_resources d where d.id=ca.ARCHIVE_ID)) ]]>
				</sql29>
			</generateStatus>
			<getPlanStatistics>
				<sql1>
            <![CDATA[
            SELECT 
            a.name AS "管理范围", 
            cast('计划' AS VARCHAR(6)) AS "类型", 
            ]]>
				</sql1>
				<sql2>
            <![CDATA[
               (CASE WHEN b.total IS NULL THEN 0 ELSE b.total END) AS "数量", 
               (CASE WHEN c.dep_sum IS NULL THEN 0 ELSE c.dep_sum END) AS "平均数", 
               '-' AS "超期数", 
               '-' AS "超期百分比",
            a.member_id as member_id,:startTime as start_time,:endTime as end_time  
            FROM ( 
               (SELECT 
                 o.ID                AS member_id, 
                 o.NAME              AS NAME, 
                 o.ORG_DEPARTMENT_ID AS dep_id 
               FROM org_member o 
               WHERE o.ID IN(:users)) a 
               LEFT JOIN 
            ]]>
				</sql2>
				<sql3>
            <![CDATA[
               ON a.member_id=b.member_id 
               LEFT JOIN 
               (SELECT 
                 middle.department_id AS dep_id, 
                 sum(middle.total) AS dep_sum                FROM rpt_plan middle 
               WHERE middle.status=:status AND (:time=3 OR (:time!=3
                   AND TO_DATE(:avgStart,'yyyy-mm-dd') <= middle.query_time                                                                                                                                              
                       AND middle.QUERY_TIME < TO_DATE(:avgEnd,'yyyy-mm-dd') ))                                                                                                                                                 
                   GROUP BY middle.DEPARTMENT_ID) c                                                                                                                                         
                   ON a.dep_id=c.dep_id 
            ) order by a.name
            ]]>
				</sql3>
			</getPlanStatistics>
			<generatePlanStatus>
				<sql1>
                <![CDATA[cast('已发布' AS VARCHAR(9)) AS "状态",]]>
				</sql1>
				<sql2>
                <![CDATA[
                (SELECT 
                              p.create_user_id AS member_id, 
                              COUNT(p.create_user_id) AS total 
                            FROM plan_info p 
                            WHERE p.status != 1 
                               AND p.create_user_id IN(:users) 
                               AND (CASE WHEN 3!=:time AND 
                               p.create_time >= TO_DATE(:startTime,'yyyy-mm-dd') AND p.create_time < TO_DATE(:endTime,'yyyy-mm-dd') THEN 1 WHEN 3=:time THEN 1 ELSE 0 END)=1 
                            GROUP BY p.create_user_id) b 
                ]]>
				</sql2>
				<sql3>
                <![CDATA[cast('已接收' AS VARCHAR(9)) AS "状态",]]>
				</sql3>
				<sql4>
                <![CDATA[
                (SELECT 
                          pu.ref_user_id AS member_id, 
                          COUNT(pu.ref_user_id) AS total 
                        FROM plan_info p INNER JOIN plan_relevant_user pu 
                           ON p.id = pu.ref_plan_id 
                        WHERE p.status != 1 AND pu.type!=4 
                           AND pu.ref_user_id IN(:users) 
                           AND (CASE WHEN 3!=:time AND 
                               p.create_time >= TO_DATE(:startTime,'yyyy-mm-dd') 
                               AND p.create_time < TO_DATE(:endTime,'yyyy-mm-dd') THEN 1 WHEN 3=:time THEN 1 ELSE 0 END)=1 
                        GROUP BY pu.ref_user_id) b 
                ]]>
				</sql4>
				<sql5>
                <![CDATA[cast('已回复' AS VARCHAR(9)) AS "状态",]]>
				</sql5>
				<sql6>
                <![CDATA[
                   (SELECT 
                             a.CREATE_ID AS member_id, 
                             COUNT(DISTINCT a.MODULE_ID) AS total 
                           FROM ctp_comment_all a INNER JOIN plan_info p ON a.MODULE_ID=p.ID 
                           WHERE a.MODULE_TYPE=5 AND p.status != 1 
                               AND a.CREATE_ID IN(:users) and a.pid=0 
                               AND (CASE WHEN 3=:time THEN 1 WHEN 3!=:time AND 
                                   a.create_date >= TO_DATE(:startTime,'yyyy-mm-dd') 
                                   AND a.create_date < TO_DATE(:endTime,'yyyy-mm-dd') THEN 1 ELSE 0 END)=1 
                           GROUP BY  a.create_id) b 
                ]]>
				</sql6>
				<sql7>
                <![CDATA[cast('未回复（主送）' AS VARCHAR(32)) AS "状态",]]>
				</sql7>
				<sql8>
                <![CDATA[
                   (SELECT  
                          pu.ref_user_id AS member_id, 
                          COUNT(pu.ref_user_id ) AS total 
                        FROM plan_info p INNER JOIN plan_relevant_user pu 
                           ON p.id = pu.ref_plan_id 
                        WHERE p.status != 1 AND pu.PROCESS!=1 and pu.type=1
                           AND pu.ref_user_id IN(:users) 
                           AND (CASE WHEN 3=:time THEN 1 WHEN 3!=:time AND 
                               p.create_time >= TO_DATE(:startTime,'yyyy-mm-dd') 
                               AND p.create_time < TO_DATE(:endTime,'yyyy-mm-dd') THEN 1 ELSE 0 END)=1 
                        GROUP BY pu.ref_user_id) b 
                ]]>
				</sql8>
			</generatePlanStatus>
			<getMeetingStatistics>
				<sql1>
				<![CDATA[
				SELECT 
                   a.name AS "管理范围", 
                   cast('会议' AS VARCHAR(6)) AS "类型", 
				]]></sql1>
				<sql2><![CDATA[
				(CASE WHEN b.total IS NULL THEN 0 ELSE b.total END) AS "数量", 
                (CASE WHEN c.dep_sum is null THEN 0 ELSE c.dep_sum END) AS "平均数", 
                '-' AS "超期数", 
                '-' AS "超期百分比",
                a.member_id as member_id,:startTime as start_time,:endTime as end_time  
                FROM ( 
                (SELECT 
                o.ID                AS member_id, 
                o.NAME              AS NAME, 
                o.ORG_DEPARTMENT_ID AS dep_id 
                FROM org_member o 
                WHERE o.ID IN(:users)) a 
                LEFT JOIN (
				]]>
				</sql2>
				<sql3><![CDATA[
				) b 
                ON a.member_id=b.member_id 
                LEFT JOIN 
                (SELECT 
                     middle.department_id AS dep_id, 
                     sum(middle.total) AS dep_sum 
                   FROM rpt_meeting middle 
                   WHERE middle.status=:status  AND (:time=3 OR (:time!=3
                       AND TO_DATE(:avgStart,'yyyy-mm-dd') <= middle.query_time 
                           AND middle.QUERY_TIME < TO_DATE(:avgEnd,'yyyy-mm-dd')))
                       GROUP BY middle.DEPARTMENT_ID) c  
                       ON a.dep_id=c.dep_id 
                ) order by a.name
				]]></sql3>
			</getMeetingStatistics>
			<generateMeetingStatus>
                <sql1><![CDATA[cast('已发' AS VARCHAR(6)) AS "状态",]]></sql1>
                <sql2>
                <![CDATA[
                    SELECT  
                    m.create_user AS member_id, 
                    COUNT(m.CREATE_USER) AS total 
                    FROM meeting m  
                    WHERE m.create_user IN (:users)
                    AND m.state!=50 
                    AND (CASE WHEN 3!=:time THEN (CASE WHEN UPDATE_DATE IS NULL AND (m.CREATE_DATE>=TO_DATE(:startTime,'yyyy-mm-dd') AND m.CREATE_DATE<TO_DATE(:endTime,'yyyy-mm-dd')) THEN 1 
                        WHEN (m.UPDATE_DATE>=TO_DATE(:startTime,'yyyy-mm-dd') AND m.UPDATE_DATE<TO_DATE(:endTime,'yyyy-mm-dd')) THEN 1 ELSE 0 END) 
                        ELSE 1 END)=1  
                    AND m.STATE != 0 AND m.room_state !=0 AND m.room_state!=2
                    GROUP BY m.CREATE_USER 
                ]]></sql2>
                <sql3><![CDATA[cast('已开' AS VARCHAR(6)) AS "状态",]]></sql3>
                <sql4>
                <![CDATA[
                    SELECT m.member_id AS member_id, 
                    COUNT(m.member_id) total 
                    FROM ctp_affair m inner join meeting mt on mt.id=m.object_id 
                    WHERE m.APP = 6 
                    and m.member_id IN (:users) 
                    AND m.SUB_APP = 5 
                    AND m.STATE = 4 and mt.state in (30, -10,31) 
                    AND (CASE WHEN 3!=:time AND (mt.END_DATE>=TO_DATE(:startTime,'yyyy-mm-dd') AND mt.END_DATE<TO_DATE(:endTime,'yyyy-mm-dd')) THEN 1 WHEN 3=:time THEN 1 ELSE 0 END)=1 
                    GROUP BY m.member_id 
                ]]></sql4>
                <sql5><![CDATA[cast('待开' AS VARCHAR(6)) AS "状态",]]></sql5>
                <sql6>
                <![CDATA[
                    SELECT m.member_id AS member_id, 
                    COUNT(m.member_id) total 
                    FROM ctp_affair m inner join meeting mt on mt.id=m.object_id 
                    WHERE m.member_id IN (:users) 
                    AND m.APP = 6
                    AND m.sub_state!=34
                    AND m.SUB_APP = 5 
                    AND (m.state = 3 AND m.SUB_STATE!=32) 
                    AND (CASE WHEN 3!=:time AND (
                    (mt.BEGIN_DATE>=TO_DATE(:startTime,'yyyy-mm-dd') AND mt.END_DATE<=TO_DATE(:endTime,'yyyy-mm-dd')) 
                    OR (mt.BEGIN_DATE<=TO_DATE(:startTime,'yyyy-mm-dd') AND mt.END_DATE>=TO_DATE(:startTime,'yyyy-mm-dd')) 
                    OR (mt.BEGIN_DATE<TO_DATE(:endTime,'yyyy-mm-dd') AND mt.END_DATE>=TO_DATE(:endTime,'yyyy-mm-dd'))
                    ) THEN 1 WHEN 3=:time THEN 1 ELSE 0 END)=1 
                    GROUP BY m.member_id 
                ]]>
                </sql6>
                <sql7><![CDATA[cast('已归档' AS VARCHAR(9)) AS "状态",]]></sql7>
                <sql8>
                <![CDATA[
                    SELECT m.create_user AS member_id, 
                    COUNT(m.create_user) total 
                    FROM meeting m 
                    JOIN doc_resources doc 
                    ON (m.ID = doc.SOURCE_ID) 
                    WHERE m.create_user IN(:users) 
                    AND m.state =  - 10 
                    AND (CASE WHEN 3!=:time AND (doc.CREATE_TIME>=TO_DATE(:startTime,'yyyy-mm-dd') AND doc.CREATE_TIME<TO_DATE(:endTime,'yyyy-mm-dd')) THEN 1 WHEN 3=:time THEN 1 ELSE 0 END)=1 
                    GROUP BY m.create_user  
                ]]>
                </sql8>
                <sql9><![CDATA[cast('未回执' AS VARCHAR(9)) AS "状态",]]></sql9>
                <sql10>
                <![CDATA[
                    SELECT m.member_id AS member_id, 
                    COUNT(m.member_id) total 
                    FROM ctp_affair m INNER JOIN meeting mt on m.object_id=mt.id 
                    WHERE m.member_id IN (:users) 
                    AND m.APP = 6 
                    AND m.SUB_APP = 5 
                    AND (m.SUB_STATE = 11 
                    OR m.SUB_STATE = 12) 
                    AND (CASE WHEN 3!=:time AND (mt.END_DATE>=TO_DATE(:startTime,'yyyy-mm-dd') AND mt.END_DATE<TO_DATE(:endTime,'yyyy-mm-dd')) THEN 1 WHEN 3=:time THEN 1 ELSE 0 END)=1 
                    GROUP BY m.member_id     
                ]]>
                </sql10>
                <sql11><![CDATA[cast('已回执' AS VARCHAR(6)) AS "状态",]]></sql11>
                <sql12>
                <![CDATA[
                    SELECT m.member_id AS member_id, 
                    COUNT(DISTINCT m.object_id) total 
                    FROM ctp_affair m INNER JOIN meeting mt on m.object_id=mt.id 
                    WHERE m.member_id IN (:users) 
                    AND m.APP = 6 
                    AND m.SUB_APP = 5 
                    AND (m.SUB_STATE = 31 
                    OR m.SUB_STATE = 32 
                    OR m.SUB_STATE = 33)    
                    AND (CASE WHEN 3!=:time AND (mt.END_DATE>=TO_DATE(:startTime,'yyyy-mm-dd') AND mt.END_DATE<TO_DATE(:endTime,'yyyy-mm-dd')) THEN 1 WHEN 3=:time THEN 1 ELSE 0 END)=1 
                    GROUP BY m.member_id   
                ]]>
                </sql12>
			</generateMeetingStatus>
		</WorkDailyStatistics>
	</report>
</sqlcfg>