<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans default-autowire="byName">
	<!--任务单位 -->
	<bean id="taskAccount" class="com.seeyon.apps.dashboard.bo.ReportPoint">
		<property name="comment" value="单位任务"></property>
		<!-- po对象 (用户自定义) -->
		<property name="po" value="com.seeyon.apps.dashboard.po.RptTaskIndex"></property>
		<!-- 部门,人员,单位 (用户自定义) -->
		<property name="type">
			<map>
				<!--key po属性名 ,表示模块类型 -->
				<entry key="orgType" value="account"></entry>
			</map>
		</property>
		<property name="fieldDataNodes">
			<list>
				<bean class="com.seeyon.apps.dashboard.bo.FieldDataNode">
					<property name="comment" value="要做任务数"></property>
					<property name="propertyNodes">
						<!-- 对象属性和字段映射关系 (用户设置) -->
						<list>
							<!-- 唯一键值 必须配置 -->
							<bean class="com.seeyon.apps.dashboard.bo.PropertyNode">
								<property name="value" value="orgId"></property>
								<property name="merge" value="true"></property>
							</bean>
						</list>
					</property>
					<property name="sqlNodes">
						<list>
							<!-- 多数据库sql(用户自定义) -->
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<property name="dbCategory" value="all"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												u.id as orgid,
												count(DISTINCT r.task_id) as executedsum
											FROM
												org_unit u
											LEFT JOIN(
												SELECT
													M.org_account_id AS orgid,
													taskRole.task_id AS task_id
												FROM
													TASK_ROLE taskRole,
													task_info task,
													ORG_MEMBER M
												WHERE
													task. ID = taskRole.TASK_ID
												AND taskRole.role_type <> 3
												AND task.planned_end_time >= :startTime
												AND task.planned_start_time <= :endTime
												AND(
													task.STATUS IN(1, 2)
													OR taskRole.TASK_ID IN(
														SELECT
															feed.TASK_ID
														FROM
															(
																SELECT
																	f1.TASK_ID AS TASK_ID,
																	f1.create_time AS create_time,
																	f1.TASK_STATUS AS TASK_STATUS
																FROM
																	TASK_FEEDBACK f1
																INNER JOIN(
																	SELECT
																		task_id AS TASK_ID,
																		MAX(CREATE_TIME)AS CREATE_TIME
																	FROM
																		TASK_FEEDBACK
																	GROUP BY
																		TASK_ID
																)f2 ON f1.TASK_ID = f2.TASK_ID
																AND f1.CREATE_TIME = f2.CREATE_TIME
															)feed
														WHERE
															feed.create_time >= :startTime
														AND feed.create_time <= :endTime
														AND feed.TASK_STATUS = 4
													)
												)
												AND M . ID = taskRole.role_id
												AND M .IS_INTERNAL = 1
												AND M .IS_DELETED = 0
												AND M .state = 1
												AND M .IS_ASSIGNED = 1
												AND M .IS_ENABLE = 1
												AND M .ORG_DEPARTMENT_ID != - 1
											)r on u.id=r.ORGID
											group by
												u.id
										]]>
									</value>
								</property>
							</bean>
						</list>
					</property>
				</bean>
				<bean class="com.seeyon.apps.dashboard.bo.FieldDataNode">
					<property name="comment" value="完成任务数"></property>
					<property name="propertyNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.PropertyNode">
								<property name="value" value="orgId"></property>
								<property name="merge" value="true"></property>
							</bean>
						</list>
					</property>
					<property name="sqlNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<!-- 数据库版本 -->
								<property name="dbCategory" value="all"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												U .id AS orgid,
												COUNT(DISTINCT r.task_id)AS finishedsum
											FROM
												org_unit u
											LEFT JOIN(
												SELECT
													m.org_account_id AS orgid,
													taskRole.task_id AS task_id
												FROM
													TASK_ROLE taskRole,
													ORG_MEMBER M
												WHERE
													taskRole.role_id = M . ID
												AND taskRole.role_type <> 3
												AND(
													taskRole.task_id IN(
														SELECT
															feed.task_id
														FROM
															(
																SELECT
																	f1.TASK_ID AS task_id,
																	f1.create_time AS create_time,
																	f1.TASK_STATUS AS TASK_STATUS
																FROM
																	TASK_FEEDBACK f1
																INNER JOIN(
																	SELECT
																		task_id AS TASK_ID,
																		MAX(CREATE_TIME)AS CREATE_TIME
																	FROM
																		TASK_FEEDBACK
																	GROUP BY
																		TASK_ID
																)f2 ON f1.TASK_ID = f2.TASK_ID
																AND f1.CREATE_TIME = f2.CREATE_TIME
															)feed
														WHERE
															feed.task_STATUS = 4
														AND feed.create_time >= :startTime
														AND feed.create_time <= :endTime
													)
												)
												AND M . ID = taskRole.role_id
												AND M .IS_INTERNAL = 1
												AND M .IS_DELETED = 0
												AND M .state = 1
												AND M .IS_ASSIGNED = 1
												AND M .IS_ENABLE = 1
												AND M .ORG_DEPARTMENT_ID != - 1
											)r ON u.id = r.ORGID
											GROUP BY
												u.id
										]]>
									</value>
								</property>
							</bean>
						</list>
					</property>
				</bean>
				<bean class="com.seeyon.apps.dashboard.bo.FieldDataNode">
					<property name="comment" value="超期完成任务数"></property>
					<property name="propertyNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.PropertyNode">
								<property name="value" value="orgId"></property>
								<property name="merge" value="true"></property>
							</bean>
						</list>
					</property>
					<property name="sqlNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<!-- 数据库版本 -->
								<property name="dbCategory" value="all"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												U .id AS orgid,
												COUNT(DISTINCT r.task_id)AS overduefinishedsum
											FROM
												org_unit u
											LEFT JOIN(
												SELECT
													m.org_account_id AS orgid,
													taskRole.task_id AS task_id
												FROM
													TASK_ROLE taskRole,
													ORG_MEMBER m
												WHERE
													taskRole.role_id = m. ID
												AND taskRole.role_type <> 3
												AND(
													taskRole.task_id IN(
														SELECT
															task. ID
														FROM
															TASK_INFO task,
															(
																SELECT
																	f1.TASK_ID AS task_id,
																	f1.create_time AS create_time,
																	f1.TASK_STATUS AS TASK_STATUS
																FROM
																	TASK_FEEDBACK f1
																INNER JOIN(
																	SELECT
																		task_id AS TASK_ID,
																		MAX(CREATE_TIME)AS CREATE_TIME
																	FROM
																		TASK_FEEDBACK
																	GROUP BY
																		TASK_ID
																)f2 ON f1.TASK_ID = f2.TASK_ID
																AND f1.CREATE_TIME = f2.CREATE_TIME
															)feedback
														WHERE
															task. ID = feedback.task_id
														AND feedback.TASK_STATUS = 4
														AND(
															feedback.CREATE_TIME >=:startTime
															AND feedback.CREATE_TIME <=:endTime
															AND feedback.CREATE_TIME > task.PLANNED_END_TIME
														)
													)
												)
												AND M . ID = taskRole.role_id
												AND M .IS_INTERNAL = 1
												AND M .IS_DELETED = 0
												AND M .state = 1
												AND M .IS_ASSIGNED = 1
												AND M .IS_ENABLE = 1
												AND M .ORG_DEPARTMENT_ID != - 1
											)r ON U . id = r.ORGID
											GROUP BY
												U .id
										]]>
									</value>
								</property>
							</bean>
						</list>
					</property>
				</bean>
				<bean class="com.seeyon.apps.dashboard.bo.FieldDataNode">
					<property name="comment" value="未完成任务数"></property>
					<property name="propertyNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.PropertyNode">
								<property name="value" value="orgId"></property>
								<property name="merge" value="true"></property>
							</bean>
						</list>
					</property>
					<property name="sqlNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<!-- 数据库版本 -->
								<property name="dbCategory" value="all"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												U .id AS orgid,
												COUNT(DISTINCT r.task_id)AS unfinishedsum
											FROM
												org_unit u
											LEFT JOIN(
												SELECT
													m.org_account_id AS orgid,
													taskRole.task_id AS task_id
												FROM
													TASK_ROLE taskRole,
													ORG_MEMBER m
												WHERE
													taskRole.role_id = m. ID
												AND taskRole.role_type <> 3
												AND taskRole.task_id IN(
													SELECT
														task. ID
													FROM
														TASK_INFO task
													LEFT JOIN(
														SELECT
															f1.TASK_ID AS task_id,
															f1.create_time AS create_time,
															f1.TASK_STATUS AS TASK_STATUS
														FROM
															TASK_FEEDBACK f1
														INNER JOIN(
															SELECT
																task_id AS TASK_ID,
																MAX(CREATE_TIME)AS CREATE_TIME
															FROM
																TASK_FEEDBACK
															WHERE
																create_time <=:endTime
															GROUP BY
																TASK_ID
														)f2 ON f1.TASK_ID = f2.TASK_ID
														AND f1.CREATE_TIME = f2.CREATE_TIME
													)feedback ON task. ID = feedback.task_id
													WHERE
														(
															CASE
															WHEN feedback.task_id IS NULL
															AND task.PLANNED_START_TIME <= :endTime and task.status != 4 THEN
																1
															ELSE
																0
															END
														)= 1
													OR(
														CASE
														WHEN feedback.TASK_STATUS IN(1, 2)THEN
															1
														ELSE
															0
														END
													)= 1
												)
												AND M . ID = taskRole.role_id
												AND M .IS_INTERNAL = 1
												AND M .IS_DELETED = 0
												AND M .state = 1
												AND M .IS_ASSIGNED = 1
												AND M .IS_ENABLE = 1
												AND M .ORG_DEPARTMENT_ID != - 1
											)r ON U . id = r.ORGID
											GROUP BY
												U .id
										]]>
									</value>
								</property>
							</bean>
						</list>
					</property>
				</bean>
				<bean class="com.seeyon.apps.dashboard.bo.FieldDataNode">
					<property name="comment" value="超期未完成任务数"></property>
					<property name="propertyNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.PropertyNode">
								<property name="value" value="orgId"></property>
								<property name="merge" value="true"></property>
							</bean>
						</list>
					</property>
					<property name="sqlNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<!-- 数据库版本 -->
								<property name="dbCategory" value="all"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												U .id AS orgid,
												COUNT(DISTINCT r.task_id)AS overdueunfinishedsum
											FROM
												org_unit u
											LEFT JOIN(
												SELECT
													M .org_account_id AS orgid,
													taskRole.task_id AS task_id
												FROM
													TASK_ROLE taskRole,
													ORG_MEMBER M
												WHERE
													taskRole.role_id = M . ID
												AND taskRole.role_type <> 3
												AND taskRole.task_id IN(
													SELECT
														task. ID
													FROM
														TASK_INFO task
													LEFT JOIN(
														SELECT
															f1.TASK_ID AS task_id,
															f1.create_time AS create_time,
															f1.TASK_STATUS AS TASK_STATUS
														FROM
															TASK_FEEDBACK f1
														INNER JOIN(
															SELECT
																task_id AS TASK_ID,
																MAX(CREATE_TIME)AS CREATE_TIME
															FROM
																TASK_FEEDBACK
															WHERE
																create_time <=:endTime
															GROUP BY
																TASK_ID
														)f2 ON f1.TASK_ID = f2.TASK_ID
														AND f1.CREATE_TIME = f2.CREATE_TIME
													)feedback ON task. ID = feedback.task_id
													WHERE
														(
															CASE
															WHEN feedback.task_id IS NULL
															AND task.PLANNED_START_TIME <=:endTime
															AND task.PLANNED_END_TIME <=:endTime and task.status != 4 THEN
																1
															ELSE
																0
															END
														)= 1
													OR(
														CASE
														WHEN feedback.TASK_STATUS IN(1, 2)
														AND task.PLANNED_END_TIME <=:endTime THEN
															1
														ELSE
															0
														END
													)= 1
												)
												AND M . ID = taskRole.role_id
												AND M .IS_INTERNAL = 1
												AND M .IS_DELETED = 0
												AND M .state = 1
												AND M .IS_ASSIGNED = 1
												AND M .IS_ENABLE = 1
												AND M .ORG_DEPARTMENT_ID != - 1
											)r ON U . id = r.ORGID
											GROUP BY
												U .id
										]]>
									</value>
								</property>
							</bean>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>
	<!--任务部门 -->
	<bean id="taskDepartment" class="com.seeyon.apps.dashboard.bo.ReportPoint">
		<property name="comment" value="部门任务"></property>
		<!-- po对象 (用户自定义) -->
		<property name="po" value="com.seeyon.apps.dashboard.po.RptTaskIndex"></property>
		<!-- 部门,人员,单位 (用户自定义) -->
		<property name="type">
			<map>
				<!--key po属性名 ,表示模块类型 -->
				<entry key="orgType" value="department"></entry>
			</map>
		</property>
		<property name="fieldDataNodes">
			<list>
				<bean class="com.seeyon.apps.dashboard.bo.FieldDataNode">
					<property name="comment" value="要做任务数"></property>
					<property name="propertyNodes">
						<!-- 对象属性和字段映射关系 (用户设置) -->
						<list>
							<!-- 唯一键值 必须配置 -->
							<bean class="com.seeyon.apps.dashboard.bo.PropertyNode">
								<property name="value" value="orgId"></property>
								<property name="merge" value="true"></property>
							</bean>
						</list>
					</property>
					<property name="sqlNodes">
						<list>
							<!-- 多数据库sql(用户自定义) -->
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<property name="dbCategory" value="sql server"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												u.pid as orgid,
												count(DISTINCT r.task_id) as executedsum
											FROM
												(
													SELECT
														u2. ID AS pid,
														u1. ID AS SID
													FROM
														org_unit u1,
														org_unit u2
													WHERE
														u1. PATH LIKE u2. PATH + '%'
													AND u1. TYPE = 'Department'
													AND u2. TYPE = 'Department'
													AND u1.is_internal = 1
													and u1.is_deleted=0	
													and u1.is_enable=1
													AND u2.is_internal = 1
													and u2.is_deleted=0	
													and u2.is_enable=1
												)U
											LEFT JOIN(
												SELECT 
													M .ORG_DEPARTMENT_ID AS orgid,
													taskRole.task_id AS task_id
												FROM
													TASK_ROLE taskRole,
													task_info task,
													ORG_MEMBER M
												WHERE
													task. ID = taskRole.TASK_ID
												AND taskRole.role_type <> 3
												AND task.planned_end_time >= :startTime
												AND task.planned_start_time <= :endTime
												AND(
													task.STATUS IN(1, 2)
													OR taskRole.TASK_ID IN(
														SELECT
															feed.TASK_ID
														FROM
															(
																SELECT
																	f1.TASK_ID AS TASK_ID,
																	f1.create_time AS create_time,
																	f1.TASK_STATUS AS TASK_STATUS
																FROM
																	TASK_FEEDBACK f1
																INNER JOIN(
																	SELECT
																		task_id AS TASK_ID,
																		MAX(CREATE_TIME)AS CREATE_TIME
																	FROM
																		TASK_FEEDBACK
																	GROUP BY
																		TASK_ID
																)f2 ON f1.TASK_ID = f2.TASK_ID
																AND f1.CREATE_TIME = f2.CREATE_TIME
															)feed
														WHERE
															feed.create_time >= :startTime
														AND feed.create_time <= :endTime
														AND feed.TASK_STATUS = 4
													)
												)
												AND M . ID = taskRole.role_id
												AND M .IS_INTERNAL = 1
												AND M .IS_DELETED = 0
												AND M .state = 1
												AND M .IS_ASSIGNED = 1
												AND M .IS_ENABLE = 1
												AND M .ORG_DEPARTMENT_ID != - 1
											)r on u.sid=r.ORGID
											group by
												u.pid
										]]>
									</value>
								</property>
							</bean>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<property name="dbCategory" value="mysql,dm"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												u.pid as orgid,
												count(DISTINCT r.task_id) as executedsum
											FROM
												(
													SELECT
														u2. ID AS pid,
														u1. ID AS SID
													FROM
														org_unit u1,
														org_unit u2
													WHERE
														u1. PATH LIKE CONCAT(u2.PATH, '%')
													AND u1. TYPE = 'Department'
													AND u2. TYPE = 'Department'
													AND u1.is_internal = 1
													and u1.is_deleted=0	
													and u1.is_enable=1
													AND u2.is_internal = 1
													and u2.is_deleted=0	
													and u2.is_enable=1
												)U
											LEFT JOIN(
												SELECT 
													M .ORG_DEPARTMENT_ID AS orgid,
													taskRole.task_id AS task_id
												FROM
													TASK_ROLE taskRole,
													task_info task,
													ORG_MEMBER M
												WHERE
													task. ID = taskRole.TASK_ID
												AND taskRole.role_type <> 3
												AND task.planned_end_time >= :startTime
												AND task.planned_start_time <= :endTime
												AND(
													task.STATUS IN(1, 2)
													OR taskRole.TASK_ID IN(
														SELECT
															feed.TASK_ID
														FROM
															(
																SELECT
																	f1.TASK_ID AS TASK_ID,
																	f1.create_time AS create_time,
																	f1.TASK_STATUS AS TASK_STATUS
																FROM
																	TASK_FEEDBACK f1
																INNER JOIN(
																	SELECT
																		task_id AS TASK_ID,
																		MAX(CREATE_TIME)AS CREATE_TIME
																	FROM
																		TASK_FEEDBACK
																	GROUP BY
																		TASK_ID
																)f2 ON f1.TASK_ID = f2.TASK_ID
																AND f1.CREATE_TIME = f2.CREATE_TIME
															)feed
														WHERE
															feed.create_time >= :startTime
														AND feed.create_time <= :endTime
														AND feed.TASK_STATUS = 4
													)
												)
												AND M . ID = taskRole.role_id
												AND M .IS_INTERNAL = 1
												AND M .IS_DELETED = 0
												AND M .state = 1
												AND M .IS_ASSIGNED = 1
												AND M .IS_ENABLE = 1
												AND M .ORG_DEPARTMENT_ID != - 1
											)r on u.sid=r.ORGID
											group by
												u.pid
										]]>
									</value>
								</property>
							</bean>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<property name="dbCategory" value="postgreSQL,oracle"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												u.pid as orgid,
												count(DISTINCT r.task_id) as executedsum
											FROM
												(
													SELECT
														u2. ID AS pid,
														u1. ID AS SID
													FROM
														org_unit u1,
														org_unit u2
													WHERE
														u1. PATH LIKE u2.PATH||'%'
													AND u1. TYPE = 'Department'
													AND u2. TYPE = 'Department'
													AND u1.is_internal = 1
													and u1.is_deleted=0	
													and u1.is_enable=1
													AND u2.is_internal = 1
													and u2.is_deleted=0	
													and u2.is_enable=1
												)U
											LEFT JOIN(
												SELECT 
													M .ORG_DEPARTMENT_ID AS orgid,
													taskRole.task_id AS task_id
												FROM
													TASK_ROLE taskRole,
													task_info task,
													ORG_MEMBER M
												WHERE
													task. ID = taskRole.TASK_ID
												AND taskRole.role_type <> 3
												AND task.planned_end_time >= :startTime
												AND task.planned_start_time <= :endTime
												AND(
													task.STATUS IN(1, 2)
													OR taskRole.TASK_ID IN(
														SELECT
															feed.TASK_ID
														FROM
															(
																SELECT
																	f1.TASK_ID AS TASK_ID,
																	f1.create_time AS create_time,
																	f1.TASK_STATUS AS TASK_STATUS
																FROM
																	TASK_FEEDBACK f1
																INNER JOIN(
																	SELECT
																		task_id AS TASK_ID,
																		MAX(CREATE_TIME)AS CREATE_TIME
																	FROM
																		TASK_FEEDBACK
																	GROUP BY
																		TASK_ID
																)f2 ON f1.TASK_ID = f2.TASK_ID
																AND f1.CREATE_TIME = f2.CREATE_TIME
															)feed
														WHERE
															feed.create_time >= :startTime
														AND feed.create_time <= :endTime
														AND feed.TASK_STATUS = 4
													)
												)
												AND M . ID = taskRole.role_id
												AND M .IS_INTERNAL = 1
												AND M .IS_DELETED = 0
												AND M .state = 1
												AND M .IS_ASSIGNED = 1
												AND M .IS_ENABLE = 1
												AND M .ORG_DEPARTMENT_ID != - 1
											)r on u.sid=r.ORGID
											group by
												u.pid
										]]>
									</value>
								</property>
							</bean>
						</list>
					</property>
				</bean>
				<bean class="com.seeyon.apps.dashboard.bo.FieldDataNode">
					<property name="comment" value="完成任务数"></property>
					<property name="propertyNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.PropertyNode">
								<property name="value" value="orgId"></property>
								<property name="merge" value="true"></property>
							</bean>
						</list>
					</property>
					<property name="sqlNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<!-- 数据库版本 -->
								<property name="dbCategory" value="sql server"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												U .pid AS orgid,
												COUNT(DISTINCT r.task_id)AS finishedsum
											FROM
												(
													SELECT
														u2. ID AS pid,
														u1. ID AS SID
													FROM
														org_unit u1,
														org_unit u2
													WHERE
														u1. PATH LIKE u2. PATH + '%'
													AND u1. TYPE = 'Department'
													AND u2. TYPE = 'Department'
													AND u1.is_internal = 1
													and u1.is_deleted=0	
													and u1.is_enable=1
													AND u2.is_internal = 1
													and u2.is_deleted=0	
													and u2.is_enable=1
												)U
											LEFT JOIN(
												SELECT
													m.org_department_id AS orgid,
													taskRole.task_id AS task_id
												FROM
													TASK_ROLE taskRole,
													ORG_MEMBER M
												WHERE
													taskRole.role_id = M . ID
												AND taskRole.role_type <> 3
												AND(
													taskRole.task_id IN(
														SELECT
															feed.task_id
														FROM
															(
																SELECT
																	f1.TASK_ID AS task_id,
																	f1.create_time AS create_time,
																	f1.TASK_STATUS AS TASK_STATUS
																FROM
																	TASK_FEEDBACK f1
																INNER JOIN(
																	SELECT
																		task_id AS TASK_ID,
																		MAX(CREATE_TIME)AS CREATE_TIME
																	FROM
																		TASK_FEEDBACK
																	GROUP BY
																		TASK_ID
																)f2 ON f1.TASK_ID = f2.TASK_ID
																AND f1.CREATE_TIME = f2.CREATE_TIME
															)feed
														WHERE
															feed.task_STATUS = 4
														AND feed.create_time >= :startTime
														AND feed.create_time <= :endTime
													)
												)
												AND M . ID = taskRole.role_id
												AND M .IS_INTERNAL = 1
												AND M .IS_DELETED = 0
												AND M .state = 1
												AND M .IS_ASSIGNED = 1
												AND M .IS_ENABLE = 1
												AND M .ORG_DEPARTMENT_ID != - 1
											)r ON U . SID = r.ORGID
											GROUP BY
												U .pid
										]]>
									</value>
								</property>
							</bean>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<!-- 数据库版本 -->
								<property name="dbCategory" value="mysql,dm"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												U .pid AS orgid,
												COUNT(DISTINCT r.task_id)AS finishedsum
											FROM
												(
													SELECT
														u2. ID AS pid,
														u1. ID AS SID
													FROM
														org_unit u1,
														org_unit u2
													WHERE
														u1. PATH LIKE CONCAT(u2.PATH, '%')
													AND u1. TYPE = 'Department'
													AND u2. TYPE = 'Department'
													AND u1.is_internal = 1
													and u1.is_deleted=0	
													and u1.is_enable=1
													AND u2.is_internal = 1
													and u2.is_deleted=0	
													and u2.is_enable=1
												)U
											LEFT JOIN(
												SELECT
													m.org_department_id AS orgid,
													taskRole.task_id AS task_id
												FROM
													TASK_ROLE taskRole,
													ORG_MEMBER M
												WHERE
													taskRole.role_id = M . ID
												AND taskRole.role_type <> 3
												AND(
													taskRole.task_id IN(
														SELECT
															feed.task_id
														FROM
															(
																SELECT
																	f1.TASK_ID AS task_id,
																	f1.create_time AS create_time,
																	f1.TASK_STATUS AS TASK_STATUS
																FROM
																	TASK_FEEDBACK f1
																INNER JOIN(
																	SELECT
																		task_id AS TASK_ID,
																		MAX(CREATE_TIME)AS CREATE_TIME
																	FROM
																		TASK_FEEDBACK
																	GROUP BY
																		TASK_ID
																)f2 ON f1.TASK_ID = f2.TASK_ID
																AND f1.CREATE_TIME = f2.CREATE_TIME
															)feed
														WHERE
															feed.task_STATUS = 4
														AND feed.create_time >= :startTime
														AND feed.create_time <= :endTime
													)
												)
												AND M . ID = taskRole.role_id
												AND M .IS_INTERNAL = 1
												AND M .IS_DELETED = 0
												AND M .state = 1
												AND M .IS_ASSIGNED = 1
												AND M .IS_ENABLE = 1
												AND M .ORG_DEPARTMENT_ID != - 1
											)r ON U . SID = r.ORGID
											GROUP BY
												U .pid
										]]>
									</value>
								</property>
							</bean>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<!-- 数据库版本 -->
								<property name="dbCategory" value="postgreSQL,oracle"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												U .pid AS orgid,
												COUNT(DISTINCT r.task_id)AS finishedsum
											FROM
												(
													SELECT
														u2. ID AS pid,
														u1. ID AS SID
													FROM
														org_unit u1,
														org_unit u2
													WHERE
														u1. PATH LIKE u2.PATH||'%'
													AND u1. TYPE = 'Department'
													AND u2. TYPE = 'Department'
													AND u1.is_internal = 1
													and u1.is_deleted=0	
													and u1.is_enable=1
													AND u2.is_internal = 1
													and u2.is_deleted=0	
													and u2.is_enable=1
												)U
											LEFT JOIN(
												SELECT
													m.org_department_id AS orgid,
													taskRole.task_id AS task_id
												FROM
													TASK_ROLE taskRole,
													ORG_MEMBER M
												WHERE
													taskRole.role_id = M . ID
												AND taskRole.role_type <> 3
												AND(
													taskRole.task_id IN(
														SELECT
															feed.task_id
														FROM
															(
																SELECT
																	f1.TASK_ID AS task_id,
																	f1.create_time AS create_time,
																	f1.TASK_STATUS AS TASK_STATUS
																FROM
																	TASK_FEEDBACK f1
																INNER JOIN(
																	SELECT
																		task_id AS TASK_ID,
																		MAX(CREATE_TIME)AS CREATE_TIME
																	FROM
																		TASK_FEEDBACK
																	GROUP BY
																		TASK_ID
																)f2 ON f1.TASK_ID = f2.TASK_ID
																AND f1.CREATE_TIME = f2.CREATE_TIME
															)feed
														WHERE
															feed.task_STATUS = 4
														AND feed.create_time >= :startTime
														AND feed.create_time <= :endTime
													)
												)
												AND M . ID = taskRole.role_id
												AND M .IS_INTERNAL = 1
												AND M .IS_DELETED = 0
												AND M .state = 1
												AND M .IS_ASSIGNED = 1
												AND M .IS_ENABLE = 1
												AND M .ORG_DEPARTMENT_ID != - 1
											)r ON U . SID = r.ORGID
											GROUP BY
												U .pid
										]]>
									</value>
								</property>
							</bean>
						</list>
					</property>
				</bean>
				<bean class="com.seeyon.apps.dashboard.bo.FieldDataNode">
					<property name="comment" value="超期完成任务数"></property>
					<property name="propertyNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.PropertyNode">
								<property name="value" value="orgId"></property>
								<property name="merge" value="true"></property>
							</bean>
						</list>
					</property>
					<property name="sqlNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<!-- 数据库版本 -->
								<property name="dbCategory" value="sql server"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												U .pid AS orgid,
												COUNT(DISTINCT r.task_id)AS overduefinishedsum
											FROM
												(
													SELECT
														u2. ID AS pid,
														u1. ID AS SID
													FROM
														org_unit u1,
														org_unit u2
													WHERE
														u1. PATH LIKE u2. PATH + '%'
													AND u1. TYPE = 'Department'
													AND u2. TYPE = 'Department'
													AND u1.is_internal = 1
													and u1.is_deleted=0	
													and u1.is_enable=1
													AND u2.is_internal = 1
													and u2.is_deleted=0	
													and u2.is_enable=1
												)U
											LEFT JOIN(
												SELECT
													m.org_department_id AS orgid,
													taskRole.task_id AS task_id
												FROM
													TASK_ROLE taskRole,
													ORG_MEMBER m
												WHERE
													taskRole.role_id = m. ID
												AND taskRole.role_type <> 3
												AND(
													taskRole.task_id IN(
														SELECT
															task. ID
														FROM
															TASK_INFO task,
															(
																SELECT
																	f1.TASK_ID AS task_id,
																	f1.create_time AS create_time,
																	f1.TASK_STATUS AS TASK_STATUS
																FROM
																	TASK_FEEDBACK f1
																INNER JOIN(
																	SELECT
																		task_id AS TASK_ID,
																		MAX(CREATE_TIME)AS CREATE_TIME
																	FROM
																		TASK_FEEDBACK
																	GROUP BY
																		TASK_ID
																)f2 ON f1.TASK_ID = f2.TASK_ID
																AND f1.CREATE_TIME = f2.CREATE_TIME
															)feedback
														WHERE
															task. ID = feedback.task_id
														AND feedback.TASK_STATUS = 4
														AND(
															feedback.CREATE_TIME >=:startTime
															AND feedback.CREATE_TIME <=:endTime
															AND feedback.CREATE_TIME > task.PLANNED_END_TIME
														)
													)
												)
												AND M . ID = taskRole.role_id
												AND M .IS_INTERNAL = 1
												AND M .IS_DELETED = 0
												AND M .state = 1
												AND M .IS_ASSIGNED = 1
												AND M .IS_ENABLE = 1
												AND M .ORG_DEPARTMENT_ID != - 1
											)r ON U . SID = r.ORGID
											GROUP BY
												U .pid
										]]>
									</value>
								</property>
							</bean>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<!-- 数据库版本 -->
								<property name="dbCategory" value="mysql,dm"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												U .pid AS orgid,
												COUNT(DISTINCT r.task_id)AS overduefinishedsum
											FROM
												(
													SELECT
														u2. ID AS pid,
														u1. ID AS SID
													FROM
														org_unit u1,
														org_unit u2
													WHERE
														u1. PATH LIKE CONCAT(u2.PATH, '%')
													AND u1. TYPE = 'Department'
													AND u2. TYPE = 'Department'
													AND u1.is_internal = 1
													and u1.is_deleted=0	
													and u1.is_enable=1
													AND u2.is_internal = 1
													and u2.is_deleted=0	
													and u2.is_enable=1
												)U
											LEFT JOIN(
												SELECT
													m.org_department_id AS orgid,
													taskRole.task_id AS task_id
												FROM
													TASK_ROLE taskRole,
													ORG_MEMBER m
												WHERE
													taskRole.role_id = m. ID
												AND taskRole.role_type <> 3
												AND(
													taskRole.task_id IN(
														SELECT
															task. ID
														FROM
															TASK_INFO task,
															(
																SELECT
																	f1.TASK_ID AS task_id,
																	f1.create_time AS create_time,
																	f1.TASK_STATUS AS TASK_STATUS
																FROM
																	TASK_FEEDBACK f1
																INNER JOIN(
																	SELECT
																		task_id AS TASK_ID,
																		MAX(CREATE_TIME)AS CREATE_TIME
																	FROM
																		TASK_FEEDBACK
																	GROUP BY
																		TASK_ID
																)f2 ON f1.TASK_ID = f2.TASK_ID
																AND f1.CREATE_TIME = f2.CREATE_TIME
															)feedback
														WHERE
															task. ID = feedback.task_id
														AND feedback.TASK_STATUS = 4
														AND(
															feedback.CREATE_TIME >=:startTime
															AND feedback.CREATE_TIME <=:endTime
															AND feedback.CREATE_TIME > task.PLANNED_END_TIME
														)
													)
												)
												AND M . ID = taskRole.role_id
												AND M .IS_INTERNAL = 1
												AND M .IS_DELETED = 0
												AND M .state = 1
												AND M .IS_ASSIGNED = 1
												AND M .IS_ENABLE = 1
												AND M .ORG_DEPARTMENT_ID != - 1
											)r ON U . SID = r.ORGID
											GROUP BY
												U .pid
										]]>
									</value>
								</property>
							</bean>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<!-- 数据库版本 -->
								<property name="dbCategory" value="postgreSQL,oracle"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												U .pid AS orgid,
												COUNT(DISTINCT r.task_id)AS overduefinishedsum
											FROM
												(
													SELECT
														u2. ID AS pid,
														u1. ID AS SID
													FROM
														org_unit u1,
														org_unit u2
													WHERE
														u1. PATH LIKE u2.PATH||'%'
													AND u1. TYPE = 'Department'
													AND u2. TYPE = 'Department'
													AND u1.is_internal = 1
													and u1.is_deleted=0	
													and u1.is_enable=1
													AND u2.is_internal = 1
													and u2.is_deleted=0	
													and u2.is_enable=1
												)U
											LEFT JOIN(
												SELECT
													m.org_department_id AS orgid,
													taskRole.task_id AS task_id
												FROM
													TASK_ROLE taskRole,
													ORG_MEMBER m
												WHERE
													taskRole.role_id = m. ID
												AND taskRole.role_type <> 3
												AND(
													taskRole.task_id IN(
														SELECT
															task. ID
														FROM
															TASK_INFO task,
															(
																SELECT
																	f1.TASK_ID AS task_id,
																	f1.create_time AS create_time,
																	f1.TASK_STATUS AS TASK_STATUS
																FROM
																	TASK_FEEDBACK f1
																INNER JOIN(
																	SELECT
																		task_id AS TASK_ID,
																		MAX(CREATE_TIME)AS CREATE_TIME
																	FROM
																		TASK_FEEDBACK
																	GROUP BY
																		TASK_ID
																)f2 ON f1.TASK_ID = f2.TASK_ID
																AND f1.CREATE_TIME = f2.CREATE_TIME
															)feedback
														WHERE
															task. ID = feedback.task_id
														AND feedback.TASK_STATUS = 4
														AND(
															feedback.CREATE_TIME >=:startTime
															AND feedback.CREATE_TIME <=:endTime
															AND feedback.CREATE_TIME > task.PLANNED_END_TIME
														)
													)
												)
												AND M . ID = taskRole.role_id
												AND M .IS_INTERNAL = 1
												AND M .IS_DELETED = 0
												AND M .state = 1
												AND M .IS_ASSIGNED = 1
												AND M .IS_ENABLE = 1
												AND M .ORG_DEPARTMENT_ID != - 1
											)r ON U . SID = r.ORGID
											GROUP BY
												U .pid
										]]>
									</value>
								</property>
							</bean>
						</list>
					</property>
				</bean>
				<bean class="com.seeyon.apps.dashboard.bo.FieldDataNode">
					<property name="comment" value="未完成任务数"></property>
					<property name="propertyNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.PropertyNode">
								<property name="value" value="orgId"></property>
								<property name="merge" value="true"></property>
							</bean>
						</list>
					</property>
					<property name="sqlNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<!-- 数据库版本 -->
								<property name="dbCategory" value="sql server"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												U .pid AS orgid,
												COUNT(DISTINCT r.task_id)AS unfinishedsum
											FROM
												(
													SELECT
														u2. ID AS pid,
														u1. ID AS SID
													FROM
														org_unit u1,
														org_unit u2
													WHERE
														u1. PATH LIKE u2. PATH + '%'
													AND u1. TYPE = 'Department'
													AND u2. TYPE = 'Department'
													AND u1.is_internal = 1
													and u1.is_deleted=0	
													and u1.is_enable=1
													AND u2.is_internal = 1
													and u2.is_deleted=0	
													and u2.is_enable=1
												)U
											LEFT JOIN(
												SELECT
													m.org_department_id AS orgid,
													taskRole.task_id AS task_id
												FROM
													TASK_ROLE taskRole,
													ORG_MEMBER m
												WHERE
													taskRole.role_id = m. ID
												AND taskRole.role_type <> 3
												AND taskRole.task_id IN(
													SELECT
														task. ID
													FROM
														TASK_INFO task
													LEFT JOIN(
														SELECT
															f1.TASK_ID AS task_id,
															f1.create_time AS create_time,
															f1.TASK_STATUS AS TASK_STATUS
														FROM
															TASK_FEEDBACK f1
														INNER JOIN(
															SELECT
																task_id AS TASK_ID,
																MAX(CREATE_TIME)AS CREATE_TIME
															FROM
																TASK_FEEDBACK
															WHERE
																create_time <=:endTime
															GROUP BY
																TASK_ID
														)f2 ON f1.TASK_ID = f2.TASK_ID
														AND f1.CREATE_TIME = f2.CREATE_TIME
													)feedback ON task. ID = feedback.task_id
													WHERE
														(
															CASE
															WHEN feedback.task_id IS NULL
															AND task.PLANNED_START_TIME <= :endTime and task.status != 4 THEN
																1
															ELSE
																0
															END
														)= 1
													OR(
														CASE
														WHEN feedback.TASK_STATUS IN(1, 2)THEN
															1
														ELSE
															0
														END
													)= 1
												)
												AND M . ID = taskRole.role_id
												AND M .IS_INTERNAL = 1
												AND M .IS_DELETED = 0
												AND M .state = 1
												AND M .IS_ASSIGNED = 1
												AND M .IS_ENABLE = 1
												AND M .ORG_DEPARTMENT_ID != - 1
											)r ON U . SID = r.ORGID
											GROUP BY
												U .pid
										]]>
									</value>
								</property>
							</bean>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<!-- 数据库版本 -->
								<property name="dbCategory" value="mysql,dm"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												U .pid AS orgid,
												COUNT(DISTINCT r.task_id)AS unfinishedsum
											FROM
												(
													SELECT
														u2. ID AS pid,
														u1. ID AS SID
													FROM
														org_unit u1,
														org_unit u2
													WHERE
														u1. PATH LIKE CONCAT(u2.PATH, '%')
													AND u1. TYPE = 'Department'
													AND u2. TYPE = 'Department'
													AND u1.is_internal = 1
													and u1.is_deleted=0	
													and u1.is_enable=1
													AND u2.is_internal = 1
													and u2.is_deleted=0	
													and u2.is_enable=1
												)U
											LEFT JOIN(
												SELECT
													m.org_department_id AS orgid,
													taskRole.task_id AS task_id
												FROM
													TASK_ROLE taskRole,
													ORG_MEMBER m
												WHERE
													taskRole.role_id = m. ID
												AND taskRole.role_type <> 3
												AND taskRole.task_id IN(
													SELECT
														task. ID
													FROM
														TASK_INFO task
													LEFT JOIN(
														SELECT
															f1.TASK_ID AS task_id,
															f1.create_time AS create_time,
															f1.TASK_STATUS AS TASK_STATUS
														FROM
															TASK_FEEDBACK f1
														INNER JOIN(
															SELECT
																task_id AS TASK_ID,
																MAX(CREATE_TIME)AS CREATE_TIME
															FROM
																TASK_FEEDBACK
															WHERE
																create_time <=:endTime
															GROUP BY
																TASK_ID
														)f2 ON f1.TASK_ID = f2.TASK_ID
														AND f1.CREATE_TIME = f2.CREATE_TIME
													)feedback ON task. ID = feedback.task_id
													WHERE
														(
															CASE
															WHEN feedback.task_id IS NULL
															AND task.PLANNED_START_TIME <= :endTime and task.status != 4 THEN
																1
															ELSE
																0
															END
														)= 1
													OR(
														CASE
														WHEN feedback.TASK_STATUS IN(1, 2)THEN
															1
														ELSE
															0
														END
													)= 1
												)
												AND M . ID = taskRole.role_id
												AND M .IS_INTERNAL = 1
												AND M .IS_DELETED = 0
												AND M .state = 1
												AND M .IS_ASSIGNED = 1
												AND M .IS_ENABLE = 1
												AND M .ORG_DEPARTMENT_ID != - 1
											)r ON U . SID = r.ORGID
											GROUP BY
												U .pid
										]]>
									</value>
								</property>
							</bean>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<!-- 数据库版本 -->
								<property name="dbCategory" value="postgreSQL,oracle"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												U .pid AS orgid,
												COUNT(DISTINCT r.task_id)AS unfinishedsum
											FROM
												(
													SELECT
														u2. ID AS pid,
														u1. ID AS SID
													FROM
														org_unit u1,
														org_unit u2
													WHERE
														u1. PATH LIKE u2.PATH||'%'
													AND u1. TYPE = 'Department'
													AND u2. TYPE = 'Department'
													AND u1.is_internal = 1
													and u1.is_deleted=0	
													and u1.is_enable=1
													AND u2.is_internal = 1
													and u2.is_deleted=0	
													and u2.is_enable=1
												)U
											LEFT JOIN(
												SELECT
													m.org_department_id AS orgid,
													taskRole.task_id AS task_id
												FROM
													TASK_ROLE taskRole,
													ORG_MEMBER m
												WHERE
													taskRole.role_id = m. ID
												AND taskRole.role_type <> 3
												AND taskRole.task_id IN(
													SELECT
														task. ID
													FROM
														TASK_INFO task
													LEFT JOIN(
														SELECT
															f1.TASK_ID AS task_id,
															f1.create_time AS create_time,
															f1.TASK_STATUS AS TASK_STATUS
														FROM
															TASK_FEEDBACK f1
														INNER JOIN(
															SELECT
																task_id AS TASK_ID,
																MAX(CREATE_TIME)AS CREATE_TIME
															FROM
																TASK_FEEDBACK
															WHERE
																create_time <=:endTime
															GROUP BY
																TASK_ID
														)f2 ON f1.TASK_ID = f2.TASK_ID
														AND f1.CREATE_TIME = f2.CREATE_TIME
													)feedback ON task. ID = feedback.task_id
													WHERE
														(
															CASE
															WHEN feedback.task_id IS NULL
															AND task.PLANNED_START_TIME <= :endTime and task.status != 4 THEN
																1
															ELSE
																0
															END
														)= 1
													OR(
														CASE
														WHEN feedback.TASK_STATUS IN(1, 2)THEN
															1
														ELSE
															0
														END
													)= 1
												)
												AND M . ID = taskRole.role_id
												AND M .IS_INTERNAL = 1
												AND M .IS_DELETED = 0
												AND M .state = 1
												AND M .IS_ASSIGNED = 1
												AND M .IS_ENABLE = 1
												AND M .ORG_DEPARTMENT_ID != - 1
											)r ON U . SID = r.ORGID
											GROUP BY
												U .pid
										]]>
									</value>
								</property>
							</bean>
						</list>
					</property>
				</bean>
				<bean class="com.seeyon.apps.dashboard.bo.FieldDataNode">
					<property name="comment" value="超期未完成任务数"></property>
					<property name="propertyNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.PropertyNode">
								<property name="value" value="orgId"></property>
								<property name="merge" value="true"></property>
							</bean>
						</list>
					</property>
					<property name="sqlNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<!-- 数据库版本 -->
								<property name="dbCategory" value="sql server"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												U .pid AS orgid,
												COUNT(DISTINCT r.task_id)AS overdueunfinishedsum
											FROM
												(
													SELECT
														u2. ID AS pid,
														u1. ID AS SID
													FROM
														org_unit u1,
														org_unit u2
													WHERE
														u1. PATH LIKE u2. PATH + '%'
													AND u1. TYPE = 'Department'
													AND u2. TYPE = 'Department'
													AND u1.is_internal = 1
													and u1.is_deleted=0	
													and u1.is_enable=1
													AND u2.is_internal = 1
													and u2.is_deleted=0	
													and u2.is_enable=1
												)U
											LEFT JOIN(
												SELECT
													M .org_department_id AS orgid,
													taskRole.task_id AS task_id
												FROM
													TASK_ROLE taskRole,
													ORG_MEMBER M
												WHERE
													taskRole.role_id = M . ID
												AND taskRole.role_type <> 3
												AND taskRole.task_id IN(
													SELECT
														task. ID
													FROM
														TASK_INFO task
													LEFT JOIN(
														SELECT
															f1.TASK_ID AS task_id,
															f1.create_time AS create_time,
															f1.TASK_STATUS AS TASK_STATUS
														FROM
															TASK_FEEDBACK f1
														INNER JOIN(
															SELECT
																task_id AS TASK_ID,
																MAX(CREATE_TIME)AS CREATE_TIME
															FROM
																TASK_FEEDBACK
															WHERE
																create_time <=:endTime
															GROUP BY
																TASK_ID
														)f2 ON f1.TASK_ID = f2.TASK_ID
														AND f1.CREATE_TIME = f2.CREATE_TIME
													)feedback ON task. ID = feedback.task_id
													WHERE
														(
															CASE
															WHEN feedback.task_id IS NULL
															AND task.PLANNED_START_TIME <=:endTime
															AND task.PLANNED_END_TIME <=:endTime and task.status != 4 THEN
																1
															ELSE
																0
															END
														)= 1
													OR(
														CASE
														WHEN feedback.TASK_STATUS IN(1, 2)
														AND task.PLANNED_END_TIME <=:endTime THEN
															1
														ELSE
															0
														END
													)= 1
												)
												AND M . ID = taskRole.role_id
												AND M .IS_INTERNAL = 1
												AND M .IS_DELETED = 0
												AND M .state = 1
												AND M .IS_ASSIGNED = 1
												AND M .IS_ENABLE = 1
												AND M .ORG_DEPARTMENT_ID != - 1
											)r ON U . SID = r.ORGID
											GROUP BY
												U .pid
										]]>
									</value>
								</property>
							</bean>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<!-- 数据库版本 -->
								<property name="dbCategory" value="mysql,dm"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												U .pid AS orgid,
												COUNT(DISTINCT r.task_id)AS overdueunfinishedsum
											FROM
												(
													SELECT
														u2. ID AS pid,
														u1. ID AS SID
													FROM
														org_unit u1,
														org_unit u2
													WHERE
														u1. PATH LIKE CONCAT(u2.PATH, '%')
													AND u1. TYPE = 'Department'
													AND u2. TYPE = 'Department'
													AND u1.is_internal = 1
													and u1.is_deleted=0	
													and u1.is_enable=1
													AND u2.is_internal = 1
													and u2.is_deleted=0	
													and u2.is_enable=1
												)U
											LEFT JOIN(
												SELECT
													M .org_department_id AS orgid,
													taskRole.task_id AS task_id
												FROM
													TASK_ROLE taskRole,
													ORG_MEMBER M
												WHERE
													taskRole.role_id = M . ID
												AND taskRole.role_type <> 3
												AND taskRole.task_id IN(
													SELECT
														task. ID
													FROM
														TASK_INFO task
													LEFT JOIN(
														SELECT
															f1.TASK_ID AS task_id,
															f1.create_time AS create_time,
															f1.TASK_STATUS AS TASK_STATUS
														FROM
															TASK_FEEDBACK f1
														INNER JOIN(
															SELECT
																task_id AS TASK_ID,
																MAX(CREATE_TIME)AS CREATE_TIME
															FROM
																TASK_FEEDBACK
															WHERE
																create_time <=:endTime
															GROUP BY
																TASK_ID
														)f2 ON f1.TASK_ID = f2.TASK_ID
														AND f1.CREATE_TIME = f2.CREATE_TIME
													)feedback ON task. ID = feedback.task_id
													WHERE
														(
															CASE
															WHEN feedback.task_id IS NULL
															AND task.PLANNED_START_TIME <=:endTime
															AND task.PLANNED_END_TIME <=:endTime and task.status != 4 THEN
																1
															ELSE
																0
															END
														)= 1
													OR(
														CASE
														WHEN feedback.TASK_STATUS IN(1, 2)
														AND task.PLANNED_END_TIME <=:endTime THEN
															1
														ELSE
															0
														END
													)= 1
												)
												AND M . ID = taskRole.role_id
												AND M .IS_INTERNAL = 1
												AND M .IS_DELETED = 0
												AND M .state = 1
												AND M .IS_ASSIGNED = 1
												AND M .IS_ENABLE = 1
												AND M .ORG_DEPARTMENT_ID != - 1
											)r ON U . SID = r.ORGID
											GROUP BY
												U .pid
										]]>
									</value>
								</property>
							</bean>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<!-- 数据库版本 -->
								<property name="dbCategory" value="postgreSQL,oracle"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												U .pid AS orgid,
												COUNT(DISTINCT r.task_id)AS overdueunfinishedsum
											FROM
												(
													SELECT
														u2. ID AS pid,
														u1. ID AS SID
													FROM
														org_unit u1,
														org_unit u2
													WHERE
														u1. PATH LIKE u2.PATH||'%'
													AND u1. TYPE = 'Department'
													AND u2. TYPE = 'Department'
													AND u1.is_internal = 1
													and u1.is_deleted=0	
													and u1.is_enable=1
													AND u2.is_internal = 1
													and u2.is_deleted=0	
													and u2.is_enable=1
												)U
											LEFT JOIN(
												SELECT
													M .org_department_id AS orgid,
													taskRole.task_id AS task_id
												FROM
													TASK_ROLE taskRole,
													ORG_MEMBER M
												WHERE
													taskRole.role_id = M . ID
												AND taskRole.role_type <> 3
												AND taskRole.task_id IN(
													SELECT
														task. ID
													FROM
														TASK_INFO task
													LEFT JOIN(
														SELECT
															f1.TASK_ID AS task_id,
															f1.create_time AS create_time,
															f1.TASK_STATUS AS TASK_STATUS
														FROM
															TASK_FEEDBACK f1
														INNER JOIN(
															SELECT
																task_id AS TASK_ID,
																MAX(CREATE_TIME)AS CREATE_TIME
															FROM
																TASK_FEEDBACK
															WHERE
																create_time <=:endTime
															GROUP BY
																TASK_ID
														)f2 ON f1.TASK_ID = f2.TASK_ID
														AND f1.CREATE_TIME = f2.CREATE_TIME
													)feedback ON task. ID = feedback.task_id
													WHERE
														(
															CASE
															WHEN feedback.task_id IS NULL
															AND task.PLANNED_START_TIME <=:endTime
															AND task.PLANNED_END_TIME <=:endTime and task.status != 4 THEN
																1
															ELSE
																0
															END
														)= 1
													OR(
														CASE
														WHEN feedback.TASK_STATUS IN(1, 2)
														AND task.PLANNED_END_TIME <=:endTime THEN
															1
														ELSE
															0
														END
													)= 1
												)
												AND M . ID = taskRole.role_id
												AND M .IS_INTERNAL = 1
												AND M .IS_DELETED = 0
												AND M .state = 1
												AND M .IS_ASSIGNED = 1
												AND M .IS_ENABLE = 1
												AND M .ORG_DEPARTMENT_ID != - 1
											)r ON U . SID = r.ORGID
											GROUP BY
												U .pid
										]]>
									</value>
								</property>
							</bean>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>
	<!--任务人员 -->
	<bean id="taskMember" class="com.seeyon.apps.dashboard.bo.ReportPoint">
		<property name="comment" value="人员任务"></property>
		<!-- po对象 (用户自定义) -->
		<property name="po" value="com.seeyon.apps.dashboard.po.RptTaskIndex"></property>
		<!-- 部门,人员,单位 (用户自定义) -->
		<property name="type">
			<map>
				<!--key po属性名 ,表示模块类型 -->
				<entry key="orgType" value="member"></entry>
			</map>
		</property>
		<property name="fieldDataNodes">
			<list>
				<bean class="com.seeyon.apps.dashboard.bo.FieldDataNode">
					<property name="comment" value="要做任务数"></property>
					<property name="propertyNodes">
						<!-- 对象属性和字段映射关系 (用户设置) -->
						<list>
							<!-- 唯一键值 必须配置 -->
							<bean class="com.seeyon.apps.dashboard.bo.PropertyNode">
								<property name="value" value="orgId"></property>
								<property name="merge" value="true"></property>
							</bean>
						</list>
					</property>
					<property name="sqlNodes">
						<list>
							<!-- 多数据库sql(用户自定义) -->
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<property name="dbCategory" value="all"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												m.id AS orgid,
												r.executedsum AS executedsum
											FROM
												org_member m
											LEFT JOIN(
												SELECT 
													taskRole.role_id AS orgid,
													COUNT(DISTINCT taskRole.task_id)AS executedsum
												FROM
													TASK_ROLE taskRole,
													TASK_INFO task
												WHERE
													taskRole.role_type <> 3
												AND task.id = taskRole.TASK_ID
												AND task.planned_end_time >= :startTime
												AND task.planned_start_time <= :endTime
												AND(
													task. STATUS IN(1, 2)
													OR taskRole.task_id IN(
														SELECT
															feed.TASK_ID
														FROM
															(
																SELECT
																	f1.TASK_ID AS TASK_ID,
																	f1.create_time AS create_time,
																	f1.TASK_STATUS AS TASK_STATUS
																FROM
																	TASK_FEEDBACK f1
																INNER JOIN(
																	SELECT
																		task_id AS TASK_ID,
																		max(CREATE_TIME)AS CREATE_TIME
																	FROM
																		TASK_FEEDBACK
																	GROUP BY
																		TASK_ID
																)f2 ON f1.TASK_ID = f2.TASK_ID
																AND f1.CREATE_TIME = f2.CREATE_TIME
															)feed
														WHERE
															feed.create_time >= :startTime
														AND feed.create_time <= :endTime
														AND feed.TASK_STATUS = 4
													)
												)
												GROUP BY
													taskRole.role_id
											)r ON r.orgid = m.id
											WHERE
												m.IS_DELETED = 0
											AND m. state=1
											and m.IS_ASSIGNED=1
											and m.IS_ENABLE=1
											and m.is_internal=1
											AND m.ORG_DEPARTMENT_ID != - 1
										]]>
									</value>
								</property>
							</bean>
						</list>
					</property>
				</bean>
				<bean class="com.seeyon.apps.dashboard.bo.FieldDataNode">
					<property name="comment" value="完成任务数"></property>
					<property name="propertyNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.PropertyNode">
								<property name="value" value="orgId"></property>
								<property name="merge" value="true"></property>
							</bean>
						</list>
					</property>
					<property name="sqlNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<property name="dbCategory" value="all"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												taskRole.role_id AS orgid,
												count(distinct taskRole.task_id)AS finishedsum
											FROM
												TASK_ROLE taskRole,
												org_member m
											WHERE
												taskRole.role_type <> 3
											AND taskRole.task_id IN(
												SELECT
													feed.task_id
												FROM
													(
														SELECT
															f1.TASK_ID AS task_id,
															f1.create_time AS create_time,
															f1.TASK_STATUS AS TASK_STATUS
														FROM
															TASK_FEEDBACK f1
														INNER JOIN(
															SELECT
																task_id AS TASK_ID,
																max(CREATE_TIME)AS CREATE_TIME
															FROM
																TASK_FEEDBACK
															GROUP BY
																TASK_ID
														)f2 ON f1.TASK_ID = f2.TASK_ID
														AND f1.CREATE_TIME = f2.CREATE_TIME
													) feed
												WHERE
													feed.task_STATUS = 4
												AND feed.create_time >= :startTime
												AND feed.create_time <= :endTime
											)
											and m.id=taskRole.role_id
											and m.IS_DELETED = 0
											AND m.state=1
											and m.IS_ASSIGNED=1
											and m.IS_ENABLE=1
											and m.is_internal=1
											AND m.ORG_DEPARTMENT_ID != - 1
											GROUP BY
												taskRole.role_id
										]]>
									</value>
								</property>
							</bean>
						</list>
					</property>
				</bean>
				<bean class="com.seeyon.apps.dashboard.bo.FieldDataNode">
					<property name="comment" value="超期完成任务数"></property>
					<property name="propertyNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.PropertyNode">
								<property name="value" value="orgId"></property>
								<property name="merge" value="true"></property>
							</bean>
						</list>
					</property>
					<property name="sqlNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<property name="dbCategory" value="all"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												taskRole.role_id AS orgid,
												count(distinct taskRole.task_id)AS overduefinishedsum
											FROM
												TASK_ROLE taskRole,
												org_member m
											WHERE
												taskRole.role_type <> 3
											AND taskRole.task_id IN(
												SELECT
													task.id
												FROM
													TASK_INFO task,
													(
														SELECT
															f1.TASK_ID AS task_id,
															f1.create_time AS create_time,
															f1.TASK_STATUS AS TASK_STATUS
														FROM
															TASK_FEEDBACK f1
														INNER JOIN(
															SELECT
																task_id AS TASK_ID,
																max(CREATE_TIME)AS CREATE_TIME
															FROM
																TASK_FEEDBACK
															GROUP BY
																TASK_ID
														)f2 ON f1.TASK_ID = f2.TASK_ID
														AND f1.CREATE_TIME = f2.CREATE_TIME
													)feedback
												WHERE
													task.id = feedback.task_id
												AND feedback.TASK_STATUS = 4
												AND(
													feedback.CREATE_TIME >= :startTime
													AND feedback.CREATE_TIME <= :endTime
													AND feedback.CREATE_TIME > task.PLANNED_END_TIME
												)
											)
											and taskRole.role_id=m.id
											and m.IS_DELETED = 0
											AND m.state=1
											and m.IS_ASSIGNED=1
											and m.IS_ENABLE=1
											and m.is_internal=1
											AND m.ORG_DEPARTMENT_ID != - 1
											GROUP BY
												taskRole.role_id
										]]>
									</value>
								</property>
							</bean>
						</list>
					</property>
				</bean>
				<bean class="com.seeyon.apps.dashboard.bo.FieldDataNode">
					<property name="comment" value="未完成任务数"></property>
					<property name="propertyNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.PropertyNode">
								<property name="value" value="orgId"></property>
								<property name="merge" value="true"></property>
							</bean>
						</list>
					</property>
					<property name="sqlNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<property name="dbCategory" value="all"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												taskRole.role_id AS orgid,
												count(DISTINCT taskRole.task_id)AS unfinishedsum
											FROM
												TASK_ROLE taskRole,
												org_member m
											WHERE
												taskRole.role_type <> 3
											AND taskRole.task_id IN(
												SELECT
													task.id
												FROM
													TASK_INFO task
												LEFT JOIN(
													SELECT
														f1.TASK_ID AS task_id,
														f1.create_time AS create_time,
														f1.TASK_STATUS AS TASK_STATUS
													FROM
														TASK_FEEDBACK f1
													INNER JOIN(
														SELECT
															task_id AS TASK_ID,
															max(CREATE_TIME)AS CREATE_TIME
														FROM
															TASK_FEEDBACK
														WHERE
															create_time <=:endTime
														GROUP BY
															TASK_ID
													)f2 ON f1.TASK_ID = f2.TASK_ID
													AND f1.CREATE_TIME = f2.CREATE_TIME
												)feedback ON task.id = feedback.task_id
												WHERE
													(
														CASE
														WHEN feedback.task_id IS NULL
														AND task.PLANNED_START_TIME <= :endTime and task.status != 4 THEN
															1
														ELSE
															0
														END
													)= 1
												OR(
													CASE
													WHEN feedback.TASK_STATUS IN(1, 2)THEN
														1
													ELSE
														0
													END
												)= 1
											)
											and taskRole.role_id=m.id
											and m.IS_DELETED = 0
											AND m.state=1
											and m.IS_ASSIGNED=1
											and m.IS_ENABLE=1
											and m.is_internal=1
											AND m.ORG_DEPARTMENT_ID != - 1
											GROUP BY
												taskRole.role_id
										]]>
									</value>
								</property>
							</bean>
						</list>
					</property>
				</bean>
				<bean class="com.seeyon.apps.dashboard.bo.FieldDataNode">
					<property name="comment" value="超期未完成任务数"></property>
					<property name="propertyNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.PropertyNode">
								<property name="value" value="orgId"></property>
								<property name="merge" value="true"></property>
							</bean>
						</list>
					</property>
					<property name="sqlNodes">
						<list>
							<bean class="com.seeyon.apps.dashboard.bo.SqlNode">
								<property name="dbCategory" value="all"></property>
								<property name="sqlText">
									<value>
										<![CDATA[
											SELECT
												taskRole.role_id AS orgid,
												count(distinct taskRole.task_id)AS overdueunfinishedsum
											FROM
												TASK_ROLE taskRole,
												org_member m
											WHERE
												taskRole.role_type <> 3
											AND taskRole.task_id IN(
												SELECT
													task.id
												FROM
													TASK_INFO task
												LEFT JOIN(
													SELECT
														f1.TASK_ID AS task_id,
														f1.create_time AS create_time,
														f1.TASK_STATUS AS TASK_STATUS
													FROM
														TASK_FEEDBACK f1
													INNER JOIN(
														SELECT
															task_id AS TASK_ID,
															max(CREATE_TIME)AS CREATE_TIME
														FROM
															TASK_FEEDBACK
														WHERE
															create_time <=:endTime
														GROUP BY
															TASK_ID
													)f2 ON f1.TASK_ID = f2.TASK_ID
													AND f1.CREATE_TIME = f2.CREATE_TIME
												)feedback ON task.id = feedback.task_id
												WHERE
													(
														CASE
														WHEN feedback.task_id IS NULL
														AND task.PLANNED_START_TIME <=:endTime and task.PLANNED_END_TIME<=:endTime and task.status != 4 THEN
															1
														ELSE
															0
														END
													)= 1
												OR(
													CASE
													WHEN feedback.TASK_STATUS IN(1, 2) and task.PLANNED_END_TIME<=:endTime THEN
														1
													ELSE
														0
													END
												)= 1
											)
											and taskRole.role_id=m.id
											and m.IS_DELETED = 0
											AND m.state=1
											and m.IS_ASSIGNED=1
											and m.IS_ENABLE=1
											and m.is_internal=1
											AND m.ORG_DEPARTMENT_ID != - 1
											GROUP BY
												taskRole.role_id
										]]>
									</value>
								</property>
							</bean>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>
</beans>