package org.csapi.www.service;

public class Cmcc_mas_wbsStub extends org.apache.axis2.client.Stub
{
protected org.apache.axis2.description.AxisOperation[] _operations;

//hashmaps to keep the fault mapping
private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
private java.util.HashMap faultMessageMap = new java.util.HashMap();

private static int counter = 0;

private static synchronized String getUniqueSuffix(){
 if (counter > 99999){
counter = 0;
 }
 counter = counter + 1; 
 return Long.toString(System.currentTimeMillis()) + "_" + counter;
}

 
 private void populateAxisService() throws org.apache.axis2.AxisFault {

  //creating the Service with a unique name
  _service = new org.apache.axis2.description.AxisService("Cmcc_mas_wbs" + getUniqueSuffix());
  addAnonymousOperations();

//creating the operations
org.apache.axis2.description.AxisOperation __operation;

_operations = new org.apache.axis2.description.AxisOperation[37];

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "sendPush"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[0]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "APStatusRep"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[1]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "getLocationForGroup"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[2]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "handleUssd"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[3]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "APLogOut"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[4]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "APRegistration"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[5]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "endUssd"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[6]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "getReceivedMessages"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[7]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "notifyUssdEnd"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[8]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "getLocation"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[9]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "sendSms"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[10]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "GetReceivedSms"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[11]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "notifySmsDeliveryStatus"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[12]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "APSvcAuthentic"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[13]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "notifySmsReception"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[14]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "stopNotification"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[15]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "EndNotification"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[16]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "startNotification"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[17]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "APSvcAlarm"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[18]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "notifyMessageReception"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[19]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "sendMessage"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[20]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "APSvcPerfReport"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[21]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "getPushDeliveryStatus"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[22]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "notifyMessageDeliveryReceipt"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[23]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "notifyPushDeliveryReceipt"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[24]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "LocationError"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[25]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "makeUssd"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[26]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "APSvcPerfCmd"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[27]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "getMessageDeliveryStatus"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[28]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "LocationEnd"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[29]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "GetSmsDeliveryStatus"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[30]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "RecoveryAP"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[31]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "PauseAP"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[32]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "getMessage"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[33]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "ussdContinue"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[34]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "startPeriodicNotification"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[35]=__operation;
 

__operation = new org.apache.axis2.description.OutInAxisOperation();


 __operation.setName(new javax.xml.namespace.QName("http://www.csapi.org/service", "LocationNotification"));
	 _service.addOperation(__operation);
	 

	 
	 
 _operations[36]=__operation;
 

}

 //populates the faults
 private void populateFaults(){
 
faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.PolicyException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException"),"org.csapi.www.service.Cmcc_mas_wbsStub$PolicyExceptionE");

faultExceptionNameMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultExceptionClassNameMap.put(new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.ServiceException");
faultMessageMap.put( new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException"),"org.csapi.www.service.Cmcc_mas_wbsStub$ServiceExceptionE");



 }

 /**
*Constructor that takes in a configContext
*/

 public Cmcc_mas_wbsStub(org.apache.axis2.context.ConfigurationContext configurationContext,
 java.lang.String targetEndpoint)
 throws org.apache.axis2.AxisFault {
 this(configurationContext,targetEndpoint,false);
}


/**
  * Constructor that takes in a configContext  and useseperate listner
  */
public Cmcc_mas_wbsStub(org.apache.axis2.context.ConfigurationContext configurationContext,
java.lang.String targetEndpoint, boolean useSeparateListener)
throws org.apache.axis2.AxisFault {
 //To populate AxisService
 populateAxisService();
 populateFaults();

_serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext,_service);

	
configurationContext = _serviceClient.getServiceContext().getConfigurationContext();

_serviceClient.getOptions().setTo(new org.apache.axis2.addressing.EndpointReference(
targetEndpoint));
_serviceClient.getOptions().setUseSeparateListener(useSeparateListener);

 
 }

 /**
  * Default Constructor
  */
 public Cmcc_mas_wbsStub(org.apache.axis2.context.ConfigurationContext configurationContext) throws org.apache.axis2.AxisFault {

 this(configurationContext,"http://80.98.99.1/services/cmcc_mas_wbs?wsdl" );//http://80.98.99.1/services/cmcc_mas_wbs

 }

 /**
  * Default Constructor
  */
 public Cmcc_mas_wbsStub() throws org.apache.axis2.AxisFault {

 this("http://80.98.99.1/services/cmcc_mas_wbs?wsdl" );

 }

 /**
  * Constructor taking the target endpoint
  */
 public Cmcc_mas_wbsStub(java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
this(null,targetEndpoint);
 }




 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#sendPush
  * @param sendPushRequest15
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.SendPushResponse sendPush(

 org.csapi.www.service.Cmcc_mas_wbsStub.SendPushRequest sendPushRequest15)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/sendPush");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 sendPushRequest15,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "sendPush")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.SendPushResponse.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.SendPushResponse)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startsendPush
 * @param sendPushRequest15

*/
public  void startsendPush(

 org.csapi.www.service.Cmcc_mas_wbsStub.SendPushRequest sendPushRequest15,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/sendPush");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 sendPushRequest15,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "sendPush")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.SendPushResponse.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultsendPush(
(org.csapi.www.service.Cmcc_mas_wbsStub.SendPushResponse)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorsendPush(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorsendPush((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorsendPush((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorsendPush(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendPush(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendPush(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendPush(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendPush(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendPush(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendPush(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendPush(f);
 }
									 } else {
										 callback.receiveErrorsendPush(f);
									 }
									} else {
									 callback.receiveErrorsendPush(f);
									}
								} else {
								 callback.receiveErrorsendPush(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorsendPush(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[0].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[0].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#APStatusRep
  * @param aPStatusRepReq17
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.APStatusRepRsp APStatusRep(

 org.csapi.www.service.Cmcc_mas_wbsStub.APStatusRepReq aPStatusRepReq17)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/APStatusRep");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 aPStatusRepReq17,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "APStatusRep")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.APStatusRepRsp.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.APStatusRepRsp)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startAPStatusRep
 * @param aPStatusRepReq17

*/
public  void startAPStatusRep(

 org.csapi.www.service.Cmcc_mas_wbsStub.APStatusRepReq aPStatusRepReq17,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/APStatusRep");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 aPStatusRepReq17,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "APStatusRep")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.APStatusRepRsp.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultAPStatusRep(
(org.csapi.www.service.Cmcc_mas_wbsStub.APStatusRepRsp)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorAPStatusRep(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorAPStatusRep((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorAPStatusRep((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorAPStatusRep(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPStatusRep(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPStatusRep(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPStatusRep(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPStatusRep(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPStatusRep(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPStatusRep(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPStatusRep(f);
 }
									 } else {
										 callback.receiveErrorAPStatusRep(f);
									 }
									} else {
									 callback.receiveErrorAPStatusRep(f);
									}
								} else {
								 callback.receiveErrorAPStatusRep(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorAPStatusRep(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[1].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[1].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#getLocationForGroup
  * @param getLocationForGroupRequest19
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationForGroupResponse getLocationForGroup(

 org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationForGroupRequest getLocationForGroupRequest19)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/getLocationForGroup");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 getLocationForGroupRequest19,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "getLocationForGroup")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationForGroupResponse.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationForGroupResponse)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startgetLocationForGroup
 * @param getLocationForGroupRequest19

*/
public  void startgetLocationForGroup(

 org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationForGroupRequest getLocationForGroupRequest19,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/getLocationForGroup");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 getLocationForGroupRequest19,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "getLocationForGroup")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationForGroupResponse.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultgetLocationForGroup(
(org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationForGroupResponse)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorgetLocationForGroup(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorgetLocationForGroup((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorgetLocationForGroup((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorgetLocationForGroup(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetLocationForGroup(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetLocationForGroup(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetLocationForGroup(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetLocationForGroup(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetLocationForGroup(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetLocationForGroup(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetLocationForGroup(f);
 }
									 } else {
										 callback.receiveErrorgetLocationForGroup(f);
									 }
									} else {
									 callback.receiveErrorgetLocationForGroup(f);
									}
								} else {
								 callback.receiveErrorgetLocationForGroup(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorgetLocationForGroup(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[2].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[2].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#handleUssd
  * @param handleUssdRequest21
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.HandleUssdResponse handleUssd(

 org.csapi.www.service.Cmcc_mas_wbsStub.HandleUssdRequest handleUssdRequest21)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/handleUssd");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 handleUssdRequest21,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "handleUssd")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.HandleUssdResponse.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.HandleUssdResponse)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#starthandleUssd
 * @param handleUssdRequest21

*/
public  void starthandleUssd(

 org.csapi.www.service.Cmcc_mas_wbsStub.HandleUssdRequest handleUssdRequest21,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/handleUssd");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 handleUssdRequest21,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "handleUssd")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.HandleUssdResponse.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResulthandleUssd(
(org.csapi.www.service.Cmcc_mas_wbsStub.HandleUssdResponse)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorhandleUssd(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorhandleUssd((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorhandleUssd((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorhandleUssd(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorhandleUssd(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorhandleUssd(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorhandleUssd(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorhandleUssd(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorhandleUssd(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorhandleUssd(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorhandleUssd(f);
 }
									 } else {
										 callback.receiveErrorhandleUssd(f);
									 }
									} else {
									 callback.receiveErrorhandleUssd(f);
									}
								} else {
								 callback.receiveErrorhandleUssd(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorhandleUssd(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[3].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[3].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#APLogOut
  * @param aPLogOutReq23
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.APLogOutRsp APLogOut(

 org.csapi.www.service.Cmcc_mas_wbsStub.APLogOutReq aPLogOutReq23)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/APLogOut");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 aPLogOutReq23,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "APLogOut")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.APLogOutRsp.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.APLogOutRsp)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startAPLogOut
 * @param aPLogOutReq23

*/
public  void startAPLogOut(

 org.csapi.www.service.Cmcc_mas_wbsStub.APLogOutReq aPLogOutReq23,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/APLogOut");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 aPLogOutReq23,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "APLogOut")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.APLogOutRsp.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultAPLogOut(
(org.csapi.www.service.Cmcc_mas_wbsStub.APLogOutRsp)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorAPLogOut(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorAPLogOut((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorAPLogOut((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorAPLogOut(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPLogOut(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPLogOut(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPLogOut(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPLogOut(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPLogOut(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPLogOut(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPLogOut(f);
 }
									 } else {
										 callback.receiveErrorAPLogOut(f);
									 }
									} else {
									 callback.receiveErrorAPLogOut(f);
									}
								} else {
								 callback.receiveErrorAPLogOut(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorAPLogOut(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[4].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[4].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#APRegistration
  * @param aPRegistrationReq25
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.APRegistrationRsp APRegistration(

 org.csapi.www.service.Cmcc_mas_wbsStub.APRegistrationReq aPRegistrationReq25)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[5].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/APRegistration");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 aPRegistrationReq25,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "APRegistration")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.APRegistrationRsp.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.APRegistrationRsp)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startAPRegistration
 * @param aPRegistrationReq25

*/
public  void startAPRegistration(

 org.csapi.www.service.Cmcc_mas_wbsStub.APRegistrationReq aPRegistrationReq25,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[5].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/APRegistration");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 aPRegistrationReq25,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "APRegistration")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.APRegistrationRsp.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultAPRegistration(
(org.csapi.www.service.Cmcc_mas_wbsStub.APRegistrationRsp)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorAPRegistration(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorAPRegistration((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorAPRegistration((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorAPRegistration(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPRegistration(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPRegistration(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPRegistration(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPRegistration(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPRegistration(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPRegistration(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPRegistration(f);
 }
									 } else {
										 callback.receiveErrorAPRegistration(f);
									 }
									} else {
									 callback.receiveErrorAPRegistration(f);
									}
								} else {
								 callback.receiveErrorAPRegistration(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorAPRegistration(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[5].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[5].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#endUssd
  * @param endUssdRequest27
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  void endUssd(

 org.csapi.www.service.Cmcc_mas_wbsStub.EndUssdRequest endUssdRequest27)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[6].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/endUssd");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 endUssdRequest27,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "endUssd")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
return;
 
 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startendUssd
 * @param endUssdRequest27

*/
public  void startendUssd(

 org.csapi.www.service.Cmcc_mas_wbsStub.EndUssdRequest endUssdRequest27,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[6].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/endUssd");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 endUssdRequest27,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "endUssd")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
 // Nothing to pass as the callback!!!


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[6].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[6].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#getReceivedMessages
  * @param getReceivedMessagesRequest29
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedMessagesResponse getReceivedMessages(

 org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedMessagesRequest getReceivedMessagesRequest29)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[7].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/getReceivedMessages");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 getReceivedMessagesRequest29,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "getReceivedMessages")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedMessagesResponse.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedMessagesResponse)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startgetReceivedMessages
 * @param getReceivedMessagesRequest29

*/
public  void startgetReceivedMessages(

 org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedMessagesRequest getReceivedMessagesRequest29,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[7].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/getReceivedMessages");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 getReceivedMessagesRequest29,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "getReceivedMessages")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedMessagesResponse.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultgetReceivedMessages(
(org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedMessagesResponse)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorgetReceivedMessages(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorgetReceivedMessages((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorgetReceivedMessages((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorgetReceivedMessages(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetReceivedMessages(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetReceivedMessages(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetReceivedMessages(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetReceivedMessages(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetReceivedMessages(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetReceivedMessages(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetReceivedMessages(f);
 }
									 } else {
										 callback.receiveErrorgetReceivedMessages(f);
									 }
									} else {
									 callback.receiveErrorgetReceivedMessages(f);
									}
								} else {
								 callback.receiveErrorgetReceivedMessages(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorgetReceivedMessages(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[7].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[7].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#notifyUssdEnd
  * @param notifyUssdEndRequest31
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  void notifyUssdEnd(

 org.csapi.www.service.Cmcc_mas_wbsStub.NotifyUssdEndRequest notifyUssdEndRequest31)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[8].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/notifyUssdEnd");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 notifyUssdEndRequest31,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "notifyUssdEnd")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
return;
 
 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startnotifyUssdEnd
 * @param notifyUssdEndRequest31

*/
public  void startnotifyUssdEnd(

 org.csapi.www.service.Cmcc_mas_wbsStub.NotifyUssdEndRequest notifyUssdEndRequest31,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[8].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/notifyUssdEnd");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 notifyUssdEndRequest31,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "notifyUssdEnd")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
 // Nothing to pass as the callback!!!


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[8].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[8].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#getLocation
  * @param getLocationRequest33
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationResponse getLocation(

 org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationRequest getLocationRequest33)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[9].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/getLocation");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 getLocationRequest33,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "getLocation")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationResponse.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationResponse)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startgetLocation
 * @param getLocationRequest33

*/
public  void startgetLocation(

 org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationRequest getLocationRequest33,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[9].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/getLocation");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 getLocationRequest33,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "getLocation")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationResponse.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultgetLocation(
(org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationResponse)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorgetLocation(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorgetLocation((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorgetLocation((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorgetLocation(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetLocation(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetLocation(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetLocation(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetLocation(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetLocation(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetLocation(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetLocation(f);
 }
									 } else {
										 callback.receiveErrorgetLocation(f);
									 }
									} else {
									 callback.receiveErrorgetLocation(f);
									}
								} else {
								 callback.receiveErrorgetLocation(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorgetLocation(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[9].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[9].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

/**
 * Auto generated method signature
 * 
 * @see org.csapi.www.service.Cmcc_mas_wbs#sendSms
 * @param sendSmsRequest35

 * @throws org.csapi.www.service.PolicyException : 
 * @throws org.csapi.www.service.ServiceException : 
 */



public  org.csapi.www.service.Cmcc_mas_wbsStub.SendSmsResponse sendSms(

org.csapi.www.service.Cmcc_mas_wbsStub.SendSmsRequest sendSmsRequest35)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[10].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/sendSms");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 sendSmsRequest35,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "sendSms")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.SendSmsResponse.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.SendSmsResponse)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startsendSms
 * @param sendSmsRequest35

*/
public  void startsendSms(

 org.csapi.www.service.Cmcc_mas_wbsStub.SendSmsRequest sendSmsRequest35,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[10].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/sendSms");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 sendSmsRequest35,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "sendSms")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.SendSmsResponse.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultsendSms(
(org.csapi.www.service.Cmcc_mas_wbsStub.SendSmsResponse)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorsendSms(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorsendSms((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorsendSms((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorsendSms(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendSms(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendSms(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendSms(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendSms(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendSms(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendSms(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendSms(f);
 }
									 } else {
										 callback.receiveErrorsendSms(f);
									 }
									} else {
									 callback.receiveErrorsendSms(f);
									}
								} else {
								 callback.receiveErrorsendSms(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorsendSms(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[10].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[10].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#GetReceivedSms
  * @param getReceivedSmsRequest37
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedSmsResponse GetReceivedSms(

 org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedSmsRequest getReceivedSmsRequest37)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[11].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/GetReceivedSms");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 getReceivedSmsRequest37,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "GetReceivedSms")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedSmsResponse.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedSmsResponse)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startGetReceivedSms
 * @param getReceivedSmsRequest37

*/
public  void startGetReceivedSms(

 org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedSmsRequest getReceivedSmsRequest37,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[11].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/GetReceivedSms");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 getReceivedSmsRequest37,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "GetReceivedSms")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedSmsResponse.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultGetReceivedSms(
(org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedSmsResponse)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorGetReceivedSms(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorGetReceivedSms((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorGetReceivedSms((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorGetReceivedSms(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorGetReceivedSms(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorGetReceivedSms(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorGetReceivedSms(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorGetReceivedSms(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorGetReceivedSms(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorGetReceivedSms(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorGetReceivedSms(f);
 }
									 } else {
										 callback.receiveErrorGetReceivedSms(f);
									 }
									} else {
									 callback.receiveErrorGetReceivedSms(f);
									}
								} else {
								 callback.receiveErrorGetReceivedSms(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorGetReceivedSms(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[11].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[11].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#notifySmsDeliveryStatus
  * @param notifySmsDeliveryStatusRequest39
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  void notifySmsDeliveryStatus(

 org.csapi.www.service.Cmcc_mas_wbsStub.NotifySmsDeliveryStatusRequest notifySmsDeliveryStatusRequest39)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[12].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/notifySmsDeliveryStatus");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 notifySmsDeliveryStatusRequest39,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "notifySmsDeliveryStatus")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
return;
 
 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startnotifySmsDeliveryStatus
 * @param notifySmsDeliveryStatusRequest39

*/
public  void startnotifySmsDeliveryStatus(

 org.csapi.www.service.Cmcc_mas_wbsStub.NotifySmsDeliveryStatusRequest notifySmsDeliveryStatusRequest39,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[12].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/notifySmsDeliveryStatus");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 notifySmsDeliveryStatusRequest39,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "notifySmsDeliveryStatus")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
 // Nothing to pass as the callback!!!


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[12].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[12].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#APSvcAuthentic
  * @param aPSvcAuthenticReq41
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.APSvcAuthenticRsp APSvcAuthentic(

 org.csapi.www.service.Cmcc_mas_wbsStub.APSvcAuthenticReq aPSvcAuthenticReq41)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[13].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/APSvcAuthentic");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 aPSvcAuthenticReq41,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "APSvcAuthentic")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.APSvcAuthenticRsp.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.APSvcAuthenticRsp)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startAPSvcAuthentic
 * @param aPSvcAuthenticReq41

*/
public  void startAPSvcAuthentic(

 org.csapi.www.service.Cmcc_mas_wbsStub.APSvcAuthenticReq aPSvcAuthenticReq41,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[13].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/APSvcAuthentic");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 aPSvcAuthenticReq41,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "APSvcAuthentic")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.APSvcAuthenticRsp.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultAPSvcAuthentic(
(org.csapi.www.service.Cmcc_mas_wbsStub.APSvcAuthenticRsp)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorAPSvcAuthentic(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorAPSvcAuthentic((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorAPSvcAuthentic((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorAPSvcAuthentic(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPSvcAuthentic(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPSvcAuthentic(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPSvcAuthentic(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPSvcAuthentic(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPSvcAuthentic(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPSvcAuthentic(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPSvcAuthentic(f);
 }
									 } else {
										 callback.receiveErrorAPSvcAuthentic(f);
									 }
									} else {
									 callback.receiveErrorAPSvcAuthentic(f);
									}
								} else {
								 callback.receiveErrorAPSvcAuthentic(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorAPSvcAuthentic(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[13].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[13].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#notifySmsReception
  * @param notifySmsReceptionRequest43
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  void notifySmsReception(

 org.csapi.www.service.Cmcc_mas_wbsStub.NotifySmsReceptionRequest notifySmsReceptionRequest43)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[14].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/notifySmsReception");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 notifySmsReceptionRequest43,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "notifySmsReception")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
return;
 
 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startnotifySmsReception
 * @param notifySmsReceptionRequest43

*/
public  void startnotifySmsReception(

 org.csapi.www.service.Cmcc_mas_wbsStub.NotifySmsReceptionRequest notifySmsReceptionRequest43,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[14].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/notifySmsReception");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 notifySmsReceptionRequest43,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "notifySmsReception")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
 // Nothing to pass as the callback!!!


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[14].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[14].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#stopNotification
  * @param stopNotificationRequest45
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  void stopNotification(

 org.csapi.www.service.Cmcc_mas_wbsStub.StopNotificationRequest stopNotificationRequest45)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[15].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/stopNotification");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 stopNotificationRequest45,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "stopNotification")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
return;
 
 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startstopNotification
 * @param stopNotificationRequest45

*/
public  void startstopNotification(

 org.csapi.www.service.Cmcc_mas_wbsStub.StopNotificationRequest stopNotificationRequest45,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[15].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/stopNotification");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 stopNotificationRequest45,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "stopNotification")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
 // Nothing to pass as the callback!!!


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[15].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[15].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#EndNotification
  * @param endNotificationRequest47
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  void EndNotification(

 org.csapi.www.service.Cmcc_mas_wbsStub.EndNotificationRequest endNotificationRequest47)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[16].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/EndNotification");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 endNotificationRequest47,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "EndNotification")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
return;
 
 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startEndNotification
 * @param endNotificationRequest47

*/
public  void startEndNotification(

 org.csapi.www.service.Cmcc_mas_wbsStub.EndNotificationRequest endNotificationRequest47,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[16].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/EndNotification");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 endNotificationRequest47,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "EndNotification")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
 // Nothing to pass as the callback!!!


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[16].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[16].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#startNotification
  * @param startNotificationRequest49
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  void startNotification(

 org.csapi.www.service.Cmcc_mas_wbsStub.StartNotificationRequest startNotificationRequest49)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[17].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/startNotification");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 startNotificationRequest49,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "startNotification")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
return;
 
 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startstartNotification
 * @param startNotificationRequest49

*/
public  void startstartNotification(

 org.csapi.www.service.Cmcc_mas_wbsStub.StartNotificationRequest startNotificationRequest49,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[17].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/startNotification");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 startNotificationRequest49,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "startNotification")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
 // Nothing to pass as the callback!!!


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[17].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[17].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#APSvcAlarm
  * @param alarmReq51
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.AlarmRsp APSvcAlarm(

 org.csapi.www.service.Cmcc_mas_wbsStub.AlarmReq alarmReq51)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[18].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/APSvcAlarm");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 alarmReq51,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "APSvcAlarm")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.AlarmRsp.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.AlarmRsp)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startAPSvcAlarm
 * @param alarmReq51

*/
public  void startAPSvcAlarm(

 org.csapi.www.service.Cmcc_mas_wbsStub.AlarmReq alarmReq51,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[18].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/APSvcAlarm");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 alarmReq51,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "APSvcAlarm")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.AlarmRsp.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultAPSvcAlarm(
(org.csapi.www.service.Cmcc_mas_wbsStub.AlarmRsp)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorAPSvcAlarm(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorAPSvcAlarm((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorAPSvcAlarm((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorAPSvcAlarm(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPSvcAlarm(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPSvcAlarm(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPSvcAlarm(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPSvcAlarm(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPSvcAlarm(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPSvcAlarm(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorAPSvcAlarm(f);
 }
									 } else {
										 callback.receiveErrorAPSvcAlarm(f);
									 }
									} else {
									 callback.receiveErrorAPSvcAlarm(f);
									}
								} else {
								 callback.receiveErrorAPSvcAlarm(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorAPSvcAlarm(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[18].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[18].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#notifyMessageReception
  * @param notifyMessageReceptionRequest53
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  void notifyMessageReception(

 org.csapi.www.service.Cmcc_mas_wbsStub.NotifyMessageReceptionRequest notifyMessageReceptionRequest53)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[19].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/notifyMessageReception");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 notifyMessageReceptionRequest53,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "notifyMessageReception")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
return;
 
 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startnotifyMessageReception
 * @param notifyMessageReceptionRequest53

*/
public  void startnotifyMessageReception(

 org.csapi.www.service.Cmcc_mas_wbsStub.NotifyMessageReceptionRequest notifyMessageReceptionRequest53,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[19].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/notifyMessageReception");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 notifyMessageReceptionRequest53,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "notifyMessageReception")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
 // Nothing to pass as the callback!!!


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[19].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[19].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#sendMessage
  * @param sendMessageRequest55
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.SendMessageResponse sendMessage(

 org.csapi.www.service.Cmcc_mas_wbsStub.SendMessageRequest sendMessageRequest55)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[20].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/sendMessage");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 sendMessageRequest55,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "sendMessage")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.SendMessageResponse.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.SendMessageResponse)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startsendMessage
 * @param sendMessageRequest55

*/
public  void startsendMessage(

 org.csapi.www.service.Cmcc_mas_wbsStub.SendMessageRequest sendMessageRequest55,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[20].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/sendMessage");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 sendMessageRequest55,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "sendMessage")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.SendMessageResponse.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultsendMessage(
(org.csapi.www.service.Cmcc_mas_wbsStub.SendMessageResponse)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorsendMessage(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorsendMessage((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorsendMessage((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorsendMessage(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendMessage(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendMessage(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendMessage(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendMessage(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendMessage(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendMessage(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorsendMessage(f);
 }
									 } else {
										 callback.receiveErrorsendMessage(f);
									 }
									} else {
									 callback.receiveErrorsendMessage(f);
									}
								} else {
								 callback.receiveErrorsendMessage(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorsendMessage(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[20].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[20].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#APSvcPerfReport
  * @param aPSvcPerfReportReq57
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  void APSvcPerfReport(

 org.csapi.www.service.Cmcc_mas_wbsStub.APSvcPerfReportReq aPSvcPerfReportReq57)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[21].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/APSvcPerfReport");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 aPSvcPerfReportReq57,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "APSvcPerfReport")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
return;
 
 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startAPSvcPerfReport
 * @param aPSvcPerfReportReq57

*/
public  void startAPSvcPerfReport(

 org.csapi.www.service.Cmcc_mas_wbsStub.APSvcPerfReportReq aPSvcPerfReportReq57,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[21].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/APSvcPerfReport");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 aPSvcPerfReportReq57,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "APSvcPerfReport")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
 // Nothing to pass as the callback!!!


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[21].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[21].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#getPushDeliveryStatus
  * @param getPushDeliveryStatusRequest59
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.GetPushDeliveryStatusResponse getPushDeliveryStatus(

 org.csapi.www.service.Cmcc_mas_wbsStub.GetPushDeliveryStatusRequest getPushDeliveryStatusRequest59)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[22].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/getPushDeliveryStatus");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 getPushDeliveryStatusRequest59,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "getPushDeliveryStatus")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.GetPushDeliveryStatusResponse.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.GetPushDeliveryStatusResponse)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startgetPushDeliveryStatus
 * @param getPushDeliveryStatusRequest59

*/
public  void startgetPushDeliveryStatus(

 org.csapi.www.service.Cmcc_mas_wbsStub.GetPushDeliveryStatusRequest getPushDeliveryStatusRequest59,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[22].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/getPushDeliveryStatus");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 getPushDeliveryStatusRequest59,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "getPushDeliveryStatus")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.GetPushDeliveryStatusResponse.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultgetPushDeliveryStatus(
(org.csapi.www.service.Cmcc_mas_wbsStub.GetPushDeliveryStatusResponse)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorgetPushDeliveryStatus(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorgetPushDeliveryStatus((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorgetPushDeliveryStatus((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorgetPushDeliveryStatus(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetPushDeliveryStatus(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetPushDeliveryStatus(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetPushDeliveryStatus(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetPushDeliveryStatus(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetPushDeliveryStatus(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetPushDeliveryStatus(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetPushDeliveryStatus(f);
 }
									 } else {
										 callback.receiveErrorgetPushDeliveryStatus(f);
									 }
									} else {
									 callback.receiveErrorgetPushDeliveryStatus(f);
									}
								} else {
								 callback.receiveErrorgetPushDeliveryStatus(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorgetPushDeliveryStatus(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[22].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[22].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#notifyMessageDeliveryReceipt
  * @param notifyMessageDeliveryReceiptRequest61
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  void notifyMessageDeliveryReceipt(

 org.csapi.www.service.Cmcc_mas_wbsStub.NotifyMessageDeliveryReceiptRequest notifyMessageDeliveryReceiptRequest61)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[23].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/notifyMessageDeliveryReceipt");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 notifyMessageDeliveryReceiptRequest61,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "notifyMessageDeliveryReceipt")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
return;
 
 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startnotifyMessageDeliveryReceipt
 * @param notifyMessageDeliveryReceiptRequest61

*/
public  void startnotifyMessageDeliveryReceipt(

 org.csapi.www.service.Cmcc_mas_wbsStub.NotifyMessageDeliveryReceiptRequest notifyMessageDeliveryReceiptRequest61,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[23].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/notifyMessageDeliveryReceipt");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 notifyMessageDeliveryReceiptRequest61,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "notifyMessageDeliveryReceipt")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
 // Nothing to pass as the callback!!!


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[23].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[23].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#notifyPushDeliveryReceipt
  * @param notifyPushDeliveryReceiptRequest63
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  void notifyPushDeliveryReceipt(

 org.csapi.www.service.Cmcc_mas_wbsStub.NotifyPushDeliveryReceiptRequest notifyPushDeliveryReceiptRequest63)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[24].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/notifyPushDeliveryReceipt");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 notifyPushDeliveryReceiptRequest63,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "notifyPushDeliveryReceipt")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
return;
 
 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startnotifyPushDeliveryReceipt
 * @param notifyPushDeliveryReceiptRequest63

*/
public  void startnotifyPushDeliveryReceipt(

 org.csapi.www.service.Cmcc_mas_wbsStub.NotifyPushDeliveryReceiptRequest notifyPushDeliveryReceiptRequest63,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[24].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/notifyPushDeliveryReceipt");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 notifyPushDeliveryReceiptRequest63,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "notifyPushDeliveryReceipt")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
 // Nothing to pass as the callback!!!


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[24].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[24].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#LocationError
  * @param locationErrorRequest65
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  void LocationError(

 org.csapi.www.service.Cmcc_mas_wbsStub.LocationErrorRequest locationErrorRequest65)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[25].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/LocationError");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 locationErrorRequest65,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "LocationError")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
return;
 
 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startLocationError
 * @param locationErrorRequest65

*/
public  void startLocationError(

 org.csapi.www.service.Cmcc_mas_wbsStub.LocationErrorRequest locationErrorRequest65,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[25].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/LocationError");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 locationErrorRequest65,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "LocationError")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
 // Nothing to pass as the callback!!!


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[25].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[25].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#makeUssd
  * @param makeUssdRequest67
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.MakeUssdResponse makeUssd(

 org.csapi.www.service.Cmcc_mas_wbsStub.MakeUssdRequest makeUssdRequest67)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[26].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/makeUssd");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 makeUssdRequest67,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "makeUssd")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.MakeUssdResponse.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.MakeUssdResponse)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startmakeUssd
 * @param makeUssdRequest67

*/
public  void startmakeUssd(

 org.csapi.www.service.Cmcc_mas_wbsStub.MakeUssdRequest makeUssdRequest67,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[26].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/makeUssd");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 makeUssdRequest67,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "makeUssd")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.MakeUssdResponse.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultmakeUssd(
(org.csapi.www.service.Cmcc_mas_wbsStub.MakeUssdResponse)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrormakeUssd(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrormakeUssd((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrormakeUssd((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrormakeUssd(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrormakeUssd(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrormakeUssd(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrormakeUssd(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrormakeUssd(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrormakeUssd(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrormakeUssd(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrormakeUssd(f);
 }
									 } else {
										 callback.receiveErrormakeUssd(f);
									 }
									} else {
									 callback.receiveErrormakeUssd(f);
									}
								} else {
								 callback.receiveErrormakeUssd(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrormakeUssd(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[26].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[26].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#APSvcPerfCmd
  * @param aPSvcPerfCmdReq69
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  void APSvcPerfCmd(

 org.csapi.www.service.Cmcc_mas_wbsStub.APSvcPerfCmdReq aPSvcPerfCmdReq69)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[27].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/APSvcPerfCmd");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 aPSvcPerfCmdReq69,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "APSvcPerfCmd")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
return;
 
 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startAPSvcPerfCmd
 * @param aPSvcPerfCmdReq69

*/
public  void startAPSvcPerfCmd(

 org.csapi.www.service.Cmcc_mas_wbsStub.APSvcPerfCmdReq aPSvcPerfCmdReq69,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[27].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/APSvcPerfCmd");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 aPSvcPerfCmdReq69,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "APSvcPerfCmd")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
 // Nothing to pass as the callback!!!


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[27].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[27].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#getMessageDeliveryStatus
  * @param getMessageDeliveryStatusRequest71
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageDeliveryStatusResponse getMessageDeliveryStatus(

 org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageDeliveryStatusRequest getMessageDeliveryStatusRequest71)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[28].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/getMessageDeliveryStatus");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 getMessageDeliveryStatusRequest71,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "getMessageDeliveryStatus")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageDeliveryStatusResponse.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageDeliveryStatusResponse)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startgetMessageDeliveryStatus
 * @param getMessageDeliveryStatusRequest71

*/
public  void startgetMessageDeliveryStatus(

 org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageDeliveryStatusRequest getMessageDeliveryStatusRequest71,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[28].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/getMessageDeliveryStatus");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 getMessageDeliveryStatusRequest71,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "getMessageDeliveryStatus")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageDeliveryStatusResponse.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultgetMessageDeliveryStatus(
(org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageDeliveryStatusResponse)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorgetMessageDeliveryStatus(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorgetMessageDeliveryStatus((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorgetMessageDeliveryStatus((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorgetMessageDeliveryStatus(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetMessageDeliveryStatus(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetMessageDeliveryStatus(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetMessageDeliveryStatus(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetMessageDeliveryStatus(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetMessageDeliveryStatus(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetMessageDeliveryStatus(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetMessageDeliveryStatus(f);
 }
									 } else {
										 callback.receiveErrorgetMessageDeliveryStatus(f);
									 }
									} else {
									 callback.receiveErrorgetMessageDeliveryStatus(f);
									}
								} else {
								 callback.receiveErrorgetMessageDeliveryStatus(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorgetMessageDeliveryStatus(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[28].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[28].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#LocationEnd
  * @param locationEndRequest73
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  void LocationEnd(

 org.csapi.www.service.Cmcc_mas_wbsStub.LocationEndRequest locationEndRequest73)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[29].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/LocationEnd");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 locationEndRequest73,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "LocationEnd")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
return;
 
 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startLocationEnd
 * @param locationEndRequest73

*/
public  void startLocationEnd(

 org.csapi.www.service.Cmcc_mas_wbsStub.LocationEndRequest locationEndRequest73,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[29].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/LocationEnd");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 locationEndRequest73,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "LocationEnd")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
 // Nothing to pass as the callback!!!


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[29].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[29].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#GetSmsDeliveryStatus
  * @param getSmsDeliveryStatusRequest75
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.GetSmsDeliveryStatusResponse GetSmsDeliveryStatus(

 org.csapi.www.service.Cmcc_mas_wbsStub.GetSmsDeliveryStatusRequest getSmsDeliveryStatusRequest75)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[30].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/GetSmsDeliveryStatus");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 getSmsDeliveryStatusRequest75,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "GetSmsDeliveryStatus")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.GetSmsDeliveryStatusResponse.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.GetSmsDeliveryStatusResponse)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startGetSmsDeliveryStatus
 * @param getSmsDeliveryStatusRequest75

*/
public  void startGetSmsDeliveryStatus(

 org.csapi.www.service.Cmcc_mas_wbsStub.GetSmsDeliveryStatusRequest getSmsDeliveryStatusRequest75,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[30].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/GetSmsDeliveryStatus");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 getSmsDeliveryStatusRequest75,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "GetSmsDeliveryStatus")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.GetSmsDeliveryStatusResponse.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultGetSmsDeliveryStatus(
(org.csapi.www.service.Cmcc_mas_wbsStub.GetSmsDeliveryStatusResponse)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorGetSmsDeliveryStatus(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorGetSmsDeliveryStatus((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorGetSmsDeliveryStatus((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorGetSmsDeliveryStatus(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorGetSmsDeliveryStatus(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorGetSmsDeliveryStatus(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorGetSmsDeliveryStatus(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorGetSmsDeliveryStatus(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorGetSmsDeliveryStatus(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorGetSmsDeliveryStatus(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorGetSmsDeliveryStatus(f);
 }
									 } else {
										 callback.receiveErrorGetSmsDeliveryStatus(f);
									 }
									} else {
									 callback.receiveErrorGetSmsDeliveryStatus(f);
									}
								} else {
								 callback.receiveErrorGetSmsDeliveryStatus(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorGetSmsDeliveryStatus(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[30].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[30].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#RecoveryAP
  * @param recoveryAPReq77
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.RecoveryAPRsp RecoveryAP(

 org.csapi.www.service.Cmcc_mas_wbsStub.RecoveryAPReq recoveryAPReq77)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[31].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/RecoveryAP");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 recoveryAPReq77,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "RecoveryAP")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.RecoveryAPRsp.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.RecoveryAPRsp)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startRecoveryAP
 * @param recoveryAPReq77

*/
public  void startRecoveryAP(

 org.csapi.www.service.Cmcc_mas_wbsStub.RecoveryAPReq recoveryAPReq77,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[31].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/RecoveryAP");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 recoveryAPReq77,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "RecoveryAP")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.RecoveryAPRsp.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultRecoveryAP(
(org.csapi.www.service.Cmcc_mas_wbsStub.RecoveryAPRsp)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorRecoveryAP(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorRecoveryAP((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorRecoveryAP((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorRecoveryAP(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorRecoveryAP(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorRecoveryAP(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorRecoveryAP(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorRecoveryAP(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorRecoveryAP(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorRecoveryAP(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorRecoveryAP(f);
 }
									 } else {
										 callback.receiveErrorRecoveryAP(f);
									 }
									} else {
									 callback.receiveErrorRecoveryAP(f);
									}
								} else {
								 callback.receiveErrorRecoveryAP(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorRecoveryAP(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[31].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[31].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#PauseAP
  * @param pauseAPReq79
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.PauseAPRsp PauseAP(

 org.csapi.www.service.Cmcc_mas_wbsStub.PauseAPReq pauseAPReq79)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[32].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/PauseAP");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 pauseAPReq79,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "PauseAP")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.PauseAPRsp.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.PauseAPRsp)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startPauseAP
 * @param pauseAPReq79

*/
public  void startPauseAP(

 org.csapi.www.service.Cmcc_mas_wbsStub.PauseAPReq pauseAPReq79,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[32].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/PauseAP");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 pauseAPReq79,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "PauseAP")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.PauseAPRsp.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultPauseAP(
(org.csapi.www.service.Cmcc_mas_wbsStub.PauseAPRsp)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorPauseAP(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorPauseAP((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorPauseAP((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorPauseAP(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorPauseAP(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorPauseAP(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorPauseAP(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorPauseAP(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorPauseAP(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorPauseAP(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorPauseAP(f);
 }
									 } else {
										 callback.receiveErrorPauseAP(f);
									 }
									} else {
									 callback.receiveErrorPauseAP(f);
									}
								} else {
								 callback.receiveErrorPauseAP(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorPauseAP(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[32].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[32].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#getMessage
  * @param getMessageRequest81
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageResponse getMessage(

 org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageRequest getMessageRequest81)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[33].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/getMessage");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 getMessageRequest81,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "getMessage")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageResponse.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageResponse)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startgetMessage
 * @param getMessageRequest81

*/
public  void startgetMessage(

 org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageRequest getMessageRequest81,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[33].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/getMessage");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 getMessageRequest81,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "getMessage")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageResponse.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultgetMessage(
(org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageResponse)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorgetMessage(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorgetMessage((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorgetMessage((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorgetMessage(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetMessage(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetMessage(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetMessage(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetMessage(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetMessage(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetMessage(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorgetMessage(f);
 }
									 } else {
										 callback.receiveErrorgetMessage(f);
									 }
									} else {
									 callback.receiveErrorgetMessage(f);
									}
								} else {
								 callback.receiveErrorgetMessage(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorgetMessage(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[33].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[33].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#ussdContinue
  * @param ussdContinueRequest83
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.UssdContinueResponse ussdContinue(

 org.csapi.www.service.Cmcc_mas_wbsStub.UssdContinueRequest ussdContinueRequest83)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[34].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/ussdContinue");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 ussdContinueRequest83,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "ussdContinue")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.UssdContinueResponse.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.UssdContinueResponse)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startussdContinue
 * @param ussdContinueRequest83

*/
public  void startussdContinue(

 org.csapi.www.service.Cmcc_mas_wbsStub.UssdContinueRequest ussdContinueRequest83,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[34].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/ussdContinue");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 ussdContinueRequest83,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "ussdContinue")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.UssdContinueResponse.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultussdContinue(
(org.csapi.www.service.Cmcc_mas_wbsStub.UssdContinueResponse)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorussdContinue(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorussdContinue((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorussdContinue((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorussdContinue(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorussdContinue(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorussdContinue(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorussdContinue(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorussdContinue(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorussdContinue(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorussdContinue(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorussdContinue(f);
 }
									 } else {
										 callback.receiveErrorussdContinue(f);
									 }
									} else {
									 callback.receiveErrorussdContinue(f);
									}
								} else {
								 callback.receiveErrorussdContinue(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorussdContinue(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[34].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[34].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#startPeriodicNotification
  * @param startPeriodicNotificationRequest85
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  org.csapi.www.service.Cmcc_mas_wbsStub.StartPeriodicNotificationResponse startPeriodicNotification(

 org.csapi.www.service.Cmcc_mas_wbsStub.StartPeriodicNotificationRequest startPeriodicNotificationRequest85)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[35].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/startPeriodicNotification");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 startPeriodicNotificationRequest85,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "startPeriodicNotification")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
 org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


java.lang.Object object = fromOM(
  _returnEnv.getBody().getFirstElement() ,
  org.csapi.www.service.Cmcc_mas_wbsStub.StartPeriodicNotificationResponse.class,
getEnvelopeNamespaces(_returnEnv));

 
return (org.csapi.www.service.Cmcc_mas_wbsStub.StartPeriodicNotificationResponse)object;

 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startstartPeriodicNotification
 * @param startPeriodicNotificationRequest85

*/
public  void startstartPeriodicNotification(

 org.csapi.www.service.Cmcc_mas_wbsStub.StartPeriodicNotificationRequest startPeriodicNotificationRequest85,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[35].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/startPeriodicNotification");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 startPeriodicNotificationRequest85,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "startPeriodicNotification")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
_operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
 public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
 try {
org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
 org.csapi.www.service.Cmcc_mas_wbsStub.StartPeriodicNotificationResponse.class,
 getEnvelopeNamespaces(resultEnv));
callback.receiveResultstartPeriodicNotification(
(org.csapi.www.service.Cmcc_mas_wbsStub.StartPeriodicNotificationResponse)object);

 } catch (org.apache.axis2.AxisFault e) {
callback.receiveErrorstartPeriodicNotification(e);
 }
 }

 public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(faultElt.getQName())){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.Exception ex=
														(java.lang.Exception) exceptionClass.newInstance();
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
													if (ex instanceof org.csapi.www.service.PolicyException){
														callback.receiveErrorstartPeriodicNotification((org.csapi.www.service.PolicyException)ex);
											 return;
										 }
										 
													if (ex instanceof org.csapi.www.service.ServiceException){
														callback.receiveErrorstartPeriodicNotification((org.csapi.www.service.ServiceException)ex);
											 return;
										 }
										 
					
										 callback.receiveErrorstartPeriodicNotification(new java.rmi.RemoteException(ex.getMessage(), ex));
 } catch(java.lang.ClassCastException e){
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorstartPeriodicNotification(f);
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorstartPeriodicNotification(f);
 } catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorstartPeriodicNotification(f);
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorstartPeriodicNotification(f);
 } catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorstartPeriodicNotification(f);
 } catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorstartPeriodicNotification(f);
 } catch (org.apache.axis2.AxisFault e) {
// we cannot intantiate the class - throw the original Axis fault
callback.receiveErrorstartPeriodicNotification(f);
 }
									 } else {
										 callback.receiveErrorstartPeriodicNotification(f);
									 }
									} else {
									 callback.receiveErrorstartPeriodicNotification(f);
									}
								} else {
								 callback.receiveErrorstartPeriodicNotification(error);
								}
 }

 public void onFault(org.apache.axis2.context.MessageContext faultContext) {
org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
onError(fault);
 }

 public void onComplete() {
try {
 _messageContext.getTransportOut().getSender().cleanup(_messageContext);
} catch (org.apache.axis2.AxisFault axisFault) {
 callback.receiveErrorstartPeriodicNotification(axisFault);
}
 }
});


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[35].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[35].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }

 /**
  * Auto generated method signature
  * 
  * @see org.csapi.www.service.Cmcc_mas_wbs#LocationNotification
  * @param locationNotificationRequest87
 
  * @throws org.csapi.www.service.PolicyException : 
  * @throws org.csapi.www.service.ServiceException : 
  */

 

 public  void LocationNotification(

 org.csapi.www.service.Cmcc_mas_wbsStub.LocationNotificationRequest locationNotificationRequest87)


 throws java.rmi.RemoteException
 
 
,org.csapi.www.service.PolicyException
,org.csapi.www.service.ServiceException{
org.apache.axis2.context.MessageContext _messageContext = null;
try{
 org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[36].getName());
_operationClient.getOptions().setAction("http://www.csapi.org/service/LocationNotification");
_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");


// create a message context
_messageContext = new org.apache.axis2.context.MessageContext();



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env = null;
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 locationNotificationRequest87,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "LocationNotification")));

//adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// set the message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message contxt to the operation client
_operationClient.addMessageContext(_messageContext);

//execute the operation client
_operationClient.execute(true);

 
return;
 
 }catch(org.apache.axis2.AxisFault f){

 org.apache.axiom.om.OMElement faultElt = f.getDetail();
 if (faultElt!=null){
if (faultExceptionNameMap.containsKey(faultElt.getQName())){
 //make the fault by reflection
 try{
java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
java.lang.Exception ex=
(java.lang.Exception) exceptionClass.newInstance();
//message class
java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
new java.lang.Class[]{messageClass});
m.invoke(ex,new java.lang.Object[]{messageObject});

if (ex instanceof org.csapi.www.service.PolicyException){
  throw (org.csapi.www.service.PolicyException)ex;
}

if (ex instanceof org.csapi.www.service.ServiceException){
  throw (org.csapi.www.service.ServiceException)ex;
}


throw new java.rmi.RemoteException(ex.getMessage(), ex);
 }catch(java.lang.ClassCastException e){
 // we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.ClassNotFoundException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.NoSuchMethodException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 } catch (java.lang.reflect.InvocationTargetException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }  catch (java.lang.IllegalAccessException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }catch (java.lang.InstantiationException e) {
// we cannot intantiate the class - throw the original Axis fault
throw f;
 }
}else{
 throw f;
}
 }else{
throw f;
 }
 } finally {
_messageContext.getTransportOut().getSender().cleanup(_messageContext);
 }
}
 
/**
* Auto generated method signature for Asynchronous Invocations
* 
* @see org.csapi.www.service.Cmcc_mas_wbs#startLocationNotification
 * @param locationNotificationRequest87

*/
public  void startLocationNotification(

 org.csapi.www.service.Cmcc_mas_wbsStub.LocationNotificationRequest locationNotificationRequest87,

  final org.csapi.www.service.Cmcc_mas_wbsCallbackHandler callback)

throws java.rmi.RemoteException{

org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[36].getName());
  _operationClient.getOptions().setAction("http://www.csapi.org/service/LocationNotification");
  _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");



// create SOAP envelope with that payload
org.apache.axiom.soap.SOAPEnvelope env=null;
final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

 
 //Style is Doc.
 
 
 env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
 locationNotificationRequest87,
 optimizeContent(new javax.xml.namespace.QName("http://www.csapi.org/service",
 "LocationNotification")));

// adding SOAP soap_headers
 _serviceClient.addHeadersToEnvelope(env);
// create message context with that soap envelope
_messageContext.setEnvelope(env);

// add the message context to the operation client
_operationClient.addMessageContext(_messageContext);


 
 // Nothing to pass as the callback!!!


  org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
if ( _operations[36].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
  _operations[36].setMessageReceiver(
 _callbackReceiver);
}

//execute the operation client
_operationClient.execute(false);

 }



 /**
*  A utility method that copies the namepaces from the SOAPEnvelope
*/
 private java.util.Map getEnvelopeNamespaces(org.apache.axiom.soap.SOAPEnvelope env){
java.util.Map returnMap = new java.util.HashMap();
java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
while (namespaceIterator.hasNext()) {
 org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator.next();
 returnMap.put(ns.getPrefix(),ns.getNamespaceURI());
}
 return returnMap;
 }

 
 
 private javax.xml.namespace.QName[] opNameArray = null;
 private boolean optimizeContent(javax.xml.namespace.QName opName) {


if (opNameArray == null) {
 return false;
}
for (int i = 0; i < opNameArray.length; i++) {
 if (opName.equals(opNameArray[i])) {
return true;
 }
}
return false;
 }
  //http://80.98.99.1/services/cmcc_mas_wbs
public static class APLogOutRsp
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ap",
"APLogOutRsp",
"ns2");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ap")){
return "ns2";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for LogoutResult
*/


 protected APLogoutResult localLogoutResult ;


/**
* Auto generated getter method
* @return APLogoutResult
*/
public  APLogoutResult getLogoutResult(){
 return localLogoutResult;
}



 /**
 * Auto generated setter method
 * @param param LogoutResult
 */
 public void setLogoutResult(APLogoutResult param){
 
 this.localLogoutResult=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 APLogOutRsp.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":APLogOutRsp",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"APLogOutRsp",
xmlWriter);
}

 
}
 
 if (localLogoutResult==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"LogoutResult", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"LogoutResult");
 }

} else {
 xmlWriter.writeStartElement("LogoutResult");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localLogoutResult.serialize(new javax.xml.namespace.QName("","LogoutResult"),
factory,xmlWriter);
 }

 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


 elementList.add(new javax.xml.namespace.QName("",
"LogoutResult"));
 
 
 elementList.add(localLogoutResult==null?null:
 localLogoutResult);


return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static APLogOutRsp parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 APLogOutRsp object =
new APLogOutRsp();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"APLogOutRsp".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (APLogOutRsp)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","LogoutResult").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setLogoutResult(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setLogoutResult(APLogoutResult.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class NotifyUssdEndRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ussd",
"notifyUssdEndRequest",
"ns4");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ussd")){
return "ns4";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for UssdIdentifier
*/


 protected java.lang.String localUssdIdentifier ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getUssdIdentifier(){
 return localUssdIdentifier;
}



 /**
 * Auto generated setter method
 * @param param UssdIdentifier
 */
 public void setUssdIdentifier(java.lang.String param){
 
 this.localUssdIdentifier=param;
 

 }
 

/**
* field for EndReason
*/


 protected EndReason localEndReason ;


/**
* Auto generated getter method
* @return EndReason
*/
public  EndReason getEndReason(){
 return localEndReason;
}



 /**
 * Auto generated setter method
 * @param param EndReason
 */
 public void setEndReason(EndReason param){
 
 this.localEndReason=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 NotifyUssdEndRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ussd");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":notifyUssdEndRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"notifyUssdEndRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ussdIdentifier", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ussdIdentifier");
}

 } else {
xmlWriter.writeStartElement("ussdIdentifier");
 }


  if (localUssdIdentifier==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("ussdIdentifier cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localUssdIdentifier);
 
  }
 
xmlWriter.writeEndElement();
  
 if (localEndReason==null){
 throw new org.apache.axis2.databinding.ADBException("endReason cannot be null!!");
 }
localEndReason.serialize(new javax.xml.namespace.QName("","endReason"),
 factory,xmlWriter);

 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ussdIdentifier"));
 
if (localUssdIdentifier != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUssdIdentifier));
} else {
throw new org.apache.axis2.databinding.ADBException("ussdIdentifier cannot be null!!");
}
 
 elementList.add(new javax.xml.namespace.QName("",
"endReason"));
 
 
 if (localEndReason==null){
 throw new org.apache.axis2.databinding.ADBException("endReason cannot be null!!");
 }
 elementList.add(localEndReason);


return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static NotifyUssdEndRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 NotifyUssdEndRequest object =
new NotifyUssdEndRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"notifyUssdEndRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (NotifyUssdEndRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ussdIdentifier").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setUssdIdentifier(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","endReason").equals(reader.getName())){

object.setEndReason(EndReason.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class DeliveryInformation
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
name = DeliveryInformation
Namespace URI = http://www.csapi.org/schema/wap
Namespace Prefix = ns3
*/
 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/wap")){
return "ns3";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Address
*/


 protected org.apache.axis2.databinding.types.URI localAddress ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI
*/
public  org.apache.axis2.databinding.types.URI getAddress(){
 return localAddress;
}



 /**
 * Auto generated setter method
 * @param param Address
 */
 public void setAddress(org.apache.axis2.databinding.types.URI param){
 
 this.localAddress=param;
 

 }
 

/**
* field for Status
*/


 protected DeliveryStatus localStatus ;


/**
* Auto generated getter method
* @return DeliveryStatus
*/
public  DeliveryStatus getStatus(){
 return localStatus;
}



 /**
 * Auto generated setter method
 * @param param Status
 */
 public void setStatus(DeliveryStatus param){
 
 this.localStatus=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



 org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 DeliveryInformation.this.serialize(parentQName,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 parentQName,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/wap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":DeliveryInformation",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"DeliveryInformation",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"address", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"address");
}

 } else {
xmlWriter.writeStartElement("address");
 }


  if (localAddress==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("address cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddress));
 
  }
 
xmlWriter.writeEndElement();
  
 if (localStatus==null){
 throw new org.apache.axis2.databinding.ADBException("status cannot be null!!");
 }
localStatus.serialize(new javax.xml.namespace.QName("","status"),
 factory,xmlWriter);

 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"address"));
 
if (localAddress != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddress));
} else {
throw new org.apache.axis2.databinding.ADBException("address cannot be null!!");
}
 
 elementList.add(new javax.xml.namespace.QName("",
"status"));
 
 
 if (localStatus==null){
 throw new org.apache.axis2.databinding.ADBException("status cannot be null!!");
 }
 elementList.add(localStatus);


return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static DeliveryInformation parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 DeliveryInformation object =
new DeliveryInformation();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"DeliveryInformation".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (DeliveryInformation)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","address").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAddress(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","status").equals(reader.getName())){

object.setStatus(DeliveryStatus.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class APLogoutResult
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ap",
"APLogoutResult",
"ns2");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ap")){
return "ns2";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for APLogoutResult
*/


 protected java.lang.String localAPLogoutResult ;

 private static java.util.HashMap _table_ = new java.util.HashMap();

 // Constructor
 
protected APLogoutResult(java.lang.String value, boolean isRegisterValue) {
 localAPLogoutResult = value;
 if (isRegisterValue){

 _table_.put(localAPLogoutResult, this);

 }

}
 
 public static final java.lang.String _success =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("success");

 public static final java.lang.String _illegalAPid =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("illegalAPid");

 public static final java.lang.String _repeatedLogout =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("repeatedLogout");

public static final APLogoutResult success =
 new APLogoutResult(_success,true);
 
public static final APLogoutResult illegalAPid =
 new APLogoutResult(_illegalAPid,true);
 
public static final APLogoutResult repeatedLogout =
 new APLogoutResult(_repeatedLogout,true);
 

public java.lang.String getValue() { return localAPLogoutResult;}

public boolean equals(java.lang.Object obj) {return (obj == this);}
public int hashCode() { return toString().hashCode();}
public java.lang.String toString() {

return localAPLogoutResult.toString();
 

}



  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 APLogoutResult.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 

//We can safely assume an element has only one type associated with it

 java.lang.String namespace = parentQName.getNamespaceURI();
 java.lang.String localName = parentQName.getLocalPart();

 if (! namespace.equals("")) {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix, localName, namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace, localName);
}

 } else {
xmlWriter.writeStartElement(localName);
 }

 // add the type details if this is used in a simple type
 if (serializeType){
java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":APLogoutResult",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"APLogoutResult",
xmlWriter);
}
 }
 
  if (localAPLogoutResult==null){
 
  throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

 }else{

 xmlWriter.writeCharacters(localAPLogoutResult);
 
 }
 
 xmlWriter.writeEndElement();

 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{




//We can safely assume an element has only one type associated with it
 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
 new java.lang.Object[]{
 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAPLogoutResult)
 },
 null);

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{



public static APLogoutResult fromValue(java.lang.String value)
throws java.lang.IllegalArgumentException {
 APLogoutResult enumeration = (APLogoutResult)
 
 _table_.get(value);


 if (enumeration==null) throw new java.lang.IllegalArgumentException();
 return enumeration;
}
public static APLogoutResult fromString(java.lang.String value,java.lang.String namespaceURI)
throws java.lang.IllegalArgumentException {
 try {
 
 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


 } catch (java.lang.Exception e) {
throw new java.lang.IllegalArgumentException();
 }
}

public static APLogoutResult fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
 java.lang.String content) {
 if (content.indexOf(":") > -1){
java.lang.String prefix = content.substring(0,content.indexOf(":"));
java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
return APLogoutResult.Factory.fromString(content,namespaceUri);
 } else {
 return APLogoutResult.Factory.fromString(content,"");
 }
}
 

/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static APLogoutResult parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 APLogoutResult object = null;
// initialize a hash map to keep values
java.util.Map attributeMap = new java.util.HashMap();
java.util.List extraAttributeList = new java.util.ArrayList();
 

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
while(!reader.isEndElement()) {
 if (reader.isStartElement()  || reader.hasText()){

 java.lang.String content = reader.getElementText();
 
if (content.indexOf(":") > 0) {
 // this seems to be a Qname so find the namespace and send
 prefix = content.substring(0, content.indexOf(":"));
 namespaceuri = reader.getNamespaceURI(prefix);
 object = APLogoutResult.Factory.fromString(content,namespaceuri);
} else {
 // this seems to be not a qname send and empty namespace incase of it is
 // check is done in fromString method
 object = APLogoutResult.Factory.fromString(content,"");
}


  } else {
reader.next();
  }  
}  // end of while loop




 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class RecoveryAPReq
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ap",
"RecoveryAPReq",
"ns2");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ap")){
return "ns2";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for APid
*/


 protected java.lang.String localAPid ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getAPid(){
 return localAPid;
}



 /**
 * Auto generated setter method
 * @param param APid
 */
 public void setAPid(java.lang.String param){
 
 this.localAPid=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 RecoveryAPReq.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":RecoveryAPReq",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"RecoveryAPReq",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"APid", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"APid");
}

 } else {
xmlWriter.writeStartElement("APid");
 }


  if (localAPid==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("APid cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localAPid);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"APid"));
 
if (localAPid != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAPid));
} else {
throw new org.apache.axis2.databinding.ADBException("APid cannot be null!!");
}
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static RecoveryAPReq parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 RecoveryAPReq object =
new RecoveryAPReq();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"RecoveryAPReq".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (RecoveryAPReq)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","APid").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAPid(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class MessageReference
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
name = MessageReference
Namespace URI = http://www.csapi.org/schema/mms
Namespace Prefix = ns8
*/
 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/mms")){
return "ns8";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for MessageIdentifier
*/


 protected java.lang.String localMessageIdentifier ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getMessageIdentifier(){
 return localMessageIdentifier;
}



 /**
 * Auto generated setter method
 * @param param MessageIdentifier
 */
 public void setMessageIdentifier(java.lang.String param){
 
 this.localMessageIdentifier=param;
 

 }
 

/**
* field for MessageServiceActivationNumber
*/


 protected java.lang.String localMessageServiceActivationNumber ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getMessageServiceActivationNumber(){
 return localMessageServiceActivationNumber;
}



 /**
 * Auto generated setter method
 * @param param MessageServiceActivationNumber
 */
 public void setMessageServiceActivationNumber(java.lang.String param){
 
 this.localMessageServiceActivationNumber=param;
 

 }
 

/**
* field for SenderAddress
*/


 protected org.apache.axis2.databinding.types.URI localSenderAddress ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI
*/
public  org.apache.axis2.databinding.types.URI getSenderAddress(){
 return localSenderAddress;
}



 /**
 * Auto generated setter method
 * @param param SenderAddress
 */
 public void setSenderAddress(org.apache.axis2.databinding.types.URI param){
 
 this.localSenderAddress=param;
 

 }
 

/**
* field for Subject
*/


 protected java.lang.String localSubject ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getSubject(){
 return localSubject;
}



 /**
 * Auto generated setter method
 * @param param Subject
 */
 public void setSubject(java.lang.String param){
 
 this.localSubject=param;
 

 }
 

/**
* field for Priority
*/


 protected MessagePriority localPriority ;


/**
* Auto generated getter method
* @return MessagePriority
*/
public  MessagePriority getPriority(){
 return localPriority;
}



 /**
 * Auto generated setter method
 * @param param Priority
 */
 public void setPriority(MessagePriority param){
 
 this.localPriority=param;
 

 }
 

/**
* field for Message
*/


 protected javax.activation.DataHandler localMessage ;


/**
* Auto generated getter method
* @return javax.activation.DataHandler
*/
public  javax.activation.DataHandler getMessage(){
 return localMessage;
}



 /**
 * Auto generated setter method
 * @param param Message
 */
 public void setMessage(javax.activation.DataHandler param){
 
 this.localMessage=param;
 

 }
 

/**
* field for DateTime
*/


 protected java.util.Calendar localDateTime ;


/**
* Auto generated getter method
* @return java.util.Calendar
*/
public  java.util.Calendar getDateTime(){
 return localDateTime;
}



 /**
 * Auto generated setter method
 * @param param DateTime
 */
 public void setDateTime(java.util.Calendar param){
 
 this.localDateTime=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



 org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 MessageReference.this.serialize(parentQName,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 parentQName,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/mms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":MessageReference",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"MessageReference",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"messageIdentifier", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"messageIdentifier");
}

 } else {
xmlWriter.writeStartElement("messageIdentifier");
 }


  if (localMessageIdentifier==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("messageIdentifier cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localMessageIdentifier);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"messageServiceActivationNumber", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"messageServiceActivationNumber");
}

 } else {
xmlWriter.writeStartElement("messageServiceActivationNumber");
 }


  if (localMessageServiceActivationNumber==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("messageServiceActivationNumber cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localMessageServiceActivationNumber);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"senderAddress", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"senderAddress");
}

 } else {
xmlWriter.writeStartElement("senderAddress");
 }


  if (localSenderAddress==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("senderAddress cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderAddress));
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"subject", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"subject");
}

 } else {
xmlWriter.writeStartElement("subject");
 }


  if (localSubject==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("subject cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localSubject);
 
  }
 
xmlWriter.writeEndElement();
  
 if (localPriority==null){
 throw new org.apache.axis2.databinding.ADBException("priority cannot be null!!");
 }
localPriority.serialize(new javax.xml.namespace.QName("","priority"),
 factory,xmlWriter);

 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"message", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"message");
}

 } else {
xmlWriter.writeStartElement("message");
 }


 if (localMessage!=null)
 {
 xmlWriter.writeDataHandler(localMessage);
 }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"dateTime", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"dateTime");
}

 } else {
xmlWriter.writeStartElement("dateTime");
 }


  if (localDateTime==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("dateTime cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDateTime));
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"messageIdentifier"));
 
if (localMessageIdentifier != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMessageIdentifier));
} else {
throw new org.apache.axis2.databinding.ADBException("messageIdentifier cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"messageServiceActivationNumber"));
 
if (localMessageServiceActivationNumber != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMessageServiceActivationNumber));
} else {
throw new org.apache.axis2.databinding.ADBException("messageServiceActivationNumber cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"senderAddress"));
 
if (localSenderAddress != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderAddress));
} else {
throw new org.apache.axis2.databinding.ADBException("senderAddress cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"subject"));
 
if (localSubject != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSubject));
} else {
throw new org.apache.axis2.databinding.ADBException("subject cannot be null!!");
}
 
 elementList.add(new javax.xml.namespace.QName("",
"priority"));
 
 
 if (localPriority==null){
 throw new org.apache.axis2.databinding.ADBException("priority cannot be null!!");
 }
 elementList.add(localPriority);

elementList.add(new javax.xml.namespace.QName("",
"message"));

 elementList.add(localMessage);

elementList.add(new javax.xml.namespace.QName("",
"dateTime"));
 
if (localDateTime != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDateTime));
} else {
throw new org.apache.axis2.databinding.ADBException("dateTime cannot be null!!");
}
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static MessageReference parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 MessageReference object =
new MessageReference();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"MessageReference".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (MessageReference)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","messageIdentifier").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setMessageIdentifier(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","messageServiceActivationNumber").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setMessageServiceActivationNumber(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","senderAddress").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setSenderAddress(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","subject").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setSubject(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","priority").equals(reader.getName())){

object.setPriority(MessagePriority.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","message").equals(reader.getName())){
reader.next();
 if (isReaderMTOMAware(reader)
 &&
 java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_BINARY)))
 {
//MTOM aware reader - get the datahandler directly and put it in the object
object.setMessage(
(javax.activation.DataHandler) reader.getProperty(org.apache.axiom.om.OMConstants.DATA_HANDLER));
 } else {
if (reader.getEventType() == javax.xml.stream.XMLStreamConstants.START_ELEMENT && reader.getName().equals(new javax.xml.namespace.QName(org.apache.axiom.om.impl.MTOMConstants.XOP_NAMESPACE_URI, org.apache.axiom.om.impl.MTOMConstants.XOP_INCLUDE)))
{
 java.lang.String id = org.apache.axiom.om.util.ElementHelper.getContentID(reader, "UTF-8");
 object.setMessage(((org.apache.axiom.soap.impl.builder.MTOMStAXSOAPModelBuilder) ((org.apache.axiom.om.impl.llom.OMStAXWrapper) reader).getBuilder()).getDataHandler(id));
 reader.next();
 
reader.next();
 
} else if(reader.hasText()) {
 //Do the usual conversion
 java.lang.String content = reader.getText();
 object.setMessage(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToBase64Binary(content));
 
reader.next();
 
}
 }


reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","dateTime").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setDateTime(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class APRegistrationRsp
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ap",
"APRegistrationRsp",
"ns2");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ap")){
return "ns2";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for RegResult
*/


 protected APRegResult localRegResult ;


/**
* Auto generated getter method
* @return APRegResult
*/
public  APRegResult getRegResult(){
 return localRegResult;
}



 /**
 * Auto generated setter method
 * @param param RegResult
 */
 public void setRegResult(APRegResult param){
 
 this.localRegResult=param;
 

 }
 

/**
* field for NextInterval
*/


 protected int localNextInterval ;


/**
* Auto generated getter method
* @return int
*/
public  int getNextInterval(){
 return localNextInterval;
}



 /**
 * Auto generated setter method
 * @param param NextInterval
 */
 public void setNextInterval(int param){
 
 this.localNextInterval=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 APRegistrationRsp.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":APRegistrationRsp",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"APRegistrationRsp",
xmlWriter);
}

 
}
 
 if (localRegResult==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"RegResult", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"RegResult");
 }

} else {
 xmlWriter.writeStartElement("RegResult");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localRegResult.serialize(new javax.xml.namespace.QName("","RegResult"),
factory,xmlWriter);
 }

 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"NextInterval", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"NextInterval");
}

 } else {
xmlWriter.writeStartElement("NextInterval");
 }

 if (localNextInterval==java.lang.Integer.MIN_VALUE) {

 throw new org.apache.axis2.databinding.ADBException("NextInterval cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNextInterval));
 }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


 elementList.add(new javax.xml.namespace.QName("",
"RegResult"));
 
 
 elementList.add(localRegResult==null?null:
 localRegResult);

elementList.add(new javax.xml.namespace.QName("",
"NextInterval"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNextInterval));
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static APRegistrationRsp parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 APRegistrationRsp object =
new APRegistrationRsp();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"APRegistrationRsp".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (APRegistrationRsp)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","RegResult").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setRegResult(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setRegResult(APRegResult.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","NextInterval").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setNextInterval(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class RetrievalStatus
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/location",
"RetrievalStatus",
"ns5");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/location")){
return "ns5";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for RetrievalStatus
*/


 protected java.lang.String localRetrievalStatus ;

 private static java.util.HashMap _table_ = new java.util.HashMap();

 // Constructor
 
protected RetrievalStatus(java.lang.String value, boolean isRegisterValue) {
 localRetrievalStatus = value;
 if (isRegisterValue){

 _table_.put(localRetrievalStatus, this);

 }

}
 
 public static final java.lang.String _Retrieved =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Retrieved");

 public static final java.lang.String _NotRetrieved =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("NotRetrieved");

 public static final java.lang.String _Error =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Error");

public static final RetrievalStatus Retrieved =
 new RetrievalStatus(_Retrieved,true);
 
public static final RetrievalStatus NotRetrieved =
 new RetrievalStatus(_NotRetrieved,true);
 
public static final RetrievalStatus Error =
 new RetrievalStatus(_Error,true);
 

public java.lang.String getValue() { return localRetrievalStatus;}

public boolean equals(java.lang.Object obj) {return (obj == this);}
public int hashCode() { return toString().hashCode();}
public java.lang.String toString() {

return localRetrievalStatus.toString();
 

}



  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 RetrievalStatus.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 

//We can safely assume an element has only one type associated with it

 java.lang.String namespace = parentQName.getNamespaceURI();
 java.lang.String localName = parentQName.getLocalPart();

 if (! namespace.equals("")) {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix, localName, namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace, localName);
}

 } else {
xmlWriter.writeStartElement(localName);
 }

 // add the type details if this is used in a simple type
 if (serializeType){
java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/location");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":RetrievalStatus",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"RetrievalStatus",
xmlWriter);
}
 }
 
  if (localRetrievalStatus==null){
 
  throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

 }else{

 xmlWriter.writeCharacters(localRetrievalStatus);
 
 }
 
 xmlWriter.writeEndElement();

 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{




//We can safely assume an element has only one type associated with it
 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
 new java.lang.Object[]{
 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRetrievalStatus)
 },
 null);

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{



public static RetrievalStatus fromValue(java.lang.String value)
throws java.lang.IllegalArgumentException {
 RetrievalStatus enumeration = (RetrievalStatus)
 
 _table_.get(value);


 if (enumeration==null) throw new java.lang.IllegalArgumentException();
 return enumeration;
}
public static RetrievalStatus fromString(java.lang.String value,java.lang.String namespaceURI)
throws java.lang.IllegalArgumentException {
 try {
 
 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


 } catch (java.lang.Exception e) {
throw new java.lang.IllegalArgumentException();
 }
}

public static RetrievalStatus fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
 java.lang.String content) {
 if (content.indexOf(":") > -1){
java.lang.String prefix = content.substring(0,content.indexOf(":"));
java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
return RetrievalStatus.Factory.fromString(content,namespaceUri);
 } else {
 return RetrievalStatus.Factory.fromString(content,"");
 }
}
 

/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static RetrievalStatus parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 RetrievalStatus object = null;
// initialize a hash map to keep values
java.util.Map attributeMap = new java.util.HashMap();
java.util.List extraAttributeList = new java.util.ArrayList();
 

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
while(!reader.isEndElement()) {
 if (reader.isStartElement()  || reader.hasText()){

 java.lang.String content = reader.getElementText();
 
if (content.indexOf(":") > 0) {
 // this seems to be a Qname so find the namespace and send
 prefix = content.substring(0, content.indexOf(":"));
 namespaceuri = reader.getNamespaceURI(prefix);
 object = RetrievalStatus.Factory.fromString(content,namespaceuri);
} else {
 // this seems to be not a qname send and empty namespace incase of it is
 // check is done in fromString method
 object = RetrievalStatus.Factory.fromString(content,"");
}


  } else {
reader.next();
  }  
}  // end of while loop




 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class SendPushResponse
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/wap",
"sendPushResponse",
"ns3");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/wap")){
return "ns3";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for RequestIdentifier
*/


 protected java.lang.String localRequestIdentifier ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getRequestIdentifier(){
 return localRequestIdentifier;
}



 /**
 * Auto generated setter method
 * @param param RequestIdentifier
 */
 public void setRequestIdentifier(java.lang.String param){
 
 this.localRequestIdentifier=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 SendPushResponse.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/wap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":sendPushResponse",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"sendPushResponse",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"requestIdentifier", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"requestIdentifier");
}

 } else {
xmlWriter.writeStartElement("requestIdentifier");
 }


  if (localRequestIdentifier==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("requestIdentifier cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localRequestIdentifier);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"requestIdentifier"));
 
if (localRequestIdentifier != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestIdentifier));
} else {
throw new org.apache.axis2.databinding.ADBException("requestIdentifier cannot be null!!");
}
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static SendPushResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 SendPushResponse object =
new SendPushResponse();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"sendPushResponse".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (SendPushResponse)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","requestIdentifier").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setRequestIdentifier(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class AlarmReq
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ap",
"AlarmReq",
"ns2");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ap")){
return "ns2";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for AlarmId
*/


 protected java.lang.String localAlarmId ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getAlarmId(){
 return localAlarmId;
}



 /**
 * Auto generated setter method
 * @param param AlarmId
 */
 public void setAlarmId(java.lang.String param){
 
 this.localAlarmId=param;
 

 }
 

/**
* field for Orgseverity
*/


 protected int localOrgseverity ;


/**
* Auto generated getter method
* @return int
*/
public  int getOrgseverity(){
 return localOrgseverity;
}



 /**
 * Auto generated setter method
 * @param param Orgseverity
 */
 public void setOrgseverity(int param){
 
 this.localOrgseverity=param;
 

 }
 

/**
* field for Orgtype
*/


 protected int localOrgtype ;


/**
* Auto generated getter method
* @return int
*/
public  int getOrgtype(){
 return localOrgtype;
}



 /**
 * Auto generated setter method
 * @param param Orgtype
 */
 public void setOrgtype(int param){
 
 this.localOrgtype=param;
 

 }
 

/**
* field for Probablecause
*/


 protected java.lang.String localProbablecause ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getProbablecause(){
 return localProbablecause;
}



 /**
 * Auto generated setter method
 * @param param Probablecause
 */
 public void setProbablecause(java.lang.String param){
 
 this.localProbablecause=param;
 

 }
 

/**
* field for EventTime
*/


 protected java.lang.String localEventTime ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getEventTime(){
 return localEventTime;
}



 /**
 * Auto generated setter method
 * @param param EventTime
 */
 public void setEventTime(java.lang.String param){
 
 this.localEventTime=param;
 

 }
 

/**
* field for AckTime
*/


 protected java.lang.String localAckTime ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getAckTime(){
 return localAckTime;
}



 /**
 * Auto generated setter method
 * @param param AckTime
 */
 public void setAckTime(java.lang.String param){
 
 this.localAckTime=param;
 

 }
 

/**
* field for ClearTime
*/


 protected java.lang.String localClearTime ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getClearTime(){
 return localClearTime;
}



 /**
 * Auto generated setter method
 * @param param ClearTime
 */
 public void setClearTime(java.lang.String param){
 
 this.localClearTime=param;
 

 }
 

/**
* field for Activestatus
*/


 protected int localActivestatus ;


/**
* Auto generated getter method
* @return int
*/
public  int getActivestatus(){
 return localActivestatus;
}



 /**
 * Auto generated setter method
 * @param param Activestatus
 */
 public void setActivestatus(int param){
 
 this.localActivestatus=param;
 

 }
 

/**
* field for Alarmtitle
*/


 protected java.lang.String localAlarmtitle ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getAlarmtitle(){
 return localAlarmtitle;
}



 /**
 * Auto generated setter method
 * @param param Alarmtitle
 */
 public void setAlarmtitle(java.lang.String param){
 
 this.localAlarmtitle=param;
 

 }
 

/**
* field for AlarmText
*/


 protected java.lang.String localAlarmText ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getAlarmText(){
 return localAlarmText;
}



 /**
 * Auto generated setter method
 * @param param AlarmText
 */
 public void setAlarmText(java.lang.String param){
 
 this.localAlarmText=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 AlarmReq.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":AlarmReq",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"AlarmReq",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"alarmId", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"alarmId");
}

 } else {
xmlWriter.writeStartElement("alarmId");
 }


  if (localAlarmId==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("alarmId cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localAlarmId);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"orgseverity", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"orgseverity");
}

 } else {
xmlWriter.writeStartElement("orgseverity");
 }

 if (localOrgseverity==java.lang.Integer.MIN_VALUE) {

 throw new org.apache.axis2.databinding.ADBException("orgseverity cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOrgseverity));
 }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"orgtype", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"orgtype");
}

 } else {
xmlWriter.writeStartElement("orgtype");
 }

 if (localOrgtype==java.lang.Integer.MIN_VALUE) {

 throw new org.apache.axis2.databinding.ADBException("orgtype cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOrgtype));
 }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"probablecause", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"probablecause");
}

 } else {
xmlWriter.writeStartElement("probablecause");
 }


  if (localProbablecause==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("probablecause cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localProbablecause);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"eventTime", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"eventTime");
}

 } else {
xmlWriter.writeStartElement("eventTime");
 }


  if (localEventTime==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("eventTime cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localEventTime);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ackTime", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ackTime");
}

 } else {
xmlWriter.writeStartElement("ackTime");
 }


  if (localAckTime==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("ackTime cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localAckTime);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"clearTime", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"clearTime");
}

 } else {
xmlWriter.writeStartElement("clearTime");
 }


  if (localClearTime==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("clearTime cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localClearTime);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"activestatus", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"activestatus");
}

 } else {
xmlWriter.writeStartElement("activestatus");
 }

 if (localActivestatus==java.lang.Integer.MIN_VALUE) {

 throw new org.apache.axis2.databinding.ADBException("activestatus cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localActivestatus));
 }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"alarmtitle", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"alarmtitle");
}

 } else {
xmlWriter.writeStartElement("alarmtitle");
 }


  if (localAlarmtitle==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("alarmtitle cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localAlarmtitle);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"alarmText", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"alarmText");
}

 } else {
xmlWriter.writeStartElement("alarmText");
 }


  if (localAlarmText==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("alarmText cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localAlarmText);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"alarmId"));
 
if (localAlarmId != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAlarmId));
} else {
throw new org.apache.axis2.databinding.ADBException("alarmId cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"orgseverity"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOrgseverity));
 
elementList.add(new javax.xml.namespace.QName("",
"orgtype"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOrgtype));
 
elementList.add(new javax.xml.namespace.QName("",
"probablecause"));
 
if (localProbablecause != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProbablecause));
} else {
throw new org.apache.axis2.databinding.ADBException("probablecause cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"eventTime"));
 
if (localEventTime != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEventTime));
} else {
throw new org.apache.axis2.databinding.ADBException("eventTime cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"ackTime"));
 
if (localAckTime != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAckTime));
} else {
throw new org.apache.axis2.databinding.ADBException("ackTime cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"clearTime"));
 
if (localClearTime != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localClearTime));
} else {
throw new org.apache.axis2.databinding.ADBException("clearTime cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"activestatus"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localActivestatus));
 
elementList.add(new javax.xml.namespace.QName("",
"alarmtitle"));
 
if (localAlarmtitle != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAlarmtitle));
} else {
throw new org.apache.axis2.databinding.ADBException("alarmtitle cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"alarmText"));
 
if (localAlarmText != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAlarmText));
} else {
throw new org.apache.axis2.databinding.ADBException("alarmText cannot be null!!");
}
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static AlarmReq parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 AlarmReq object =
new AlarmReq();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"AlarmReq".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (AlarmReq)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","alarmId").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAlarmId(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","orgseverity").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setOrgseverity(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","orgtype").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setOrgtype(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","probablecause").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setProbablecause(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","eventTime").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setEventTime(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ackTime").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAckTime(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","clearTime").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setClearTime(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","activestatus").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setActivestatus(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","alarmtitle").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAlarmtitle(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","alarmText").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAlarmText(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class APSvcAuthenticRsp
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ap",
"APSvcAuthenticRsp",
"ns2");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ap")){
return "ns2";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for APid
*/


 protected java.lang.String localAPid ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getAPid(){
 return localAPid;
}



 /**
 * Auto generated setter method
 * @param param APid
 */
 public void setAPid(java.lang.String param){
 
 this.localAPid=param;
 

 }
 

/**
* field for ApSvcAuthResult
*/


 protected java.lang.String localApSvcAuthResult ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApSvcAuthResult(){
 return localApSvcAuthResult;
}



 /**
 * Auto generated setter method
 * @param param ApSvcAuthResult
 */
 public void setApSvcAuthResult(java.lang.String param){
 
 this.localApSvcAuthResult=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 APSvcAuthenticRsp.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":APSvcAuthenticRsp",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"APSvcAuthenticRsp",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"APid", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"APid");
}

 } else {
xmlWriter.writeStartElement("APid");
 }


  if (localAPid==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("APid cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localAPid);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApSvcAuthResult", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApSvcAuthResult");
}

 } else {
xmlWriter.writeStartElement("ApSvcAuthResult");
 }


  if (localApSvcAuthResult==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApSvcAuthResult);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"APid"));
 
if (localAPid != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAPid));
} else {
throw new org.apache.axis2.databinding.ADBException("APid cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"ApSvcAuthResult"));
 
 elementList.add(localApSvcAuthResult==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApSvcAuthResult));
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static APSvcAuthenticRsp parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 APSvcAuthenticRsp object =
new APSvcAuthenticRsp();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"APSvcAuthenticRsp".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (APSvcAuthenticRsp)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","APid").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAPid(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApSvcAuthResult").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApSvcAuthResult(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class APRegResult
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ap",
"APRegResult",
"ns2");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ap")){
return "ns2";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for APRegResult
*/


 protected java.lang.String localAPRegResult ;

 private static java.util.HashMap _table_ = new java.util.HashMap();

 // Constructor
 
protected APRegResult(java.lang.String value, boolean isRegisterValue) {
 localAPRegResult = value;
 if (isRegisterValue){

 _table_.put(localAPRegResult, this);

 }

}
 
 public static final java.lang.String _success =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("success");

 public static final java.lang.String _illegalAP =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("illegalAP");

 public static final java.lang.String _CMAbilityNotSup =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("CMAbilityNotSup");

 public static final java.lang.String _repeatedReg =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("repeatedReg");

 public static final java.lang.String _svcAddrMismatch =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("svcAddrMismatch");

public static final APRegResult success =
 new APRegResult(_success,true);
 
public static final APRegResult illegalAP =
 new APRegResult(_illegalAP,true);
 
public static final APRegResult CMAbilityNotSup =
 new APRegResult(_CMAbilityNotSup,true);
 
public static final APRegResult repeatedReg =
 new APRegResult(_repeatedReg,true);
 
public static final APRegResult svcAddrMismatch =
 new APRegResult(_svcAddrMismatch,true);
 

public java.lang.String getValue() { return localAPRegResult;}

public boolean equals(java.lang.Object obj) {return (obj == this);}
public int hashCode() { return toString().hashCode();}
public java.lang.String toString() {

return localAPRegResult.toString();
 

}



  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 APRegResult.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 

//We can safely assume an element has only one type associated with it

 java.lang.String namespace = parentQName.getNamespaceURI();
 java.lang.String localName = parentQName.getLocalPart();

 if (! namespace.equals("")) {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix, localName, namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace, localName);
}

 } else {
xmlWriter.writeStartElement(localName);
 }

 // add the type details if this is used in a simple type
 if (serializeType){
java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":APRegResult",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"APRegResult",
xmlWriter);
}
 }
 
  if (localAPRegResult==null){
 
  throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

 }else{

 xmlWriter.writeCharacters(localAPRegResult);
 
 }
 
 xmlWriter.writeEndElement();

 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{




//We can safely assume an element has only one type associated with it
 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
 new java.lang.Object[]{
 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAPRegResult)
 },
 null);

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{



public static APRegResult fromValue(java.lang.String value)
throws java.lang.IllegalArgumentException {
 APRegResult enumeration = (APRegResult)
 
 _table_.get(value);


 if (enumeration==null) throw new java.lang.IllegalArgumentException();
 return enumeration;
}
public static APRegResult fromString(java.lang.String value,java.lang.String namespaceURI)
throws java.lang.IllegalArgumentException {
 try {
 
 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


 } catch (java.lang.Exception e) {
throw new java.lang.IllegalArgumentException();
 }
}

public static APRegResult fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
 java.lang.String content) {
 if (content.indexOf(":") > -1){
java.lang.String prefix = content.substring(0,content.indexOf(":"));
java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
return APRegResult.Factory.fromString(content,namespaceUri);
 } else {
 return APRegResult.Factory.fromString(content,"");
 }
}
 

/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static APRegResult parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 APRegResult object = null;
// initialize a hash map to keep values
java.util.Map attributeMap = new java.util.HashMap();
java.util.List extraAttributeList = new java.util.ArrayList();
 

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
while(!reader.isEndElement()) {
 if (reader.isStartElement()  || reader.hasText()){

 java.lang.String content = reader.getElementText();
 
if (content.indexOf(":") > 0) {
 // this seems to be a Qname so find the namespace and send
 prefix = content.substring(0, content.indexOf(":"));
 namespaceuri = reader.getNamespaceURI(prefix);
 object = APRegResult.Factory.fromString(content,namespaceuri);
} else {
 // this seems to be not a qname send and empty namespace incase of it is
 // check is done in fromString method
 object = APRegResult.Factory.fromString(content,"");
}


  } else {
reader.next();
  }  
}  // end of while loop




 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class SendPushRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/wap",
"sendPushRequest",
"ns3");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/wap")){
return "ns3";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for ApplicationID
*/


 protected java.lang.String localApplicationID ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApplicationID(){
 return localApplicationID;
}



 /**
 * Auto generated setter method
 * @param param ApplicationID
 */
 public void setApplicationID(java.lang.String param){
 
 this.localApplicationID=param;
 

 }
 

/**
* field for Addresses
* This was an Array!
*/


 protected org.apache.axis2.databinding.types.URI[] localAddresses ;

/*  This tracker boolean wil be used to detect whether the user called the set method
  *for this attribute. It will be used to determine whether to include this field
*in the serialized XML
*/
protected boolean localAddressesTracker = false ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI[]
*/
public  org.apache.axis2.databinding.types.URI[] getAddresses(){
 return localAddresses;
}





 
/**
 * validate the array for Addresses
 */
protected void validateAddresses(org.apache.axis2.databinding.types.URI[] param){
  
}


  /**
* Auto generated setter method
* @param param Addresses
*/
public void setAddresses(org.apache.axis2.databinding.types.URI[] param){

validateAddresses(param);

 
  if (param != null){
  //update the setting tracker
  localAddressesTracker = true;
  } else {
  localAddressesTracker = false;
 
  }

this.localAddresses=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param org.apache.axis2.databinding.types.URI
  */
  public void addAddresses(org.apache.axis2.databinding.types.URI param){
if (localAddresses == null){
localAddresses = new org.apache.axis2.databinding.types.URI[]{};
}

 
 //update the setting tracker
localAddressesTracker = true;
 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localAddresses);
 list.add(param);
 this.localAddresses =
  (org.apache.axis2.databinding.types.URI[])list.toArray(
 new org.apache.axis2.databinding.types.URI[list.size()]);

  }
  

/**
* field for TargetURL
*/


 protected org.apache.axis2.databinding.types.URI localTargetURL ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI
*/
public  org.apache.axis2.databinding.types.URI getTargetURL(){
 return localTargetURL;
}



 /**
 * Auto generated setter method
 * @param param TargetURL
 */
 public void setTargetURL(org.apache.axis2.databinding.types.URI param){
 
 this.localTargetURL=param;
 

 }
 

/**
* field for ExtendCode
*/


 protected java.lang.String localExtendCode ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getExtendCode(){
 return localExtendCode;
}



 /**
 * Auto generated setter method
 * @param param ExtendCode
 */
 public void setExtendCode(java.lang.String param){
 
 this.localExtendCode=param;
 

 }
 

/**
* field for Subject
*/


 protected java.lang.String localSubject ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getSubject(){
 return localSubject;
}



 /**
 * Auto generated setter method
 * @param param Subject
 */
 public void setSubject(java.lang.String param){
 
 this.localSubject=param;
 

 }
 

/**
* field for ReceiptRequest
*/


 protected boolean localReceiptRequest ;


/**
* Auto generated getter method
* @return boolean
*/
public  boolean getReceiptRequest(){
 return localReceiptRequest;
}



 /**
 * Auto generated setter method
 * @param param ReceiptRequest
 */
 public void setReceiptRequest(boolean param){
 
 this.localReceiptRequest=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 SendPushRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/wap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":sendPushRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"sendPushRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApplicationID", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApplicationID");
}

 } else {
xmlWriter.writeStartElement("ApplicationID");
 }


  if (localApplicationID==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApplicationID);
 
  }
 
xmlWriter.writeEndElement();
if (localAddressesTracker){
  if (localAddresses!=null) {
namespace = "";
boolean emptyNamespace = namespace == null || namespace.length() == 0;
prefix =  emptyNamespace ? null : xmlWriter.getPrefix(namespace);
for (int i = 0;i < localAddresses.length;i++){

 if (localAddresses[i] != null){

if (!emptyNamespace) {
 if (prefix == null) {
java.lang.String prefix2 = generatePrefix(namespace);

xmlWriter.writeStartElement(prefix2,"addresses", namespace);
xmlWriter.writeNamespace(prefix2, namespace);
xmlWriter.setPrefix(prefix2, namespace);

 } else {
xmlWriter.writeStartElement(namespace,"addresses");
 }

} else {
 xmlWriter.writeStartElement("addresses");
}

 
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddresses[i]));
 
xmlWriter.writeEndElement();

} else {

// we have to do nothing since minOccurs is zero
 
}

}
  } else {
 
 throw new org.apache.axis2.databinding.ADBException("addresses cannot be null!!");
 
  }

}
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"targetURL", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"targetURL");
}

 } else {
xmlWriter.writeStartElement("targetURL");
 }


  if (localTargetURL==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("targetURL cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTargetURL));
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ExtendCode", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ExtendCode");
}

 } else {
xmlWriter.writeStartElement("ExtendCode");
 }


  if (localExtendCode==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localExtendCode);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"subject", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"subject");
}

 } else {
xmlWriter.writeStartElement("subject");
 }


  if (localSubject==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("subject cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localSubject);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"receiptRequest", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"receiptRequest");
}

 } else {
xmlWriter.writeStartElement("receiptRequest");
 }

 if (false) {

 throw new org.apache.axis2.databinding.ADBException("receiptRequest cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReceiptRequest));
 }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ApplicationID"));
 
 elementList.add(localApplicationID==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApplicationID));
  if (localAddressesTracker){
 if (localAddresses!=null){
  for (int i = 0;i < localAddresses.length;i++){

 if (localAddresses[i] != null){
  elementList.add(new javax.xml.namespace.QName("",
"addresses"));
  elementList.add(
  org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddresses[i]));
  } else {
  
 // have to do nothing

  }


  }
 } else {

 throw new org.apache.axis2.databinding.ADBException("addresses cannot be null!!");

 }

}
elementList.add(new javax.xml.namespace.QName("",
"targetURL"));
 
if (localTargetURL != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTargetURL));
} else {
throw new org.apache.axis2.databinding.ADBException("targetURL cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"ExtendCode"));
 
 elementList.add(localExtendCode==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExtendCode));
 
elementList.add(new javax.xml.namespace.QName("",
"subject"));
 
if (localSubject != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSubject));
} else {
throw new org.apache.axis2.databinding.ADBException("subject cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"receiptRequest"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReceiptRequest));
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static SendPushRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 SendPushRequest object =
new SendPushRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"sendPushRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (SendPushRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list2 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApplicationID").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApplicationID(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","addresses").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 list2.add(reader.getElementText());
 
 //loop until we find a start element that is not part of this array
 boolean loopDone2 = false;
 while(!loopDone2){
// Ensure we are at the EndElement
while (!reader.isEndElement()){
 reader.next();
}
// Step out of this element
reader.next();
// Step to next element event.
while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();
if (reader.isEndElement()){
 //two continuous end elements means we are exiting the xml structure
 loopDone2 = true;
} else {
 if (new javax.xml.namespace.QName("","addresses").equals(reader.getName())){
 list2.add(reader.getElementText());

 }else{
loopDone2 = true;
 }
}
 }
 // call the converter utility  to convert and set the array
 
 object.setAddresses((org.apache.axis2.databinding.types.URI[])
org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
 org.apache.axis2.databinding.types.URI.class,list2));

}  // End of if for expected property start element

 else {

 }

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","targetURL").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setTargetURL(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ExtendCode").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setExtendCode(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","subject").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setSubject(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","receiptRequest").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setReceiptRequest(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class UssdArray
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
name = UssdArray
Namespace URI = http://www.csapi.org/schema/ussd
Namespace Prefix = ns4
*/
 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ussd")){
return "ns4";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for UssdMessage
*/


 protected java.lang.String localUssdMessage ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getUssdMessage(){
 return localUssdMessage;
}



 /**
 * Auto generated setter method
 * @param param UssdMessage
 */
 public void setUssdMessage(java.lang.String param){
 
 this.localUssdMessage=param;
 

 }
 

/**
* field for UssdReturnRequest
*/


 protected boolean localUssdReturnRequest ;


/**
* Auto generated getter method
* @return boolean
*/
public  boolean getUssdReturnRequest(){
 return localUssdReturnRequest;
}



 /**
 * Auto generated setter method
 * @param param UssdReturnRequest
 */
 public void setUssdReturnRequest(boolean param){
 
 this.localUssdReturnRequest=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



 org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 UssdArray.this.serialize(parentQName,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 parentQName,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ussd");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":UssdArray",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"UssdArray",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ussdMessage", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ussdMessage");
}

 } else {
xmlWriter.writeStartElement("ussdMessage");
 }


  if (localUssdMessage==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("ussdMessage cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localUssdMessage);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ussdReturnRequest", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ussdReturnRequest");
}

 } else {
xmlWriter.writeStartElement("ussdReturnRequest");
 }

 if (false) {

 throw new org.apache.axis2.databinding.ADBException("ussdReturnRequest cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUssdReturnRequest));
 }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ussdMessage"));
 
if (localUssdMessage != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUssdMessage));
} else {
throw new org.apache.axis2.databinding.ADBException("ussdMessage cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"ussdReturnRequest"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUssdReturnRequest));
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static UssdArray parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 UssdArray object =
new UssdArray();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"UssdArray".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (UssdArray)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ussdMessage").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setUssdMessage(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ussdReturnRequest").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setUssdReturnRequest(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class DeliveryInformation0
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
name = DeliveryInformation
Namespace URI = http://www.csapi.org/schema/mms
Namespace Prefix = ns8
*/
 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/mms")){
return "ns8";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Address
*/


 protected org.apache.axis2.databinding.types.URI localAddress ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI
*/
public  org.apache.axis2.databinding.types.URI getAddress(){
 return localAddress;
}



 /**
 * Auto generated setter method
 * @param param Address
 */
 public void setAddress(org.apache.axis2.databinding.types.URI param){
 
 this.localAddress=param;
 

 }
 

/**
* field for DeliveryStatus
*/


 protected DeliveryStatus1 localDeliveryStatus ;


/**
* Auto generated getter method
* @return DeliveryStatus1
*/
public  DeliveryStatus1 getDeliveryStatus(){
 return localDeliveryStatus;
}



 /**
 * Auto generated setter method
 * @param param DeliveryStatus
 */
 public void setDeliveryStatus(DeliveryStatus1 param){
 
 this.localDeliveryStatus=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



 org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 DeliveryInformation0.this.serialize(parentQName,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 parentQName,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/mms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":DeliveryInformation",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"DeliveryInformation",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"address", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"address");
}

 } else {
xmlWriter.writeStartElement("address");
 }


  if (localAddress==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("address cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddress));
 
  }
 
xmlWriter.writeEndElement();
  
 if (localDeliveryStatus==null){
 throw new org.apache.axis2.databinding.ADBException("deliveryStatus cannot be null!!");
 }
localDeliveryStatus.serialize(new javax.xml.namespace.QName("","deliveryStatus"),
 factory,xmlWriter);

 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"address"));
 
if (localAddress != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddress));
} else {
throw new org.apache.axis2.databinding.ADBException("address cannot be null!!");
}
 
 elementList.add(new javax.xml.namespace.QName("",
"deliveryStatus"));
 
 
 if (localDeliveryStatus==null){
 throw new org.apache.axis2.databinding.ADBException("deliveryStatus cannot be null!!");
 }
 elementList.add(localDeliveryStatus);


return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static DeliveryInformation0 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 DeliveryInformation0 object =
new DeliveryInformation0();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"DeliveryInformation".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (DeliveryInformation0)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","address").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAddress(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","deliveryStatus").equals(reader.getName())){

object.setDeliveryStatus(DeliveryStatus1.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class LocationErrorRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/location",
"LocationErrorRequest",
"ns5");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/location")){
return "ns5";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Correlator
*/


 protected java.lang.String localCorrelator ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getCorrelator(){
 return localCorrelator;
}



 /**
 * Auto generated setter method
 * @param param Correlator
 */
 public void setCorrelator(java.lang.String param){
 
 this.localCorrelator=param;
 

 }
 

/**
* field for Address
*/


 protected org.apache.axis2.databinding.types.URI localAddress ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI
*/
public  org.apache.axis2.databinding.types.URI getAddress(){
 return localAddress;
}



 /**
 * Auto generated setter method
 * @param param Address
 */
 public void setAddress(org.apache.axis2.databinding.types.URI param){
 
 this.localAddress=param;
 

 }
 

/**
* field for Reason
*/


 protected ServiceError localReason ;


/**
* Auto generated getter method
* @return ServiceError
*/
public  ServiceError getReason(){
 return localReason;
}



 /**
 * Auto generated setter method
 * @param param Reason
 */
 public void setReason(ServiceError param){
 
 this.localReason=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 LocationErrorRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/location");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":LocationErrorRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"LocationErrorRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"correlator", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"correlator");
}

 } else {
xmlWriter.writeStartElement("correlator");
 }


  if (localCorrelator==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("correlator cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localCorrelator);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Address", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Address");
}

 } else {
xmlWriter.writeStartElement("Address");
 }


  if (localAddress==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddress));
 
  }
 
xmlWriter.writeEndElement();
  
 if (localReason==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"Reason", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"Reason");
 }

} else {
 xmlWriter.writeStartElement("Reason");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localReason.serialize(new javax.xml.namespace.QName("","Reason"),
factory,xmlWriter);
 }

 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"correlator"));
 
if (localCorrelator != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCorrelator));
} else {
throw new org.apache.axis2.databinding.ADBException("correlator cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"Address"));
 
 elementList.add(localAddress==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddress));
 
 elementList.add(new javax.xml.namespace.QName("",
"Reason"));
 
 
 elementList.add(localReason==null?null:
 localReason);


return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static LocationErrorRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 LocationErrorRequest object =
new LocationErrorRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"LocationErrorRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (LocationErrorRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","correlator").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setCorrelator(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Address").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setAddress(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Reason").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setReason(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setReason(ServiceError.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class ServiceExceptionE
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/common/v2_0",
"ServiceException",
"ns1");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/common/v2_0")){
return "ns1";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for ServiceException
*/


 protected ServiceException localServiceException ;


/**
* Auto generated getter method
* @return ServiceException
*/
public  ServiceException getServiceException(){
 return localServiceException;
}



 /**
 * Auto generated setter method
 * @param param ServiceException
 */
 public void setServiceException(ServiceException param){
 
 this.localServiceException=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 ServiceExceptionE.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 

//We can safely assume an element has only one type associated with it

 if (localServiceException==null){
throw new org.apache.axis2.databinding.ADBException("Property cannot be null!");
 }
 localServiceException.serialize(MY_QNAME,factory,xmlWriter);
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{




//We can safely assume an element has only one type associated with it
return localServiceException.getPullParser(MY_QNAME);

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ServiceExceptionE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 ServiceExceptionE object =
new ServiceExceptionE();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
while(!reader.isEndElement()) {
 if (reader.isStartElement() ){

 if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","ServiceException").equals(reader.getName())){

object.setServiceException(ServiceException.Factory.parse(reader));
 
}  // End of if for expected property start element

  else{
// A start element we are not expecting indicates an invalid parameter was passed
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
  }
  
  } else {
reader.next();
  }  
}  // end of while loop




 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class ExtensionMapper{

  public static java.lang.Object getTypeObject(java.lang.String namespaceURI,
 java.lang.String typeName,
 javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{


  if (
  "http://www.csapi.org/schema/wap".equals(namespaceURI) &&
  "DeliveryInformation".equals(typeName)){

 return  DeliveryInformation.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/ap".equals(namespaceURI) &&
  "APLogoutResult".equals(typeName)){

 return  APLogoutResult.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/mms".equals(namespaceURI) &&
  "DeliveryStatus".equals(typeName)){

 return  DeliveryStatus1.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/sms".equals(namespaceURI) &&
  "DeliveryStatus".equals(typeName)){

 return  DeliveryStatusE.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/location".equals(namespaceURI) &&
  "LocationData".equals(typeName)){

 return  LocationData.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/mms".equals(namespaceURI) &&
  "MessageReference".equals(typeName)){

 return  MessageReference.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/location".equals(namespaceURI) &&
  "RetrievalStatus".equals(typeName)){

 return  RetrievalStatus.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/location".equals(namespaceURI) &&
  "Priority".equals(typeName)){

 return  Priority.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/common/v2_0".equals(namespaceURI) &&
  "ServiceException".equals(typeName)){

 return  ServiceException.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/ussd".equals(namespaceURI) &&
  "EndReason".equals(typeName)){

 return  EndReason.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/ap".equals(namespaceURI) &&
  "APRegResult".equals(typeName)){

 return  APRegResult.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/mms".equals(namespaceURI) &&
  "MessagePriority".equals(typeName)){

 return  MessagePriority.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/ussd".equals(namespaceURI) &&
  "UssdArray".equals(typeName)){

 return  UssdArray.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/location".equals(namespaceURI) &&
  "LocType".equals(typeName)){

 return  LocType.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/sms".equals(namespaceURI) &&
  "MessageFormat".equals(typeName)){

 return  MessageFormat.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/location".equals(namespaceURI) &&
  "CoordinateReferenceSystem".equals(typeName)){

 return  CoordinateReferenceSystem.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/common/v2_0".equals(namespaceURI) &&
  "PolicyException".equals(typeName)){

 return  PolicyException.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/location".equals(namespaceURI) &&
  "LocationInfo".equals(typeName)){

 return  LocationInfo.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/wap".equals(namespaceURI) &&
  "DeliveryStatus".equals(typeName)){

 return  DeliveryStatus.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/sms".equals(namespaceURI) &&
  "SMSMessage".equals(typeName)){

 return  SMSMessage.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/sms".equals(namespaceURI) &&
  "DeliveryInformation".equals(typeName)){

 return  DeliveryInformationE.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/common/v2_0".equals(namespaceURI) &&
  "MessageNotificationType".equals(typeName)){

 return  MessageNotificationType.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/common/v2_0".equals(namespaceURI) &&
  "ServiceError".equals(typeName)){

 return  ServiceError.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/mms".equals(namespaceURI) &&
  "DeliveryInformation".equals(typeName)){

 return  DeliveryInformation0.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/common/v2_0".equals(namespaceURI) &&
  "CMAbility".equals(typeName)){

 return  CMAbility.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/sms".equals(namespaceURI) &&
  "SendMethodType".equals(typeName)){

 return  SendMethodType.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/common/v2_0".equals(namespaceURI) &&
  "TimeMetric".equals(typeName)){

 return  TimeMetric.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/mms".equals(namespaceURI) &&
  "MmsMessage".equals(typeName)){

 return  MmsMessage.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/ap".equals(namespaceURI) &&
  "APStatusType".equals(typeName)){

 return  APStatusType.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/location".equals(namespaceURI) &&
  "ServiceType".equals(typeName)){

 return  ServiceType.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/location".equals(namespaceURI) &&
  "DelayTolerance".equals(typeName)){

 return  DelayTolerance.Factory.parse(reader);


  }


  if (
  "http://www.csapi.org/schema/common/v2_0".equals(namespaceURI) &&
  "TimeMetricsValues".equals(typeName)){

 return  TimeMetricsValues.Factory.parse(reader);


  }


  throw new org.apache.axis2.databinding.ADBException("Unsupported type " + namespaceURI + " " + typeName);
  }

}
 
public static class PauseAPRsp
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ap",
"PauseAPRsp",
"ns2");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ap")){
return "ns2";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for ACK
*/


 protected boolean localACK ;


/**
* Auto generated getter method
* @return boolean
*/
public  boolean getACK(){
 return localACK;
}



 /**
 * Auto generated setter method
 * @param param ACK
 */
 public void setACK(boolean param){
 
 this.localACK=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 PauseAPRsp.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":PauseAPRsp",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"PauseAPRsp",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ACK", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ACK");
}

 } else {
xmlWriter.writeStartElement("ACK");
 }

 if (false) {

 throw new org.apache.axis2.databinding.ADBException("ACK cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localACK));
 }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ACK"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localACK));
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static PauseAPRsp parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 PauseAPRsp object =
new PauseAPRsp();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"PauseAPRsp".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (PauseAPRsp)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ACK").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setACK(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class PolicyException
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
name = PolicyException
Namespace URI = http://www.csapi.org/schema/common/v2_0
Namespace Prefix = ns1
*/
 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/common/v2_0")){
return "ns1";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for MessageId
*/


 protected java.lang.String localMessageId ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getMessageId(){
 return localMessageId;
}



 /**
 * Auto generated setter method
 * @param param MessageId
 */
 public void setMessageId(java.lang.String param){
 
 this.localMessageId=param;
 

 }
 

/**
* field for Text
*/


 protected java.lang.String localText ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getText(){
 return localText;
}



 /**
 * Auto generated setter method
 * @param param Text
 */
 public void setText(java.lang.String param){
 
 this.localText=param;
 

 }
 

/**
* field for Variables
* This was an Array!
*/


 protected java.lang.String[] localVariables ;

/*  This tracker boolean wil be used to detect whether the user called the set method
  *for this attribute. It will be used to determine whether to include this field
*in the serialized XML
*/
protected boolean localVariablesTracker = false ;


/**
* Auto generated getter method
* @return java.lang.String[]
*/
public  java.lang.String[] getVariables(){
 return localVariables;
}





 
/**
 * validate the array for Variables
 */
protected void validateVariables(java.lang.String[] param){
  
}


  /**
* Auto generated setter method
* @param param Variables
*/
public void setVariables(java.lang.String[] param){

validateVariables(param);

 
  if (param != null){
  //update the setting tracker
  localVariablesTracker = true;
  } else {
  localVariablesTracker = true;
 
  }

this.localVariables=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param java.lang.String
  */
  public void addVariables(java.lang.String param){
if (localVariables == null){
localVariables = new java.lang.String[]{};
}

 
 //update the setting tracker
localVariablesTracker = true;
 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localVariables);
 list.add(param);
 this.localVariables =
  (java.lang.String[])list.toArray(
 new java.lang.String[list.size()]);

  }
  

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



 org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 PolicyException.this.serialize(parentQName,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 parentQName,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/common/v2_0");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":PolicyException",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"PolicyException",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"MessageId", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"MessageId");
}

 } else {
xmlWriter.writeStartElement("MessageId");
 }


  if (localMessageId==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localMessageId);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Text", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Text");
}

 } else {
xmlWriter.writeStartElement("Text");
 }


  if (localText==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localText);
 
  }
 
xmlWriter.writeEndElement();
if (localVariablesTracker){
  if (localVariables!=null) {
namespace = "";
boolean emptyNamespace = namespace == null || namespace.length() == 0;
prefix =  emptyNamespace ? null : xmlWriter.getPrefix(namespace);
for (int i = 0;i < localVariables.length;i++){

 if (localVariables[i] != null){

if (!emptyNamespace) {
 if (prefix == null) {
java.lang.String prefix2 = generatePrefix(namespace);

xmlWriter.writeStartElement(prefix2,"Variables", namespace);
xmlWriter.writeNamespace(prefix2, namespace);
xmlWriter.setPrefix(prefix2, namespace);

 } else {
xmlWriter.writeStartElement(namespace,"Variables");
 }

} else {
 xmlWriter.writeStartElement("Variables");
}

 
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVariables[i]));
 
xmlWriter.writeEndElement();

} else {

// write null attribute
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Variables", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Variables");
}

 } else {
xmlWriter.writeStartElement("Variables");
 }
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
 xmlWriter.writeEndElement();
 
}

}
  } else {
 
 // write the null attribute
// write null attribute
 java.lang.String namespace2 = "";
 if (! namespace2.equals("")) {
java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

if (prefix2 == null) {
 prefix2 = generatePrefix(namespace2);

 xmlWriter.writeStartElement(prefix2,"Variables", namespace2);
 xmlWriter.writeNamespace(prefix2, namespace2);
 xmlWriter.setPrefix(prefix2, namespace2);

} else {
 xmlWriter.writeStartElement(namespace2,"Variables");
}

 } else {
xmlWriter.writeStartElement("Variables");
 }

// write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 
  }

}
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"MessageId"));
 
 elementList.add(localMessageId==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMessageId));
 
elementList.add(new javax.xml.namespace.QName("",
"Text"));
 
 elementList.add(localText==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localText));
  if (localVariablesTracker){
 if (localVariables!=null){
  for (int i = 0;i < localVariables.length;i++){

 if (localVariables[i] != null){
  elementList.add(new javax.xml.namespace.QName("",
"Variables"));
  elementList.add(
  org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVariables[i]));
  } else {
  
 elementList.add(new javax.xml.namespace.QName("",
"Variables"));
 elementList.add(null);

  }


  }
 } else {

 elementList.add(new javax.xml.namespace.QName("",
"Variables"));
 elementList.add(null);

 }

}

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static PolicyException parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 PolicyException object =
new PolicyException();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"PolicyException".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (PolicyException)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list3 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","MessageId").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setMessageId(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Text").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setText(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Variables").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 
nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  list3.add(null);
 
  reader.next();
} else {
 list3.add(reader.getElementText());
 }
 //loop until we find a start element that is not part of this array
 boolean loopDone3 = false;
 while(!loopDone3){
// Ensure we are at the EndElement
while (!reader.isEndElement()){
 reader.next();
}
// Step out of this element
reader.next();
// Step to next element event.
while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();
if (reader.isEndElement()){
 //two continuous end elements means we are exiting the xml structure
 loopDone3 = true;
} else {
 if (new javax.xml.namespace.QName("","Variables").equals(reader.getName())){
 
  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
list3.add(null);

reader.next();
  } else {
list3.add(reader.getElementText());
}
 }else{
loopDone3 = true;
 }
}
 }
 // call the converter utility  to convert and set the array
 
 object.setVariables((java.lang.String[])
list3.toArray(new java.lang.String[list3.size()]));

}  // End of if for expected property start element

 else {

 }
  
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class UssdContinueRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ussd",
"ussdContinueRequest",
"ns4");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ussd")){
return "ns4";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for UssdIdentifier
*/


 protected java.lang.String localUssdIdentifier ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getUssdIdentifier(){
 return localUssdIdentifier;
}



 /**
 * Auto generated setter method
 * @param param UssdIdentifier
 */
 public void setUssdIdentifier(java.lang.String param){
 
 this.localUssdIdentifier=param;
 

 }
 

/**
* field for UssdMessage
*/


 protected UssdArray localUssdMessage ;


/**
* Auto generated getter method
* @return UssdArray
*/
public  UssdArray getUssdMessage(){
 return localUssdMessage;
}



 /**
 * Auto generated setter method
 * @param param UssdMessage
 */
 public void setUssdMessage(UssdArray param){
 
 this.localUssdMessage=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 UssdContinueRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ussd");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":ussdContinueRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"ussdContinueRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ussdIdentifier", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ussdIdentifier");
}

 } else {
xmlWriter.writeStartElement("ussdIdentifier");
 }


  if (localUssdIdentifier==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("ussdIdentifier cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localUssdIdentifier);
 
  }
 
xmlWriter.writeEndElement();
  
 if (localUssdMessage==null){
 throw new org.apache.axis2.databinding.ADBException("ussdMessage cannot be null!!");
 }
localUssdMessage.serialize(new javax.xml.namespace.QName("","ussdMessage"),
 factory,xmlWriter);

 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ussdIdentifier"));
 
if (localUssdIdentifier != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUssdIdentifier));
} else {
throw new org.apache.axis2.databinding.ADBException("ussdIdentifier cannot be null!!");
}
 
 elementList.add(new javax.xml.namespace.QName("",
"ussdMessage"));
 
 
 if (localUssdMessage==null){
 throw new org.apache.axis2.databinding.ADBException("ussdMessage cannot be null!!");
 }
 elementList.add(localUssdMessage);


return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static UssdContinueRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 UssdContinueRequest object =
new UssdContinueRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"ussdContinueRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (UssdContinueRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ussdIdentifier").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setUssdIdentifier(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ussdMessage").equals(reader.getName())){

object.setUssdMessage(UssdArray.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class SMSMessage
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
name = SMSMessage
Namespace URI = http://www.csapi.org/schema/sms
Namespace Prefix = ns7
*/
 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/sms")){
return "ns7";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Message
*/


 protected java.lang.String localMessage ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getMessage(){
 return localMessage;
}



 /**
 * Auto generated setter method
 * @param param Message
 */
 public void setMessage(java.lang.String param){
 
 this.localMessage=param;
 

 }
 

/**
* field for SmsServiceActivationNumber
*/


 protected org.apache.axis2.databinding.types.URI localSmsServiceActivationNumber ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI
*/
public  org.apache.axis2.databinding.types.URI getSmsServiceActivationNumber(){
 return localSmsServiceActivationNumber;
}



 /**
 * Auto generated setter method
 * @param param SmsServiceActivationNumber
 */
 public void setSmsServiceActivationNumber(org.apache.axis2.databinding.types.URI param){
 
 this.localSmsServiceActivationNumber=param;
 

 }
 

/**
* field for SenderAddress
*/


 protected org.apache.axis2.databinding.types.URI localSenderAddress ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI
*/
public  org.apache.axis2.databinding.types.URI getSenderAddress(){
 return localSenderAddress;
}



 /**
 * Auto generated setter method
 * @param param SenderAddress
 */
 public void setSenderAddress(org.apache.axis2.databinding.types.URI param){
 
 this.localSenderAddress=param;
 

 }
 

/**
* field for MessageFormat
*/


 protected MessageFormat localMessageFormat ;


/**
* Auto generated getter method
* @return MessageFormat
*/
public  MessageFormat getMessageFormat(){
 return localMessageFormat;
}



 /**
 * Auto generated setter method
 * @param param MessageFormat
 */
 public void setMessageFormat(MessageFormat param){
 
 this.localMessageFormat=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



 org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 SMSMessage.this.serialize(parentQName,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 parentQName,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/sms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":SMSMessage",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"SMSMessage",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Message", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Message");
}

 } else {
xmlWriter.writeStartElement("Message");
 }


  if (localMessage==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localMessage);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"SmsServiceActivationNumber", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"SmsServiceActivationNumber");
}

 } else {
xmlWriter.writeStartElement("SmsServiceActivationNumber");
 }


  if (localSmsServiceActivationNumber==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSmsServiceActivationNumber));
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"SenderAddress", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"SenderAddress");
}

 } else {
xmlWriter.writeStartElement("SenderAddress");
 }


  if (localSenderAddress==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderAddress));
 
  }
 
xmlWriter.writeEndElement();
  
 if (localMessageFormat==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"MessageFormat", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"MessageFormat");
 }

} else {
 xmlWriter.writeStartElement("MessageFormat");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localMessageFormat.serialize(new javax.xml.namespace.QName("","MessageFormat"),
factory,xmlWriter);
 }

 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"Message"));
 
 elementList.add(localMessage==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMessage));
 
elementList.add(new javax.xml.namespace.QName("",
"SmsServiceActivationNumber"));
 
 elementList.add(localSmsServiceActivationNumber==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSmsServiceActivationNumber));
 
elementList.add(new javax.xml.namespace.QName("",
"SenderAddress"));
 
 elementList.add(localSenderAddress==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderAddress));
 
 elementList.add(new javax.xml.namespace.QName("",
"MessageFormat"));
 
 
 elementList.add(localMessageFormat==null?null:
 localMessageFormat);


return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static SMSMessage parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 SMSMessage object =
new SMSMessage();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"SMSMessage".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (SMSMessage)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Message").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setMessage(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","SmsServiceActivationNumber").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setSmsServiceActivationNumber(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","SenderAddress").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setSenderAddress(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","MessageFormat").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setMessageFormat(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setMessageFormat(MessageFormat.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class MessageNotificationType
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
name = MessageNotificationType
Namespace URI = http://www.csapi.org/schema/common/v2_0
Namespace Prefix = ns1
*/
 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/common/v2_0")){
return "ns1";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for CMAbility
*/


 protected CMAbility localCMAbility ;


/**
* Auto generated getter method
* @return CMAbility
*/
public  CMAbility getCMAbility(){
 return localCMAbility;
}



 /**
 * Auto generated setter method
 * @param param CMAbility
 */
 public void setCMAbility(CMAbility param){
 
 this.localCMAbility=param;
 

 }
 

/**
* field for WSURI
* This was an Array!
*/


 protected org.apache.axis2.databinding.types.URI[] localWSURI ;

/*  This tracker boolean wil be used to detect whether the user called the set method
  *for this attribute. It will be used to determine whether to include this field
*in the serialized XML
*/
protected boolean localWSURITracker = false ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI[]
*/
public  org.apache.axis2.databinding.types.URI[] getWSURI(){
 return localWSURI;
}





 
/**
 * validate the array for WSURI
 */
protected void validateWSURI(org.apache.axis2.databinding.types.URI[] param){
  
}


  /**
* Auto generated setter method
* @param param WSURI
*/
public void setWSURI(org.apache.axis2.databinding.types.URI[] param){

validateWSURI(param);

 
  if (param != null){
  //update the setting tracker
  localWSURITracker = true;
  } else {
  localWSURITracker = false;
 
  }

this.localWSURI=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param org.apache.axis2.databinding.types.URI
  */
  public void addWSURI(org.apache.axis2.databinding.types.URI param){
if (localWSURI == null){
localWSURI = new org.apache.axis2.databinding.types.URI[]{};
}

 
 //update the setting tracker
localWSURITracker = true;
 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localWSURI);
 list.add(param);
 this.localWSURI =
  (org.apache.axis2.databinding.types.URI[])list.toArray(
 new org.apache.axis2.databinding.types.URI[list.size()]);

  }
  

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



 org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 MessageNotificationType.this.serialize(parentQName,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 parentQName,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/common/v2_0");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":MessageNotificationType",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"MessageNotificationType",
xmlWriter);
}

 
}
 
 if (localCMAbility==null){
 throw new org.apache.axis2.databinding.ADBException("CMAbility cannot be null!!");
 }
localCMAbility.serialize(new javax.xml.namespace.QName("","CMAbility"),
 factory,xmlWriter);
 if (localWSURITracker){
  if (localWSURI!=null) {
namespace = "";
boolean emptyNamespace = namespace == null || namespace.length() == 0;
prefix =  emptyNamespace ? null : xmlWriter.getPrefix(namespace);
for (int i = 0;i < localWSURI.length;i++){

 if (localWSURI[i] != null){

if (!emptyNamespace) {
 if (prefix == null) {
java.lang.String prefix2 = generatePrefix(namespace);

xmlWriter.writeStartElement(prefix2,"WSURI", namespace);
xmlWriter.writeNamespace(prefix2, namespace);
xmlWriter.setPrefix(prefix2, namespace);

 } else {
xmlWriter.writeStartElement(namespace,"WSURI");
 }

} else {
 xmlWriter.writeStartElement("WSURI");
}

 
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWSURI[i]));
 
xmlWriter.writeEndElement();

} else {

// we have to do nothing since minOccurs is zero
 
}

}
  } else {
 
 throw new org.apache.axis2.databinding.ADBException("WSURI cannot be null!!");
 
  }

}
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


 elementList.add(new javax.xml.namespace.QName("",
"CMAbility"));
 
 
 if (localCMAbility==null){
 throw new org.apache.axis2.databinding.ADBException("CMAbility cannot be null!!");
 }
 elementList.add(localCMAbility);
 if (localWSURITracker){
 if (localWSURI!=null){
  for (int i = 0;i < localWSURI.length;i++){

 if (localWSURI[i] != null){
  elementList.add(new javax.xml.namespace.QName("",
"WSURI"));
  elementList.add(
  org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localWSURI[i]));
  } else {
  
 // have to do nothing

  }


  }
 } else {

 throw new org.apache.axis2.databinding.ADBException("WSURI cannot be null!!");

 }

}

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static MessageNotificationType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 MessageNotificationType object =
new MessageNotificationType();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"MessageNotificationType".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (MessageNotificationType)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list2 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","CMAbility").equals(reader.getName())){

object.setCMAbility(CMAbility.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","WSURI").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 list2.add(reader.getElementText());
 
 //loop until we find a start element that is not part of this array
 boolean loopDone2 = false;
 while(!loopDone2){
// Ensure we are at the EndElement
while (!reader.isEndElement()){
 reader.next();
}
// Step out of this element
reader.next();
// Step to next element event.
while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();
if (reader.isEndElement()){
 //two continuous end elements means we are exiting the xml structure
 loopDone2 = true;
} else {
 if (new javax.xml.namespace.QName("","WSURI").equals(reader.getName())){
 list2.add(reader.getElementText());

 }else{
loopDone2 = true;
 }
}
 }
 // call the converter utility  to convert and set the array
 
 object.setWSURI((org.apache.axis2.databinding.types.URI[])
org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
 org.apache.axis2.databinding.types.URI.class,list2));

}  // End of if for expected property start element

 else {

 }
  
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class APSvcPerfReportReq
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ap",
"APSvcPerfReportReq",
"ns2");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ap")){
return "ns2";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for APid
*/


 protected java.lang.String localAPid ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getAPid(){
 return localAPid;
}



 /**
 * Auto generated setter method
 * @param param APid
 */
 public void setAPid(java.lang.String param){
 
 this.localAPid=param;
 

 }
 

/**
* field for ApSvcPerfData
*/


 protected java.lang.String localApSvcPerfData ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApSvcPerfData(){
 return localApSvcPerfData;
}



 /**
 * Auto generated setter method
 * @param param ApSvcPerfData
 */
 public void setApSvcPerfData(java.lang.String param){
 
 this.localApSvcPerfData=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 APSvcPerfReportReq.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":APSvcPerfReportReq",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"APSvcPerfReportReq",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"APid", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"APid");
}

 } else {
xmlWriter.writeStartElement("APid");
 }


  if (localAPid==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("APid cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localAPid);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApSvcPerfData", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApSvcPerfData");
}

 } else {
xmlWriter.writeStartElement("ApSvcPerfData");
 }


  if (localApSvcPerfData==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApSvcPerfData);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"APid"));
 
if (localAPid != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAPid));
} else {
throw new org.apache.axis2.databinding.ADBException("APid cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"ApSvcPerfData"));
 
 elementList.add(localApSvcPerfData==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApSvcPerfData));
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static APSvcPerfReportReq parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 APSvcPerfReportReq object =
new APSvcPerfReportReq();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"APSvcPerfReportReq".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (APSvcPerfReportReq)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","APid").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAPid(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApSvcPerfData").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApSvcPerfData(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class ServiceError
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
name = ServiceError
Namespace URI = http://www.csapi.org/schema/common/v2_0
Namespace Prefix = ns1
*/
 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/common/v2_0")){
return "ns1";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for MessageId
*/


 protected java.lang.String localMessageId ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getMessageId(){
 return localMessageId;
}



 /**
 * Auto generated setter method
 * @param param MessageId
 */
 public void setMessageId(java.lang.String param){
 
 this.localMessageId=param;
 

 }
 

/**
* field for Text
*/


 protected java.lang.String localText ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getText(){
 return localText;
}



 /**
 * Auto generated setter method
 * @param param Text
 */
 public void setText(java.lang.String param){
 
 this.localText=param;
 

 }
 

/**
* field for Variables
* This was an Array!
*/


 protected java.lang.String[] localVariables ;

/*  This tracker boolean wil be used to detect whether the user called the set method
  *for this attribute. It will be used to determine whether to include this field
*in the serialized XML
*/
protected boolean localVariablesTracker = false ;


/**
* Auto generated getter method
* @return java.lang.String[]
*/
public  java.lang.String[] getVariables(){
 return localVariables;
}





 
/**
 * validate the array for Variables
 */
protected void validateVariables(java.lang.String[] param){
  
}


  /**
* Auto generated setter method
* @param param Variables
*/
public void setVariables(java.lang.String[] param){

validateVariables(param);

 
  if (param != null){
  //update the setting tracker
  localVariablesTracker = true;
  } else {
  localVariablesTracker = true;
 
  }

this.localVariables=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param java.lang.String
  */
  public void addVariables(java.lang.String param){
if (localVariables == null){
localVariables = new java.lang.String[]{};
}

 
 //update the setting tracker
localVariablesTracker = true;
 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localVariables);
 list.add(param);
 this.localVariables =
  (java.lang.String[])list.toArray(
 new java.lang.String[list.size()]);

  }
  

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



 org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 ServiceError.this.serialize(parentQName,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 parentQName,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/common/v2_0");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":ServiceError",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"ServiceError",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"MessageId", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"MessageId");
}

 } else {
xmlWriter.writeStartElement("MessageId");
 }


  if (localMessageId==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localMessageId);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Text", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Text");
}

 } else {
xmlWriter.writeStartElement("Text");
 }


  if (localText==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localText);
 
  }
 
xmlWriter.writeEndElement();
if (localVariablesTracker){
  if (localVariables!=null) {
namespace = "";
boolean emptyNamespace = namespace == null || namespace.length() == 0;
prefix =  emptyNamespace ? null : xmlWriter.getPrefix(namespace);
for (int i = 0;i < localVariables.length;i++){

 if (localVariables[i] != null){

if (!emptyNamespace) {
 if (prefix == null) {
java.lang.String prefix2 = generatePrefix(namespace);

xmlWriter.writeStartElement(prefix2,"Variables", namespace);
xmlWriter.writeNamespace(prefix2, namespace);
xmlWriter.setPrefix(prefix2, namespace);

 } else {
xmlWriter.writeStartElement(namespace,"Variables");
 }

} else {
 xmlWriter.writeStartElement("Variables");
}

 
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVariables[i]));
 
xmlWriter.writeEndElement();

} else {

// write null attribute
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Variables", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Variables");
}

 } else {
xmlWriter.writeStartElement("Variables");
 }
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
 xmlWriter.writeEndElement();
 
}

}
  } else {
 
 // write the null attribute
// write null attribute
 java.lang.String namespace2 = "";
 if (! namespace2.equals("")) {
java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

if (prefix2 == null) {
 prefix2 = generatePrefix(namespace2);

 xmlWriter.writeStartElement(prefix2,"Variables", namespace2);
 xmlWriter.writeNamespace(prefix2, namespace2);
 xmlWriter.setPrefix(prefix2, namespace2);

} else {
 xmlWriter.writeStartElement(namespace2,"Variables");
}

 } else {
xmlWriter.writeStartElement("Variables");
 }

// write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 
  }

}
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"MessageId"));
 
 elementList.add(localMessageId==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMessageId));
 
elementList.add(new javax.xml.namespace.QName("",
"Text"));
 
 elementList.add(localText==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localText));
  if (localVariablesTracker){
 if (localVariables!=null){
  for (int i = 0;i < localVariables.length;i++){

 if (localVariables[i] != null){
  elementList.add(new javax.xml.namespace.QName("",
"Variables"));
  elementList.add(
  org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVariables[i]));
  } else {
  
 elementList.add(new javax.xml.namespace.QName("",
"Variables"));
 elementList.add(null);

  }


  }
 } else {

 elementList.add(new javax.xml.namespace.QName("",
"Variables"));
 elementList.add(null);

 }

}

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ServiceError parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 ServiceError object =
new ServiceError();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"ServiceError".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (ServiceError)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list3 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","MessageId").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setMessageId(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Text").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setText(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Variables").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 
nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  list3.add(null);
 
  reader.next();
} else {
 list3.add(reader.getElementText());
 }
 //loop until we find a start element that is not part of this array
 boolean loopDone3 = false;
 while(!loopDone3){
// Ensure we are at the EndElement
while (!reader.isEndElement()){
 reader.next();
}
// Step out of this element
reader.next();
// Step to next element event.
while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();
if (reader.isEndElement()){
 //two continuous end elements means we are exiting the xml structure
 loopDone3 = true;
} else {
 if (new javax.xml.namespace.QName("","Variables").equals(reader.getName())){
 
  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
list3.add(null);

reader.next();
  } else {
list3.add(reader.getElementText());
}
 }else{
loopDone3 = true;
 }
}
 }
 // call the converter utility  to convert and set the array
 
 object.setVariables((java.lang.String[])
list3.toArray(new java.lang.String[list3.size()]));

}  // End of if for expected property start element

 else {

 }
  
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class MakeUssdResponse
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ussd",
"makeUssdResponse",
"ns4");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ussd")){
return "ns4";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for UssdIdentifier
*/


 protected java.lang.String localUssdIdentifier ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getUssdIdentifier(){
 return localUssdIdentifier;
}



 /**
 * Auto generated setter method
 * @param param UssdIdentifier
 */
 public void setUssdIdentifier(java.lang.String param){
 
 this.localUssdIdentifier=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 MakeUssdResponse.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ussd");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":makeUssdResponse",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"makeUssdResponse",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ussdIdentifier", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ussdIdentifier");
}

 } else {
xmlWriter.writeStartElement("ussdIdentifier");
 }


  if (localUssdIdentifier==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("ussdIdentifier cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localUssdIdentifier);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ussdIdentifier"));
 
if (localUssdIdentifier != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUssdIdentifier));
} else {
throw new org.apache.axis2.databinding.ADBException("ussdIdentifier cannot be null!!");
}
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static MakeUssdResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 MakeUssdResponse object =
new MakeUssdResponse();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"makeUssdResponse".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (MakeUssdResponse)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ussdIdentifier").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setUssdIdentifier(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class StartPeriodicNotificationRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/location",
"startPeriodicNotificationRequest",
"ns5");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/location")){
return "ns5";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Requester
*/


 protected org.apache.axis2.databinding.types.URI localRequester ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI
*/
public  org.apache.axis2.databinding.types.URI getRequester(){
 return localRequester;
}



 /**
 * Auto generated setter method
 * @param param Requester
 */
 public void setRequester(org.apache.axis2.databinding.types.URI param){
 
 this.localRequester=param;
 

 }
 

/**
* field for Addresses
* This was an Array!
*/


 protected org.apache.axis2.databinding.types.URI[] localAddresses ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI[]
*/
public  org.apache.axis2.databinding.types.URI[] getAddresses(){
 return localAddresses;
}





 
/**
 * validate the array for Addresses
 */
protected void validateAddresses(org.apache.axis2.databinding.types.URI[] param){
  
if ((param != null) && (param.length < 1)){
throw new java.lang.RuntimeException();
}

}


  /**
* Auto generated setter method
* @param param Addresses
*/
public void setAddresses(org.apache.axis2.databinding.types.URI[] param){

validateAddresses(param);

 
this.localAddresses=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param org.apache.axis2.databinding.types.URI
  */
  public void addAddresses(org.apache.axis2.databinding.types.URI param){
if (localAddresses == null){
localAddresses = new org.apache.axis2.databinding.types.URI[]{};
}

 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localAddresses);
 list.add(param);
 this.localAddresses =
  (org.apache.axis2.databinding.types.URI[])list.toArray(
 new org.apache.axis2.databinding.types.URI[list.size()]);

  }
  

/**
* field for RequestedAccuracy
*/


 protected int localRequestedAccuracy ;


/**
* Auto generated getter method
* @return int
*/
public  int getRequestedAccuracy(){
 return localRequestedAccuracy;
}



 /**
 * Auto generated setter method
 * @param param RequestedAccuracy
 */
 public void setRequestedAccuracy(int param){
 
 this.localRequestedAccuracy=param;
 

 }
 

/**
* field for Frequency
*/


 protected TimeMetric localFrequency ;


/**
* Auto generated getter method
* @return TimeMetric
*/
public  TimeMetric getFrequency(){
 return localFrequency;
}



 /**
 * Auto generated setter method
 * @param param Frequency
 */
 public void setFrequency(TimeMetric param){
 
 this.localFrequency=param;
 

 }
 

/**
* field for Duration
*/


 protected TimeMetric localDuration ;


/**
* Auto generated getter method
* @return TimeMetric
*/
public  TimeMetric getDuration(){
 return localDuration;
}



 /**
 * Auto generated setter method
 * @param param Duration
 */
 public void setDuration(TimeMetric param){
 
 this.localDuration=param;
 

 }
 

/**
* field for ApplicationId
*/


 protected java.lang.String localApplicationId ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApplicationId(){
 return localApplicationId;
}



 /**
 * Auto generated setter method
 * @param param ApplicationId
 */
 public void setApplicationId(java.lang.String param){
 
 this.localApplicationId=param;
 

 }
 

/**
* field for ServiceType
*/


 protected ServiceType localServiceType ;


/**
* Auto generated getter method
* @return ServiceType
*/
public  ServiceType getServiceType(){
 return localServiceType;
}



 /**
 * Auto generated setter method
 * @param param ServiceType
 */
 public void setServiceType(ServiceType param){
 
 this.localServiceType=param;
 

 }
 

/**
* field for Crs
*/


 protected CoordinateReferenceSystem localCrs ;


/**
* Auto generated getter method
* @return CoordinateReferenceSystem
*/
public  CoordinateReferenceSystem getCrs(){
 return localCrs;
}



 /**
 * Auto generated setter method
 * @param param Crs
 */
 public void setCrs(CoordinateReferenceSystem param){
 
 this.localCrs=param;
 

 }
 

/**
* field for LocType
*/


 protected LocType localLocType ;


/**
* Auto generated getter method
* @return LocType
*/
public  LocType getLocType(){
 return localLocType;
}



 /**
 * Auto generated setter method
 * @param param LocType
 */
 public void setLocType(LocType param){
 
 this.localLocType=param;
 

 }
 

/**
* field for Prio
*/


 protected Priority localPrio ;


/**
* Auto generated getter method
* @return Priority
*/
public  Priority getPrio(){
 return localPrio;
}



 /**
 * Auto generated setter method
 * @param param Prio
 */
 public void setPrio(Priority param){
 
 this.localPrio=param;
 

 }
 

/**
* field for EventNotification
*/


 protected java.lang.String localEventNotification ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getEventNotification(){
 return localEventNotification;
}



 /**
 * Auto generated setter method
 * @param param EventNotification
 */
 public void setEventNotification(java.lang.String param){
 
 this.localEventNotification=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 StartPeriodicNotificationRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/location");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":startPeriodicNotificationRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"startPeriodicNotificationRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Requester", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Requester");
}

 } else {
xmlWriter.writeStartElement("Requester");
 }


  if (localRequester==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequester));
 
  }
 
xmlWriter.writeEndElement();
  
  if (localAddresses!=null) {
namespace = "";
boolean emptyNamespace = namespace == null || namespace.length() == 0;
prefix =  emptyNamespace ? null : xmlWriter.getPrefix(namespace);
for (int i = 0;i < localAddresses.length;i++){

 if (localAddresses[i] != null){

if (!emptyNamespace) {
 if (prefix == null) {
java.lang.String prefix2 = generatePrefix(namespace);

xmlWriter.writeStartElement(prefix2,"Addresses", namespace);
xmlWriter.writeNamespace(prefix2, namespace);
xmlWriter.setPrefix(prefix2, namespace);

 } else {
xmlWriter.writeStartElement(namespace,"Addresses");
 }

} else {
 xmlWriter.writeStartElement("Addresses");
}

 
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddresses[i]));
 
xmlWriter.writeEndElement();

} else {

// write null attribute
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Addresses", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Addresses");
}

 } else {
xmlWriter.writeStartElement("Addresses");
 }
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
 xmlWriter.writeEndElement();
 
}

}
  } else {
 
 // write the null attribute
// write null attribute
 java.lang.String namespace2 = "";
 if (! namespace2.equals("")) {
java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

if (prefix2 == null) {
 prefix2 = generatePrefix(namespace2);

 xmlWriter.writeStartElement(prefix2,"Addresses", namespace2);
 xmlWriter.writeNamespace(prefix2, namespace2);
 xmlWriter.setPrefix(prefix2, namespace2);

} else {
 xmlWriter.writeStartElement(namespace2,"Addresses");
}

 } else {
xmlWriter.writeStartElement("Addresses");
 }

// write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 
  }


 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"RequestedAccuracy", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"RequestedAccuracy");
}

 } else {
xmlWriter.writeStartElement("RequestedAccuracy");
 }

 if (localRequestedAccuracy==java.lang.Integer.MIN_VALUE) {

 throw new org.apache.axis2.databinding.ADBException("RequestedAccuracy cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestedAccuracy));
 }
 
xmlWriter.writeEndElement();
  
 if (localFrequency==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"Frequency", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"Frequency");
 }

} else {
 xmlWriter.writeStartElement("Frequency");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localFrequency.serialize(new javax.xml.namespace.QName("","Frequency"),
factory,xmlWriter);
 }

 if (localDuration==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"Duration", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"Duration");
 }

} else {
 xmlWriter.writeStartElement("Duration");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localDuration.serialize(new javax.xml.namespace.QName("","Duration"),
factory,xmlWriter);
 }

 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApplicationId", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApplicationId");
}

 } else {
xmlWriter.writeStartElement("ApplicationId");
 }


  if (localApplicationId==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApplicationId);
 
  }
 
xmlWriter.writeEndElement();
  
 if (localServiceType==null){
 throw new org.apache.axis2.databinding.ADBException("serviceType cannot be null!!");
 }
localServiceType.serialize(new javax.xml.namespace.QName("","serviceType"),
 factory,xmlWriter);

 if (localCrs==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"Crs", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"Crs");
 }

} else {
 xmlWriter.writeStartElement("Crs");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localCrs.serialize(new javax.xml.namespace.QName("","Crs"),
factory,xmlWriter);
 }

 if (localLocType==null){
 throw new org.apache.axis2.databinding.ADBException("locType cannot be null!!");
 }
localLocType.serialize(new javax.xml.namespace.QName("","locType"),
 factory,xmlWriter);

 if (localPrio==null){
 throw new org.apache.axis2.databinding.ADBException("prio cannot be null!!");
 }
localPrio.serialize(new javax.xml.namespace.QName("","prio"),
 factory,xmlWriter);

 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"eventNotification", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"eventNotification");
}

 } else {
xmlWriter.writeStartElement("eventNotification");
 }


  if (localEventNotification==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("eventNotification cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localEventNotification);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"Requester"));
 
 elementList.add(localRequester==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequester));
 
 if (localAddresses!=null){
  for (int i = 0;i < localAddresses.length;i++){

 if (localAddresses[i] != null){
  elementList.add(new javax.xml.namespace.QName("",
"Addresses"));
  elementList.add(
  org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddresses[i]));
  } else {
  
 elementList.add(new javax.xml.namespace.QName("",
"Addresses"));
 elementList.add(null);

  }


  }
 } else {

 elementList.add(new javax.xml.namespace.QName("",
"Addresses"));
 elementList.add(null);

 }


elementList.add(new javax.xml.namespace.QName("",
"RequestedAccuracy"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestedAccuracy));
 
 elementList.add(new javax.xml.namespace.QName("",
"Frequency"));
 
 
 elementList.add(localFrequency==null?null:
 localFrequency);

 elementList.add(new javax.xml.namespace.QName("",
"Duration"));
 
 
 elementList.add(localDuration==null?null:
 localDuration);

elementList.add(new javax.xml.namespace.QName("",
"ApplicationId"));
 
 elementList.add(localApplicationId==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApplicationId));
 
 elementList.add(new javax.xml.namespace.QName("",
"serviceType"));
 
 
 if (localServiceType==null){
 throw new org.apache.axis2.databinding.ADBException("serviceType cannot be null!!");
 }
 elementList.add(localServiceType);

 elementList.add(new javax.xml.namespace.QName("",
"Crs"));
 
 
 elementList.add(localCrs==null?null:
 localCrs);

 elementList.add(new javax.xml.namespace.QName("",
"locType"));
 
 
 if (localLocType==null){
 throw new org.apache.axis2.databinding.ADBException("locType cannot be null!!");
 }
 elementList.add(localLocType);

 elementList.add(new javax.xml.namespace.QName("",
"prio"));
 
 
 if (localPrio==null){
 throw new org.apache.axis2.databinding.ADBException("prio cannot be null!!");
 }
 elementList.add(localPrio);

elementList.add(new javax.xml.namespace.QName("",
"eventNotification"));
 
if (localEventNotification != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEventNotification));
} else {
throw new org.apache.axis2.databinding.ADBException("eventNotification cannot be null!!");
}
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static StartPeriodicNotificationRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 StartPeriodicNotificationRequest object =
new StartPeriodicNotificationRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"startPeriodicNotificationRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (StartPeriodicNotificationRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list2 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Requester").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setRequester(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Addresses").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 
nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  list2.add(null);
 
  reader.next();
} else {
 list2.add(reader.getElementText());
 }
 //loop until we find a start element that is not part of this array
 boolean loopDone2 = false;
 while(!loopDone2){
// Ensure we are at the EndElement
while (!reader.isEndElement()){
 reader.next();
}
// Step out of this element
reader.next();
// Step to next element event.
while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();
if (reader.isEndElement()){
 //two continuous end elements means we are exiting the xml structure
 loopDone2 = true;
} else {
 if (new javax.xml.namespace.QName("","Addresses").equals(reader.getName())){
 
  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
list2.add(null);

reader.next();
  } else {
list2.add(reader.getElementText());
}
 }else{
loopDone2 = true;
 }
}
 }
 // call the converter utility  to convert and set the array
 
 object.setAddresses((org.apache.axis2.databinding.types.URI[])
org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
 org.apache.axis2.databinding.types.URI.class,list2));

}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","RequestedAccuracy").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setRequestedAccuracy(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Frequency").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setFrequency(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setFrequency(TimeMetric.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Duration").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setDuration(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setDuration(TimeMetric.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApplicationId").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApplicationId(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","serviceType").equals(reader.getName())){

object.setServiceType(ServiceType.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Crs").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setCrs(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setCrs(CoordinateReferenceSystem.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","locType").equals(reader.getName())){

object.setLocType(LocType.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","prio").equals(reader.getName())){

object.setPrio(Priority.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","eventNotification").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setEventNotification(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class CMAbility
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/common/v2_0",
"CMAbility",
"ns1");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/common/v2_0")){
return "ns1";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for CMAbility
*/


 protected java.lang.String localCMAbility ;

 private static java.util.HashMap _table_ = new java.util.HashMap();

 // Constructor
 
protected CMAbility(java.lang.String value, boolean isRegisterValue) {
 localCMAbility = value;
 if (isRegisterValue){

 _table_.put(localCMAbility, this);

 }

}
 
 public static final java.lang.String _SMSAbility =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("SMSAbility");

 public static final java.lang.String _MMSAbility =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("MMSAbility");

 public static final java.lang.String _WAPAbility =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("WAPAbility");

 public static final java.lang.String _USSDAbility =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("USSDAbility");

 public static final java.lang.String _LBSAbility =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("LBSAbility");

 public static final java.lang.String _GPRSAbility =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("GPRSAbility");

public static final CMAbility SMSAbility =
 new CMAbility(_SMSAbility,true);
 
public static final CMAbility MMSAbility =
 new CMAbility(_MMSAbility,true);
 
public static final CMAbility WAPAbility =
 new CMAbility(_WAPAbility,true);
 
public static final CMAbility USSDAbility =
 new CMAbility(_USSDAbility,true);
 
public static final CMAbility LBSAbility =
 new CMAbility(_LBSAbility,true);
 
public static final CMAbility GPRSAbility =
 new CMAbility(_GPRSAbility,true);
 

public java.lang.String getValue() { return localCMAbility;}

public boolean equals(java.lang.Object obj) {return (obj == this);}
public int hashCode() { return toString().hashCode();}
public java.lang.String toString() {

return localCMAbility.toString();
 

}



  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 CMAbility.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 

//We can safely assume an element has only one type associated with it

 java.lang.String namespace = parentQName.getNamespaceURI();
 java.lang.String localName = parentQName.getLocalPart();

 if (! namespace.equals("")) {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix, localName, namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace, localName);
}

 } else {
xmlWriter.writeStartElement(localName);
 }

 // add the type details if this is used in a simple type
 if (serializeType){
java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/common/v2_0");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":CMAbility",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"CMAbility",
xmlWriter);
}
 }
 
  if (localCMAbility==null){
 
  throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

 }else{

 xmlWriter.writeCharacters(localCMAbility);
 
 }
 
 xmlWriter.writeEndElement();

 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{




//We can safely assume an element has only one type associated with it
 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
 new java.lang.Object[]{
 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCMAbility)
 },
 null);

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{



public static CMAbility fromValue(java.lang.String value)
throws java.lang.IllegalArgumentException {
 CMAbility enumeration = (CMAbility)
 
 _table_.get(value);


 if (enumeration==null) throw new java.lang.IllegalArgumentException();
 return enumeration;
}
public static CMAbility fromString(java.lang.String value,java.lang.String namespaceURI)
throws java.lang.IllegalArgumentException {
 try {
 
 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


 } catch (java.lang.Exception e) {
throw new java.lang.IllegalArgumentException();
 }
}

public static CMAbility fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
 java.lang.String content) {
 if (content.indexOf(":") > -1){
java.lang.String prefix = content.substring(0,content.indexOf(":"));
java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
return CMAbility.Factory.fromString(content,namespaceUri);
 } else {
 return CMAbility.Factory.fromString(content,"");
 }
}
 

/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static CMAbility parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 CMAbility object = null;
// initialize a hash map to keep values
java.util.Map attributeMap = new java.util.HashMap();
java.util.List extraAttributeList = new java.util.ArrayList();
 

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
while(!reader.isEndElement()) {
 if (reader.isStartElement()  || reader.hasText()){

 java.lang.String content = reader.getElementText();
 
if (content.indexOf(":") > 0) {
 // this seems to be a Qname so find the namespace and send
 prefix = content.substring(0, content.indexOf(":"));
 namespaceuri = reader.getNamespaceURI(prefix);
 object = CMAbility.Factory.fromString(content,namespaceuri);
} else {
 // this seems to be not a qname send and empty namespace incase of it is
 // check is done in fromString method
 object = CMAbility.Factory.fromString(content,"");
}


  } else {
reader.next();
  }  
}  // end of while loop




 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class EndUssdRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ussd",
"endUssdRequest",
"ns4");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ussd")){
return "ns4";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for ApplicationID
*/


 protected java.lang.String localApplicationID ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApplicationID(){
 return localApplicationID;
}



 /**
 * Auto generated setter method
 * @param param ApplicationID
 */
 public void setApplicationID(java.lang.String param){
 
 this.localApplicationID=param;
 

 }
 

/**
* field for UssdMessage
*/


 protected java.lang.String localUssdMessage ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getUssdMessage(){
 return localUssdMessage;
}



 /**
 * Auto generated setter method
 * @param param UssdMessage
 */
 public void setUssdMessage(java.lang.String param){
 
 this.localUssdMessage=param;
 

 }
 

/**
* field for UssdIdentifier
*/


 protected java.lang.String localUssdIdentifier ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getUssdIdentifier(){
 return localUssdIdentifier;
}



 /**
 * Auto generated setter method
 * @param param UssdIdentifier
 */
 public void setUssdIdentifier(java.lang.String param){
 
 this.localUssdIdentifier=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 EndUssdRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ussd");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":endUssdRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"endUssdRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApplicationID", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApplicationID");
}

 } else {
xmlWriter.writeStartElement("ApplicationID");
 }


  if (localApplicationID==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApplicationID);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"UssdMessage", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"UssdMessage");
}

 } else {
xmlWriter.writeStartElement("UssdMessage");
 }


  if (localUssdMessage==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localUssdMessage);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"UssdIdentifier", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"UssdIdentifier");
}

 } else {
xmlWriter.writeStartElement("UssdIdentifier");
 }


  if (localUssdIdentifier==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localUssdIdentifier);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ApplicationID"));
 
 elementList.add(localApplicationID==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApplicationID));
 
elementList.add(new javax.xml.namespace.QName("",
"UssdMessage"));
 
 elementList.add(localUssdMessage==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUssdMessage));
 
elementList.add(new javax.xml.namespace.QName("",
"UssdIdentifier"));
 
 elementList.add(localUssdIdentifier==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUssdIdentifier));
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static EndUssdRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 EndUssdRequest object =
new EndUssdRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"endUssdRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (EndUssdRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApplicationID").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApplicationID(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","UssdMessage").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setUssdMessage(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","UssdIdentifier").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setUssdIdentifier(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class NotifyMessageReceptionRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/mms",
"notifyMessageReceptionRequest",
"ns8");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/mms")){
return "ns8";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for ApplicationID
*/


 protected java.lang.String localApplicationID ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApplicationID(){
 return localApplicationID;
}



 /**
 * Auto generated setter method
 * @param param ApplicationID
 */
 public void setApplicationID(java.lang.String param){
 
 this.localApplicationID=param;
 

 }
 

/**
* field for Message
*/


 protected MessageReference localMessage ;


/**
* Auto generated getter method
* @return MessageReference
*/
public  MessageReference getMessage(){
 return localMessage;
}



 /**
 * Auto generated setter method
 * @param param Message
 */
 public void setMessage(MessageReference param){
 
 this.localMessage=param;
 

 }
 

/**
* field for Content
*/


 protected java.lang.String localContent ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getContent(){
 return localContent;
}



 /**
 * Auto generated setter method
 * @param param Content
 */
 public void setContent(java.lang.String param){
 
 this.localContent=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 NotifyMessageReceptionRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/mms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":notifyMessageReceptionRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"notifyMessageReceptionRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApplicationID", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApplicationID");
}

 } else {
xmlWriter.writeStartElement("ApplicationID");
 }


  if (localApplicationID==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApplicationID);
 
  }
 
xmlWriter.writeEndElement();
  
 if (localMessage==null){
 throw new org.apache.axis2.databinding.ADBException("message cannot be null!!");
 }
localMessage.serialize(new javax.xml.namespace.QName("","message"),
 factory,xmlWriter);

 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Content", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Content");
}

 } else {
xmlWriter.writeStartElement("Content");
 }


  if (localContent==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localContent);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ApplicationID"));
 
 elementList.add(localApplicationID==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApplicationID));
 
 elementList.add(new javax.xml.namespace.QName("",
"message"));
 
 
 if (localMessage==null){
 throw new org.apache.axis2.databinding.ADBException("message cannot be null!!");
 }
 elementList.add(localMessage);

elementList.add(new javax.xml.namespace.QName("",
"Content"));
 
 elementList.add(localContent==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContent));
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static NotifyMessageReceptionRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 NotifyMessageReceptionRequest object =
new NotifyMessageReceptionRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"notifyMessageReceptionRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (NotifyMessageReceptionRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApplicationID").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApplicationID(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","message").equals(reader.getName())){

object.setMessage(MessageReference.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Content").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setContent(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class DeliveryInformationE
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
name = DeliveryInformation
Namespace URI = http://www.csapi.org/schema/sms
Namespace Prefix = ns7
*/
 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/sms")){
return "ns7";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Address
*/


 protected org.apache.axis2.databinding.types.URI localAddress ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI
*/
public  org.apache.axis2.databinding.types.URI getAddress(){
 return localAddress;
}



 /**
 * Auto generated setter method
 * @param param Address
 */
 public void setAddress(org.apache.axis2.databinding.types.URI param){
 
 this.localAddress=param;
 

 }
 

/**
* field for DeliveryStatus
*/


 protected DeliveryStatusE localDeliveryStatus ;


/**
* Auto generated getter method
* @return DeliveryStatusE
*/
public  DeliveryStatusE getDeliveryStatus(){
 return localDeliveryStatus;
}



 /**
 * Auto generated setter method
 * @param param DeliveryStatus
 */
 public void setDeliveryStatus(DeliveryStatusE param){
 
 this.localDeliveryStatus=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



 org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 DeliveryInformationE.this.serialize(parentQName,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 parentQName,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/sms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":DeliveryInformation",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"DeliveryInformation",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Address", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Address");
}

 } else {
xmlWriter.writeStartElement("Address");
 }


  if (localAddress==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddress));
 
  }
 
xmlWriter.writeEndElement();
  
 if (localDeliveryStatus==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"DeliveryStatus", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"DeliveryStatus");
 }

} else {
 xmlWriter.writeStartElement("DeliveryStatus");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localDeliveryStatus.serialize(new javax.xml.namespace.QName("","DeliveryStatus"),
factory,xmlWriter);
 }

 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"Address"));
 
 elementList.add(localAddress==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddress));
 
 elementList.add(new javax.xml.namespace.QName("",
"DeliveryStatus"));
 
 
 elementList.add(localDeliveryStatus==null?null:
 localDeliveryStatus);


return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static DeliveryInformationE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 DeliveryInformationE object =
new DeliveryInformationE();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"DeliveryInformation".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (DeliveryInformationE)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Address").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setAddress(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","DeliveryStatus").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setDeliveryStatus(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setDeliveryStatus(DeliveryStatusE.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class MmsMessage
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
name = MmsMessage
Namespace URI = http://www.csapi.org/schema/mms
Namespace Prefix = ns8
*/
 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/mms")){
return "ns8";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for BodyText
*/


 protected java.lang.String localBodyText ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getBodyText(){
 return localBodyText;
}



 /**
 * Auto generated setter method
 * @param param BodyText
 */
 public void setBodyText(java.lang.String param){
 
 this.localBodyText=param;
 

 }
 

/**
* field for Content
*/


 protected java.lang.String localContent ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getContent(){
 return localContent;
}



 /**
 * Auto generated setter method
 * @param param Content
 */
 public void setContent(java.lang.String param){
 
 this.localContent=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



 org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 MmsMessage.this.serialize(parentQName,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 parentQName,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/mms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":MmsMessage",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"MmsMessage",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"bodyText", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"bodyText");
}

 } else {
xmlWriter.writeStartElement("bodyText");
 }


  if (localBodyText==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("bodyText cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localBodyText);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"content", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"content");
}

 } else {
xmlWriter.writeStartElement("content");
 }


  if (localContent==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("content cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localContent);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"bodyText"));
 
if (localBodyText != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBodyText));
} else {
throw new org.apache.axis2.databinding.ADBException("bodyText cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"content"));
 
if (localContent != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContent));
} else {
throw new org.apache.axis2.databinding.ADBException("content cannot be null!!");
}
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static MmsMessage parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 MmsMessage object =
new MmsMessage();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"MmsMessage".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (MmsMessage)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","bodyText").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setBodyText(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","content").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setContent(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class APStatusType
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ap",
"APStatusType",
"ns2");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ap")){
return "ns2";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for APStatusType
*/


 protected java.lang.String localAPStatusType ;

 private static java.util.HashMap _table_ = new java.util.HashMap();

 // Constructor
 
protected APStatusType(java.lang.String value, boolean isRegisterValue) {
 localAPStatusType = value;
 if (isRegisterValue){

 _table_.put(localAPStatusType, this);

 }

}
 
 public static final java.lang.String _Normal =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Normal");

 public static final java.lang.String _OutofActiveTime =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("OutofActiveTime");

 public static final java.lang.String _NeedRegistration =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("NeedRegistration");

 public static final java.lang.String _OutofService =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("OutofService");

 public static final java.lang.String _Paused =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Paused");

 public static final java.lang.String _Closed =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Closed");

 public static final java.lang.String _WaitingforConfirm =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("WaitingforConfirm");

public static final APStatusType Normal =
 new APStatusType(_Normal,true);
 
public static final APStatusType OutofActiveTime =
 new APStatusType(_OutofActiveTime,true);
 
public static final APStatusType NeedRegistration =
 new APStatusType(_NeedRegistration,true);
 
public static final APStatusType OutofService =
 new APStatusType(_OutofService,true);
 
public static final APStatusType Paused =
 new APStatusType(_Paused,true);
 
public static final APStatusType Closed =
 new APStatusType(_Closed,true);
 
public static final APStatusType WaitingforConfirm =
 new APStatusType(_WaitingforConfirm,true);
 

public java.lang.String getValue() { return localAPStatusType;}

public boolean equals(java.lang.Object obj) {return (obj == this);}
public int hashCode() { return toString().hashCode();}
public java.lang.String toString() {

return localAPStatusType.toString();
 

}



  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 APStatusType.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 

//We can safely assume an element has only one type associated with it

 java.lang.String namespace = parentQName.getNamespaceURI();
 java.lang.String localName = parentQName.getLocalPart();

 if (! namespace.equals("")) {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix, localName, namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace, localName);
}

 } else {
xmlWriter.writeStartElement(localName);
 }

 // add the type details if this is used in a simple type
 if (serializeType){
java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":APStatusType",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"APStatusType",
xmlWriter);
}
 }
 
  if (localAPStatusType==null){
 
  throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

 }else{

 xmlWriter.writeCharacters(localAPStatusType);
 
 }
 
 xmlWriter.writeEndElement();

 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{




//We can safely assume an element has only one type associated with it
 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
 new java.lang.Object[]{
 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAPStatusType)
 },
 null);

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{



public static APStatusType fromValue(java.lang.String value)
throws java.lang.IllegalArgumentException {
 APStatusType enumeration = (APStatusType)
 
 _table_.get(value);


 if (enumeration==null) throw new java.lang.IllegalArgumentException();
 return enumeration;
}
public static APStatusType fromString(java.lang.String value,java.lang.String namespaceURI)
throws java.lang.IllegalArgumentException {
 try {
 
 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


 } catch (java.lang.Exception e) {
throw new java.lang.IllegalArgumentException();
 }
}

public static APStatusType fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
 java.lang.String content) {
 if (content.indexOf(":") > -1){
java.lang.String prefix = content.substring(0,content.indexOf(":"));
java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
return APStatusType.Factory.fromString(content,namespaceUri);
 } else {
 return APStatusType.Factory.fromString(content,"");
 }
}
 

/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static APStatusType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 APStatusType object = null;
// initialize a hash map to keep values
java.util.Map attributeMap = new java.util.HashMap();
java.util.List extraAttributeList = new java.util.ArrayList();
 

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
while(!reader.isEndElement()) {
 if (reader.isStartElement()  || reader.hasText()){

 java.lang.String content = reader.getElementText();
 
if (content.indexOf(":") > 0) {
 // this seems to be a Qname so find the namespace and send
 prefix = content.substring(0, content.indexOf(":"));
 namespaceuri = reader.getNamespaceURI(prefix);
 object = APStatusType.Factory.fromString(content,namespaceuri);
} else {
 // this seems to be not a qname send and empty namespace incase of it is
 // check is done in fromString method
 object = APStatusType.Factory.fromString(content,"");
}


  } else {
reader.next();
  }  
}  // end of while loop




 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class APLogOutReq
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ap",
"APLogOutReq",
"ns2");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ap")){
return "ns2";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for APid
*/


 protected java.lang.String localAPid ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getAPid(){
 return localAPid;
}



 /**
 * Auto generated setter method
 * @param param APid
 */
 public void setAPid(java.lang.String param){
 
 this.localAPid=param;
 

 }
 

/**
* field for APPid
*/


 protected int localAPPid ;


/**
* Auto generated getter method
* @return int
*/
public  int getAPPid(){
 return localAPPid;
}



 /**
 * Auto generated setter method
 * @param param APPid
 */
 public void setAPPid(int param){
 
 this.localAPPid=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 APLogOutReq.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":APLogOutReq",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"APLogOutReq",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"APid", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"APid");
}

 } else {
xmlWriter.writeStartElement("APid");
 }


  if (localAPid==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("APid cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localAPid);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"APPid", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"APPid");
}

 } else {
xmlWriter.writeStartElement("APPid");
 }

 if (localAPPid==java.lang.Integer.MIN_VALUE) {

 throw new org.apache.axis2.databinding.ADBException("APPid cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAPPid));
 }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"APid"));
 
if (localAPid != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAPid));
} else {
throw new org.apache.axis2.databinding.ADBException("APid cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"APPid"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAPPid));
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static APLogOutReq parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 APLogOutReq object =
new APLogOutReq();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"APLogOutReq".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (APLogOutReq)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","APid").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAPid(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","APPid").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAPPid(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class PolicyExceptionE
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/common/v2_0",
"PolicyException",
"ns1");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/common/v2_0")){
return "ns1";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for PolicyException
*/


 protected PolicyException localPolicyException ;


/**
* Auto generated getter method
* @return PolicyException
*/
public  PolicyException getPolicyException(){
 return localPolicyException;
}



 /**
 * Auto generated setter method
 * @param param PolicyException
 */
 public void setPolicyException(PolicyException param){
 
 this.localPolicyException=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 PolicyExceptionE.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 

//We can safely assume an element has only one type associated with it

 if (localPolicyException==null){
throw new org.apache.axis2.databinding.ADBException("Property cannot be null!");
 }
 localPolicyException.serialize(MY_QNAME,factory,xmlWriter);
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{




//We can safely assume an element has only one type associated with it
return localPolicyException.getPullParser(MY_QNAME);

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static PolicyExceptionE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 PolicyExceptionE object =
new PolicyExceptionE();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
while(!reader.isEndElement()) {
 if (reader.isStartElement() ){

 if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.csapi.org/schema/common/v2_0","PolicyException").equals(reader.getName())){

object.setPolicyException(PolicyException.Factory.parse(reader));
 
}  // End of if for expected property start element

  else{
// A start element we are not expecting indicates an invalid parameter was passed
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
  }
  
  } else {
reader.next();
  }  
}  // end of while loop




 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class APSvcPerfCmdReq
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ap",
"APSvcPerfCmdReq",
"ns2");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ap")){
return "ns2";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for APid
*/


 protected java.lang.String localAPid ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getAPid(){
 return localAPid;
}



 /**
 * Auto generated setter method
 * @param param APid
 */
 public void setAPid(java.lang.String param){
 
 this.localAPid=param;
 

 }
 

/**
* field for ApSvcPerfCmdType
*/


 protected java.lang.String localApSvcPerfCmdType ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApSvcPerfCmdType(){
 return localApSvcPerfCmdType;
}



 /**
 * Auto generated setter method
 * @param param ApSvcPerfCmdType
 */
 public void setApSvcPerfCmdType(java.lang.String param){
 
 this.localApSvcPerfCmdType=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 APSvcPerfCmdReq.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":APSvcPerfCmdReq",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"APSvcPerfCmdReq",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"APid", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"APid");
}

 } else {
xmlWriter.writeStartElement("APid");
 }


  if (localAPid==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("APid cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localAPid);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApSvcPerfCmdType", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApSvcPerfCmdType");
}

 } else {
xmlWriter.writeStartElement("ApSvcPerfCmdType");
 }


  if (localApSvcPerfCmdType==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApSvcPerfCmdType);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"APid"));
 
if (localAPid != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAPid));
} else {
throw new org.apache.axis2.databinding.ADBException("APid cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"ApSvcPerfCmdType"));
 
 elementList.add(localApSvcPerfCmdType==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApSvcPerfCmdType));
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static APSvcPerfCmdReq parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 APSvcPerfCmdReq object =
new APSvcPerfCmdReq();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"APSvcPerfCmdReq".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (APSvcPerfCmdReq)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","APid").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAPid(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApSvcPerfCmdType").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApSvcPerfCmdType(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class ServiceType
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/location",
"ServiceType",
"ns5");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/location")){
return "ns5";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for ServiceType
*/


 protected java.lang.String localServiceType ;

 private static java.util.HashMap _table_ = new java.util.HashMap();

 // Constructor
 
protected ServiceType(java.lang.String value, boolean isRegisterValue) {
 localServiceType = value;
 if (isRegisterValue){

 _table_.put(localServiceType, this);

 }

}
 
 public static final java.lang.String _STANDARD =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("STANDARD");

 public static final java.lang.String _EMERGENCY =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("EMERGENCY");

public static final ServiceType STANDARD =
 new ServiceType(_STANDARD,true);
 
public static final ServiceType EMERGENCY =
 new ServiceType(_EMERGENCY,true);
 

public java.lang.String getValue() { return localServiceType;}

public boolean equals(java.lang.Object obj) {return (obj == this);}
public int hashCode() { return toString().hashCode();}
public java.lang.String toString() {

return localServiceType.toString();
 

}



  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 ServiceType.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 

//We can safely assume an element has only one type associated with it

 java.lang.String namespace = parentQName.getNamespaceURI();
 java.lang.String localName = parentQName.getLocalPart();

 if (! namespace.equals("")) {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix, localName, namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace, localName);
}

 } else {
xmlWriter.writeStartElement(localName);
 }

 // add the type details if this is used in a simple type
 if (serializeType){
java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/location");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":ServiceType",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"ServiceType",
xmlWriter);
}
 }
 
  if (localServiceType==null){
 
  throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

 }else{

 xmlWriter.writeCharacters(localServiceType);
 
 }
 
 xmlWriter.writeEndElement();

 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{




//We can safely assume an element has only one type associated with it
 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
 new java.lang.Object[]{
 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localServiceType)
 },
 null);

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{



public static ServiceType fromValue(java.lang.String value)
throws java.lang.IllegalArgumentException {
 ServiceType enumeration = (ServiceType)
 
 _table_.get(value);


 if (enumeration==null) throw new java.lang.IllegalArgumentException();
 return enumeration;
}
public static ServiceType fromString(java.lang.String value,java.lang.String namespaceURI)
throws java.lang.IllegalArgumentException {
 try {
 
 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


 } catch (java.lang.Exception e) {
throw new java.lang.IllegalArgumentException();
 }
}

public static ServiceType fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
 java.lang.String content) {
 if (content.indexOf(":") > -1){
java.lang.String prefix = content.substring(0,content.indexOf(":"));
java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
return ServiceType.Factory.fromString(content,namespaceUri);
 } else {
 return ServiceType.Factory.fromString(content,"");
 }
}
 

/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ServiceType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 ServiceType object = null;
// initialize a hash map to keep values
java.util.Map attributeMap = new java.util.HashMap();
java.util.List extraAttributeList = new java.util.ArrayList();
 

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
while(!reader.isEndElement()) {
 if (reader.isStartElement()  || reader.hasText()){

 java.lang.String content = reader.getElementText();
 
if (content.indexOf(":") > 0) {
 // this seems to be a Qname so find the namespace and send
 prefix = content.substring(0, content.indexOf(":"));
 namespaceuri = reader.getNamespaceURI(prefix);
 object = ServiceType.Factory.fromString(content,namespaceuri);
} else {
 // this seems to be not a qname send and empty namespace incase of it is
 // check is done in fromString method
 object = ServiceType.Factory.fromString(content,"");
}


  } else {
reader.next();
  }  
}  // end of while loop




 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class GetLocationForGroupResponse
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/location",
"getLocationForGroupResponse",
"ns5");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/location")){
return "ns5";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Item
* This was an Array!
*/


 protected LocationData[] localItem ;

/*  This tracker boolean wil be used to detect whether the user called the set method
  *for this attribute. It will be used to determine whether to include this field
*in the serialized XML
*/
protected boolean localItemTracker = false ;


/**
* Auto generated getter method
* @return LocationData[]
*/
public  LocationData[] getItem(){
 return localItem;
}





 
/**
 * validate the array for Item
 */
protected void validateItem(LocationData[] param){
  
}


  /**
* Auto generated setter method
* @param param Item
*/
public void setItem(LocationData[] param){

validateItem(param);

 
  if (param != null){
  //update the setting tracker
  localItemTracker = true;
  } else {
  localItemTracker = false;
 
  }

this.localItem=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param LocationData
  */
  public void addItem(LocationData param){
if (localItem == null){
localItem = new LocationData[]{};
}

 
 //update the setting tracker
localItemTracker = true;
 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localItem);
 list.add(param);
 this.localItem =
  (LocationData[])list.toArray(
 new LocationData[list.size()]);

  }
  

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 GetLocationForGroupResponse.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/location");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":getLocationForGroupResponse",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"getLocationForGroupResponse",
xmlWriter);
}

 
}
if (localItemTracker){
 if (localItem!=null){
 for (int i = 0;i < localItem.length;i++){
if (localItem[i] != null){
 localItem[i].serialize(new javax.xml.namespace.QName("","item"),
factory,xmlWriter);
} else {

// we don't have to do any thing since minOccures is zero
 
}

 }
  } else {

 throw new org.apache.axis2.databinding.ADBException("item cannot be null!!");

 }
 }
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();

 if (localItemTracker){
  if (localItem!=null) {
 for (int i = 0;i < localItem.length;i++){

 if (localItem[i] != null){
 elementList.add(new javax.xml.namespace.QName("",
  "item"));
 elementList.add(localItem[i]);
 } else {

// nothing to do
 
 }

 }
  } else {
 
throw new org.apache.axis2.databinding.ADBException("item cannot be null!!");
 
  }

}

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static GetLocationForGroupResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 GetLocationForGroupResponse object =
new GetLocationForGroupResponse();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"getLocationForGroupResponse".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (GetLocationForGroupResponse)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list1 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","item").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 list1.add(LocationData.Factory.parse(reader));

//loop until we find a start element that is not part of this array
boolean loopDone1 = false;
while(!loopDone1){
 // We should be at the end element, but make sure
 while (!reader.isEndElement())
reader.next();
 // Step out of this element
 reader.next();
 // Step to next element event.
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 if (reader.isEndElement()){
//two continuous end elements means we are exiting the xml structure
loopDone1 = true;
 } else {
if (new javax.xml.namespace.QName("","item").equals(reader.getName())){
 list1.add(LocationData.Factory.parse(reader));

}else{
 loopDone1 = true;
}
 }
}
// call the converter utility  to convert and set the array

object.setItem((LocationData[])
 org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
LocationData.class,
list1));
 
}  // End of if for expected property start element

 else {

 }
  
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class APSvcAuthenticReq
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ap",
"APSvcAuthenticReq",
"ns2");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ap")){
return "ns2";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for APid
*/


 protected java.lang.String localAPid ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getAPid(){
 return localAPid;
}



 /**
 * Auto generated setter method
 * @param param APid
 */
 public void setAPid(java.lang.String param){
 
 this.localAPid=param;
 

 }
 

/**
* field for ApSvcAuthType
*/


 protected java.lang.String localApSvcAuthType ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApSvcAuthType(){
 return localApSvcAuthType;
}



 /**
 * Auto generated setter method
 * @param param ApSvcAuthType
 */
 public void setApSvcAuthType(java.lang.String param){
 
 this.localApSvcAuthType=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 APSvcAuthenticReq.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":APSvcAuthenticReq",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"APSvcAuthenticReq",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"APid", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"APid");
}

 } else {
xmlWriter.writeStartElement("APid");
 }


  if (localAPid==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("APid cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localAPid);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApSvcAuthType", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApSvcAuthType");
}

 } else {
xmlWriter.writeStartElement("ApSvcAuthType");
 }


  if (localApSvcAuthType==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApSvcAuthType);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"APid"));
 
if (localAPid != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAPid));
} else {
throw new org.apache.axis2.databinding.ADBException("APid cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"ApSvcAuthType"));
 
 elementList.add(localApSvcAuthType==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApSvcAuthType));
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static APSvcAuthenticReq parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 APSvcAuthenticReq object =
new APSvcAuthenticReq();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"APSvcAuthenticReq".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (APSvcAuthenticReq)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","APid").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAPid(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApSvcAuthType").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApSvcAuthType(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class GetPushDeliveryStatusResponse
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/wap",
"getPushDeliveryStatusResponse",
"ns3");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/wap")){
return "ns3";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Item
* This was an Array!
*/


 protected DeliveryInformation[] localItem ;

/*  This tracker boolean wil be used to detect whether the user called the set method
  *for this attribute. It will be used to determine whether to include this field
*in the serialized XML
*/
protected boolean localItemTracker = false ;


/**
* Auto generated getter method
* @return DeliveryInformation[]
*/
public  DeliveryInformation[] getItem(){
 return localItem;
}





 
/**
 * validate the array for Item
 */
protected void validateItem(DeliveryInformation[] param){
  
}


  /**
* Auto generated setter method
* @param param Item
*/
public void setItem(DeliveryInformation[] param){

validateItem(param);

 
  if (param != null){
  //update the setting tracker
  localItemTracker = true;
  } else {
  localItemTracker = false;
 
  }

this.localItem=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param DeliveryInformation
  */
  public void addItem(DeliveryInformation param){
if (localItem == null){
localItem = new DeliveryInformation[]{};
}

 
 //update the setting tracker
localItemTracker = true;
 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localItem);
 list.add(param);
 this.localItem =
  (DeliveryInformation[])list.toArray(
 new DeliveryInformation[list.size()]);

  }
  

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 GetPushDeliveryStatusResponse.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/wap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":getPushDeliveryStatusResponse",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"getPushDeliveryStatusResponse",
xmlWriter);
}

 
}
if (localItemTracker){
 if (localItem!=null){
 for (int i = 0;i < localItem.length;i++){
if (localItem[i] != null){
 localItem[i].serialize(new javax.xml.namespace.QName("","item"),
factory,xmlWriter);
} else {

// we don't have to do any thing since minOccures is zero
 
}

 }
  } else {

 throw new org.apache.axis2.databinding.ADBException("item cannot be null!!");

 }
 }
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();

 if (localItemTracker){
  if (localItem!=null) {
 for (int i = 0;i < localItem.length;i++){

 if (localItem[i] != null){
 elementList.add(new javax.xml.namespace.QName("",
  "item"));
 elementList.add(localItem[i]);
 } else {

// nothing to do
 
 }

 }
  } else {
 
throw new org.apache.axis2.databinding.ADBException("item cannot be null!!");
 
  }

}

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static GetPushDeliveryStatusResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 GetPushDeliveryStatusResponse object =
new GetPushDeliveryStatusResponse();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"getPushDeliveryStatusResponse".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (GetPushDeliveryStatusResponse)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list1 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","item").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 list1.add(DeliveryInformation.Factory.parse(reader));

//loop until we find a start element that is not part of this array
boolean loopDone1 = false;
while(!loopDone1){
 // We should be at the end element, but make sure
 while (!reader.isEndElement())
reader.next();
 // Step out of this element
 reader.next();
 // Step to next element event.
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 if (reader.isEndElement()){
//two continuous end elements means we are exiting the xml structure
loopDone1 = true;
 } else {
if (new javax.xml.namespace.QName("","item").equals(reader.getName())){
 list1.add(DeliveryInformation.Factory.parse(reader));

}else{
 loopDone1 = true;
}
 }
}
// call the converter utility  to convert and set the array

object.setItem((DeliveryInformation[])
 org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
DeliveryInformation.class,
list1));
 
}  // End of if for expected property start element

 else {

 }
  
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class LocationEndRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/location",
"LocationEndRequest",
"ns5");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/location")){
return "ns5";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Correlator
*/


 protected java.lang.String localCorrelator ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getCorrelator(){
 return localCorrelator;
}



 /**
 * Auto generated setter method
 * @param param Correlator
 */
 public void setCorrelator(java.lang.String param){
 
 this.localCorrelator=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 LocationEndRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/location");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":LocationEndRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"LocationEndRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"correlator", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"correlator");
}

 } else {
xmlWriter.writeStartElement("correlator");
 }


  if (localCorrelator==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("correlator cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localCorrelator);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"correlator"));
 
if (localCorrelator != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCorrelator));
} else {
throw new org.apache.axis2.databinding.ADBException("correlator cannot be null!!");
}
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static LocationEndRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 LocationEndRequest object =
new LocationEndRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"LocationEndRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (LocationEndRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","correlator").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setCorrelator(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class StartNotificationRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/notification",
"startNotificationRequest",
"ns6");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/notification")){
return "ns6";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for ApplicationId
*/


 protected java.lang.String localApplicationId ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApplicationId(){
 return localApplicationId;
}



 /**
 * Auto generated setter method
 * @param param ApplicationId
 */
 public void setApplicationId(java.lang.String param){
 
 this.localApplicationId=param;
 

 }
 

/**
* field for MessageNotification
* This was an Array!
*/


 protected MessageNotificationType[] localMessageNotification ;

/*  This tracker boolean wil be used to detect whether the user called the set method
  *for this attribute. It will be used to determine whether to include this field
*in the serialized XML
*/
protected boolean localMessageNotificationTracker = false ;


/**
* Auto generated getter method
* @return MessageNotificationType[]
*/
public  MessageNotificationType[] getMessageNotification(){
 return localMessageNotification;
}





 
/**
 * validate the array for MessageNotification
 */
protected void validateMessageNotification(MessageNotificationType[] param){
  
}


  /**
* Auto generated setter method
* @param param MessageNotification
*/
public void setMessageNotification(MessageNotificationType[] param){

validateMessageNotification(param);

 
  if (param != null){
  //update the setting tracker
  localMessageNotificationTracker = true;
  } else {
  localMessageNotificationTracker = true;
 
  }

this.localMessageNotification=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param MessageNotificationType
  */
  public void addMessageNotification(MessageNotificationType param){
if (localMessageNotification == null){
localMessageNotification = new MessageNotificationType[]{};
}

 
 //update the setting tracker
localMessageNotificationTracker = true;
 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localMessageNotification);
 list.add(param);
 this.localMessageNotification =
  (MessageNotificationType[])list.toArray(
 new MessageNotificationType[list.size()]);

  }
  

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 StartNotificationRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/notification");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":startNotificationRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"startNotificationRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApplicationId", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApplicationId");
}

 } else {
xmlWriter.writeStartElement("ApplicationId");
 }


  if (localApplicationId==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApplicationId);
 
  }
 
xmlWriter.writeEndElement();
if (localMessageNotificationTracker){
 if (localMessageNotification!=null){
 for (int i = 0;i < localMessageNotification.length;i++){
if (localMessageNotification[i] != null){
 localMessageNotification[i].serialize(new javax.xml.namespace.QName("","MessageNotification"),
factory,xmlWriter);
} else {

 // write null attribute
 java.lang.String namespace2 = "";
 if (! namespace2.equals("")) {
java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

if (prefix2 == null) {
 prefix2 = generatePrefix(namespace2);

 xmlWriter.writeStartElement(prefix2,"MessageNotification", namespace2);
 xmlWriter.writeNamespace(prefix2, namespace2);
 xmlWriter.setPrefix(prefix2, namespace2);

} else {
 xmlWriter.writeStartElement(namespace2,"MessageNotification");
}

 } else {
xmlWriter.writeStartElement("MessageNotification");
 }

// write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 
}

 }
  } else {

// write null attribute
java.lang.String namespace2 = "";
if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"MessageNotification", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"MessageNotification");
 }

} else {
 xmlWriter.writeStartElement("MessageNotification");
}

 // write the nil attribute
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
 xmlWriter.writeEndElement();

 }
 }
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ApplicationId"));
 
 elementList.add(localApplicationId==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApplicationId));
  if (localMessageNotificationTracker){
  if (localMessageNotification!=null) {
 for (int i = 0;i < localMessageNotification.length;i++){

 if (localMessageNotification[i] != null){
 elementList.add(new javax.xml.namespace.QName("",
  "MessageNotification"));
 elementList.add(localMessageNotification[i]);
 } else {

elementList.add(new javax.xml.namespace.QName("",
  "MessageNotification"));
elementList.add(null);
 
 }

 }
  } else {
 
elementList.add(new javax.xml.namespace.QName("",
  "MessageNotification"));
elementList.add(localMessageNotification);
 
  }

}

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static StartNotificationRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 StartNotificationRequest object =
new StartNotificationRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"startNotificationRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (StartNotificationRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list2 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApplicationId").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApplicationId(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","MessageNotification").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 
  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
list2.add(null);
reader.next();
  } else {
list2.add(MessageNotificationType.Factory.parse(reader));
}
//loop until we find a start element that is not part of this array
boolean loopDone2 = false;
while(!loopDone2){
 // We should be at the end element, but make sure
 while (!reader.isEndElement())
reader.next();
 // Step out of this element
 reader.next();
 // Step to next element event.
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 if (reader.isEndElement()){
//two continuous end elements means we are exiting the xml structure
loopDone2 = true;
 } else {
if (new javax.xml.namespace.QName("","MessageNotification").equals(reader.getName())){
 
nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  list2.add(null);
  reader.next();
} else {
 list2.add(MessageNotificationType.Factory.parse(reader));
}
}else{
 loopDone2 = true;
}
 }
}
// call the converter utility  to convert and set the array

object.setMessageNotification((MessageNotificationType[])
 org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
MessageNotificationType.class,
list2));
 
}  // End of if for expected property start element

 else {

 }
  
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class EndNotificationRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/location",
"EndNotificationRequest",
"ns5");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/location")){
return "ns5";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for ApplicationId
*/


 protected java.lang.String localApplicationId ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApplicationId(){
 return localApplicationId;
}



 /**
 * Auto generated setter method
 * @param param ApplicationId
 */
 public void setApplicationId(java.lang.String param){
 
 this.localApplicationId=param;
 

 }
 

/**
* field for Correlator
*/


 protected java.lang.String localCorrelator ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getCorrelator(){
 return localCorrelator;
}



 /**
 * Auto generated setter method
 * @param param Correlator
 */
 public void setCorrelator(java.lang.String param){
 
 this.localCorrelator=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 EndNotificationRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/location");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":EndNotificationRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"EndNotificationRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApplicationId", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApplicationId");
}

 } else {
xmlWriter.writeStartElement("ApplicationId");
 }


  if (localApplicationId==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApplicationId);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"correlator", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"correlator");
}

 } else {
xmlWriter.writeStartElement("correlator");
 }


  if (localCorrelator==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("correlator cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localCorrelator);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ApplicationId"));
 
 elementList.add(localApplicationId==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApplicationId));
 
elementList.add(new javax.xml.namespace.QName("",
"correlator"));
 
if (localCorrelator != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCorrelator));
} else {
throw new org.apache.axis2.databinding.ADBException("correlator cannot be null!!");
}
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static EndNotificationRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 EndNotificationRequest object =
new EndNotificationRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"EndNotificationRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (EndNotificationRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApplicationId").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApplicationId(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","correlator").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setCorrelator(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class DelayTolerance
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/location",
"DelayTolerance",
"ns5");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/location")){
return "ns5";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for DelayTolerance
*/


 protected java.lang.String localDelayTolerance ;

 private static java.util.HashMap _table_ = new java.util.HashMap();

 // Constructor
 
protected DelayTolerance(java.lang.String value, boolean isRegisterValue) {
 localDelayTolerance = value;
 if (isRegisterValue){

 _table_.put(localDelayTolerance, this);

 }

}
 
 public static final java.lang.String _NoDelay =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("NoDelay");

 public static final java.lang.String _LowDelay =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("LowDelay");

 public static final java.lang.String _DelayTolerant =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("DelayTolerant");

public static final DelayTolerance NoDelay =
 new DelayTolerance(_NoDelay,true);
 
public static final DelayTolerance LowDelay =
 new DelayTolerance(_LowDelay,true);
 
public static final DelayTolerance DelayTolerant =
 new DelayTolerance(_DelayTolerant,true);
 

public java.lang.String getValue() { return localDelayTolerance;}

public boolean equals(java.lang.Object obj) {return (obj == this);}
public int hashCode() { return toString().hashCode();}
public java.lang.String toString() {

return localDelayTolerance.toString();
 

}



  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 DelayTolerance.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 

//We can safely assume an element has only one type associated with it

 java.lang.String namespace = parentQName.getNamespaceURI();
 java.lang.String localName = parentQName.getLocalPart();

 if (! namespace.equals("")) {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix, localName, namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace, localName);
}

 } else {
xmlWriter.writeStartElement(localName);
 }

 // add the type details if this is used in a simple type
 if (serializeType){
java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/location");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":DelayTolerance",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"DelayTolerance",
xmlWriter);
}
 }
 
  if (localDelayTolerance==null){
 
  throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

 }else{

 xmlWriter.writeCharacters(localDelayTolerance);
 
 }
 
 xmlWriter.writeEndElement();

 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{




//We can safely assume an element has only one type associated with it
 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
 new java.lang.Object[]{
 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDelayTolerance)
 },
 null);

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{



public static DelayTolerance fromValue(java.lang.String value)
throws java.lang.IllegalArgumentException {
 DelayTolerance enumeration = (DelayTolerance)
 
 _table_.get(value);


 if (enumeration==null) throw new java.lang.IllegalArgumentException();
 return enumeration;
}
public static DelayTolerance fromString(java.lang.String value,java.lang.String namespaceURI)
throws java.lang.IllegalArgumentException {
 try {
 
 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


 } catch (java.lang.Exception e) {
throw new java.lang.IllegalArgumentException();
 }
}

public static DelayTolerance fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
 java.lang.String content) {
 if (content.indexOf(":") > -1){
java.lang.String prefix = content.substring(0,content.indexOf(":"));
java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
return DelayTolerance.Factory.fromString(content,namespaceUri);
 } else {
 return DelayTolerance.Factory.fromString(content,"");
 }
}
 

/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static DelayTolerance parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 DelayTolerance object = null;
// initialize a hash map to keep values
java.util.Map attributeMap = new java.util.HashMap();
java.util.List extraAttributeList = new java.util.ArrayList();
 

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
while(!reader.isEndElement()) {
 if (reader.isStartElement()  || reader.hasText()){

 java.lang.String content = reader.getElementText();
 
if (content.indexOf(":") > 0) {
 // this seems to be a Qname so find the namespace and send
 prefix = content.substring(0, content.indexOf(":"));
 namespaceuri = reader.getNamespaceURI(prefix);
 object = DelayTolerance.Factory.fromString(content,namespaceuri);
} else {
 // this seems to be not a qname send and empty namespace incase of it is
 // check is done in fromString method
 object = DelayTolerance.Factory.fromString(content,"");
}


  } else {
reader.next();
  }  
}  // end of while loop




 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class DeliveryStatus1
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/mms",
"DeliveryStatus",
"ns8");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/mms")){
return "ns8";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for DeliveryStatus
*/


 protected java.lang.String localDeliveryStatus ;

 private static java.util.HashMap _table_ = new java.util.HashMap();

 // Constructor
 
protected DeliveryStatus1(java.lang.String value, boolean isRegisterValue) {
 localDeliveryStatus = value;
 if (isRegisterValue){

 _table_.put(localDeliveryStatus, this);

 }

}
 
 public static final java.lang.String _DeliveredToNetwork =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("DeliveredToNetwork");

 public static final java.lang.String _DeliveryUncertain =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("DeliveryUncertain");

 public static final java.lang.String _DeliveryImpossible =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("DeliveryImpossible");

 public static final java.lang.String _MessageWaiting =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("MessageWaiting");

 public static final java.lang.String _DeliveredToTerminal =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("DeliveredToTerminal");

 public static final java.lang.String _DeliveryNotificationNotSupported =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("DeliveryNotificationNotSupported");

public static final DeliveryStatus1 DeliveredToNetwork =
 new DeliveryStatus1(_DeliveredToNetwork,true);
 
public static final DeliveryStatus1 DeliveryUncertain =
 new DeliveryStatus1(_DeliveryUncertain,true);
 
public static final DeliveryStatus1 DeliveryImpossible =
 new DeliveryStatus1(_DeliveryImpossible,true);
 
public static final DeliveryStatus1 MessageWaiting =
 new DeliveryStatus1(_MessageWaiting,true);
 
public static final DeliveryStatus1 DeliveredToTerminal =
 new DeliveryStatus1(_DeliveredToTerminal,true);
 
public static final DeliveryStatus1 DeliveryNotificationNotSupported =
 new DeliveryStatus1(_DeliveryNotificationNotSupported,true);
 

public java.lang.String getValue() { return localDeliveryStatus;}

public boolean equals(java.lang.Object obj) {return (obj == this);}
public int hashCode() { return toString().hashCode();}
public java.lang.String toString() {

return localDeliveryStatus.toString();
 

}



  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 DeliveryStatus1.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 

//We can safely assume an element has only one type associated with it

 java.lang.String namespace = parentQName.getNamespaceURI();
 java.lang.String localName = parentQName.getLocalPart();

 if (! namespace.equals("")) {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix, localName, namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace, localName);
}

 } else {
xmlWriter.writeStartElement(localName);
 }

 // add the type details if this is used in a simple type
 if (serializeType){
java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/mms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":DeliveryStatus",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"DeliveryStatus",
xmlWriter);
}
 }
 
  if (localDeliveryStatus==null){
 
  throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

 }else{

 xmlWriter.writeCharacters(localDeliveryStatus);
 
 }
 
 xmlWriter.writeEndElement();

 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{




//We can safely assume an element has only one type associated with it
 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
 new java.lang.Object[]{
 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeliveryStatus)
 },
 null);

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{



public static DeliveryStatus1 fromValue(java.lang.String value)
throws java.lang.IllegalArgumentException {
 DeliveryStatus1 enumeration = (DeliveryStatus1)
 
 _table_.get(value);


 if (enumeration==null) throw new java.lang.IllegalArgumentException();
 return enumeration;
}
public static DeliveryStatus1 fromString(java.lang.String value,java.lang.String namespaceURI)
throws java.lang.IllegalArgumentException {
 try {
 
 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


 } catch (java.lang.Exception e) {
throw new java.lang.IllegalArgumentException();
 }
}

public static DeliveryStatus1 fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
 java.lang.String content) {
 if (content.indexOf(":") > -1){
java.lang.String prefix = content.substring(0,content.indexOf(":"));
java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
return DeliveryStatus1.Factory.fromString(content,namespaceUri);
 } else {
 return DeliveryStatus1.Factory.fromString(content,"");
 }
}
 

/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static DeliveryStatus1 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 DeliveryStatus1 object = null;
// initialize a hash map to keep values
java.util.Map attributeMap = new java.util.HashMap();
java.util.List extraAttributeList = new java.util.ArrayList();
 

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
while(!reader.isEndElement()) {
 if (reader.isStartElement()  || reader.hasText()){

 java.lang.String content = reader.getElementText();
 
if (content.indexOf(":") > 0) {
 // this seems to be a Qname so find the namespace and send
 prefix = content.substring(0, content.indexOf(":"));
 namespaceuri = reader.getNamespaceURI(prefix);
 object = DeliveryStatus1.Factory.fromString(content,namespaceuri);
} else {
 // this seems to be not a qname send and empty namespace incase of it is
 // check is done in fromString method
 object = DeliveryStatus1.Factory.fromString(content,"");
}


  } else {
reader.next();
  }  
}  // end of while loop




 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class UssdContinueResponse
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ussd",
"ussdContinueResponse",
"ns4");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ussd")){
return "ns4";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for ReturnMessage
*/


 protected UssdArray localReturnMessage ;


/**
* Auto generated getter method
* @return UssdArray
*/
public  UssdArray getReturnMessage(){
 return localReturnMessage;
}



 /**
 * Auto generated setter method
 * @param param ReturnMessage
 */
 public void setReturnMessage(UssdArray param){
 
 this.localReturnMessage=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 UssdContinueResponse.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ussd");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":ussdContinueResponse",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"ussdContinueResponse",
xmlWriter);
}

 
}
 
 if (localReturnMessage==null){
 throw new org.apache.axis2.databinding.ADBException("returnMessage cannot be null!!");
 }
localReturnMessage.serialize(new javax.xml.namespace.QName("","returnMessage"),
 factory,xmlWriter);

 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


 elementList.add(new javax.xml.namespace.QName("",
"returnMessage"));
 
 
 if (localReturnMessage==null){
 throw new org.apache.axis2.databinding.ADBException("returnMessage cannot be null!!");
 }
 elementList.add(localReturnMessage);


return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static UssdContinueResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 UssdContinueResponse object =
new UssdContinueResponse();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"ussdContinueResponse".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (UssdContinueResponse)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","returnMessage").equals(reader.getName())){

object.setReturnMessage(UssdArray.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class GetSmsDeliveryStatusRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/sms",
"GetSmsDeliveryStatusRequest",
"ns7");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/sms")){
return "ns7";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for ApplicationID
*/


 protected java.lang.String localApplicationID ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApplicationID(){
 return localApplicationID;
}



 /**
 * Auto generated setter method
 * @param param ApplicationID
 */
 public void setApplicationID(java.lang.String param){
 
 this.localApplicationID=param;
 

 }
 

/**
* field for RequestIdentifier
*/


 protected java.lang.String localRequestIdentifier ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getRequestIdentifier(){
 return localRequestIdentifier;
}



 /**
 * Auto generated setter method
 * @param param RequestIdentifier
 */
 public void setRequestIdentifier(java.lang.String param){
 
 this.localRequestIdentifier=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 GetSmsDeliveryStatusRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/sms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":GetSmsDeliveryStatusRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"GetSmsDeliveryStatusRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApplicationID", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApplicationID");
}

 } else {
xmlWriter.writeStartElement("ApplicationID");
 }


  if (localApplicationID==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApplicationID);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"RequestIdentifier", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"RequestIdentifier");
}

 } else {
xmlWriter.writeStartElement("RequestIdentifier");
 }


  if (localRequestIdentifier==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localRequestIdentifier);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ApplicationID"));
 
 elementList.add(localApplicationID==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApplicationID));
 
elementList.add(new javax.xml.namespace.QName("",
"RequestIdentifier"));
 
 elementList.add(localRequestIdentifier==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestIdentifier));
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static GetSmsDeliveryStatusRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 GetSmsDeliveryStatusRequest object =
new GetSmsDeliveryStatusRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"GetSmsDeliveryStatusRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (GetSmsDeliveryStatusRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApplicationID").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApplicationID(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","RequestIdentifier").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setRequestIdentifier(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class TimeMetricsValues
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/common/v2_0",
"TimeMetricsValues",
"ns1");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/common/v2_0")){
return "ns1";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for TimeMetricsValues
*/


 protected java.lang.String localTimeMetricsValues ;

 private static java.util.HashMap _table_ = new java.util.HashMap();

 // Constructor
 
protected TimeMetricsValues(java.lang.String value, boolean isRegisterValue) {
 localTimeMetricsValues = value;
 if (isRegisterValue){

 _table_.put(localTimeMetricsValues, this);

 }

}
 
 public static final java.lang.String _Millisecond =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Millisecond");

 public static final java.lang.String _Second =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Second");

 public static final java.lang.String _Minute =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Minute");

 public static final java.lang.String _Hour =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Hour");

 public static final java.lang.String _Day =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Day");

 public static final java.lang.String _Week =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Week");

 public static final java.lang.String _Month =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Month");

 public static final java.lang.String _Year =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Year");

public static final TimeMetricsValues Millisecond =
 new TimeMetricsValues(_Millisecond,true);
 
public static final TimeMetricsValues Second =
 new TimeMetricsValues(_Second,true);
 
public static final TimeMetricsValues Minute =
 new TimeMetricsValues(_Minute,true);
 
public static final TimeMetricsValues Hour =
 new TimeMetricsValues(_Hour,true);
 
public static final TimeMetricsValues Day =
 new TimeMetricsValues(_Day,true);
 
public static final TimeMetricsValues Week =
 new TimeMetricsValues(_Week,true);
 
public static final TimeMetricsValues Month =
 new TimeMetricsValues(_Month,true);
 
public static final TimeMetricsValues Year =
 new TimeMetricsValues(_Year,true);
 

public java.lang.String getValue() { return localTimeMetricsValues;}

public boolean equals(java.lang.Object obj) {return (obj == this);}
public int hashCode() { return toString().hashCode();}
public java.lang.String toString() {

return localTimeMetricsValues.toString();
 

}



  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 TimeMetricsValues.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 

//We can safely assume an element has only one type associated with it

 java.lang.String namespace = parentQName.getNamespaceURI();
 java.lang.String localName = parentQName.getLocalPart();

 if (! namespace.equals("")) {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix, localName, namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace, localName);
}

 } else {
xmlWriter.writeStartElement(localName);
 }

 // add the type details if this is used in a simple type
 if (serializeType){
java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/common/v2_0");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":TimeMetricsValues",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"TimeMetricsValues",
xmlWriter);
}
 }
 
  if (localTimeMetricsValues==null){
 
  throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

 }else{

 xmlWriter.writeCharacters(localTimeMetricsValues);
 
 }
 
 xmlWriter.writeEndElement();

 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{




//We can safely assume an element has only one type associated with it
 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
 new java.lang.Object[]{
 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTimeMetricsValues)
 },
 null);

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{



public static TimeMetricsValues fromValue(java.lang.String value)
throws java.lang.IllegalArgumentException {
 TimeMetricsValues enumeration = (TimeMetricsValues)
 
 _table_.get(value);


 if (enumeration==null) throw new java.lang.IllegalArgumentException();
 return enumeration;
}
public static TimeMetricsValues fromString(java.lang.String value,java.lang.String namespaceURI)
throws java.lang.IllegalArgumentException {
 try {
 
 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


 } catch (java.lang.Exception e) {
throw new java.lang.IllegalArgumentException();
 }
}

public static TimeMetricsValues fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
 java.lang.String content) {
 if (content.indexOf(":") > -1){
java.lang.String prefix = content.substring(0,content.indexOf(":"));
java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
return TimeMetricsValues.Factory.fromString(content,namespaceUri);
 } else {
 return TimeMetricsValues.Factory.fromString(content,"");
 }
}
 

/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static TimeMetricsValues parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 TimeMetricsValues object = null;
// initialize a hash map to keep values
java.util.Map attributeMap = new java.util.HashMap();
java.util.List extraAttributeList = new java.util.ArrayList();
 

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
while(!reader.isEndElement()) {
 if (reader.isStartElement()  || reader.hasText()){

 java.lang.String content = reader.getElementText();
 
if (content.indexOf(":") > 0) {
 // this seems to be a Qname so find the namespace and send
 prefix = content.substring(0, content.indexOf(":"));
 namespaceuri = reader.getNamespaceURI(prefix);
 object = TimeMetricsValues.Factory.fromString(content,namespaceuri);
} else {
 // this seems to be not a qname send and empty namespace incase of it is
 // check is done in fromString method
 object = TimeMetricsValues.Factory.fromString(content,"");
}


  } else {
reader.next();
  }  
}  // end of while loop




 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class GetLocationForGroupRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/location",
"getLocationForGroupRequest",
"ns5");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/location")){
return "ns5";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Requester
*/


 protected org.apache.axis2.databinding.types.URI localRequester ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI
*/
public  org.apache.axis2.databinding.types.URI getRequester(){
 return localRequester;
}



 /**
 * Auto generated setter method
 * @param param Requester
 */
 public void setRequester(org.apache.axis2.databinding.types.URI param){
 
 this.localRequester=param;
 

 }
 

/**
* field for Addresses
* This was an Array!
*/


 protected org.apache.axis2.databinding.types.URI[] localAddresses ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI[]
*/
public  org.apache.axis2.databinding.types.URI[] getAddresses(){
 return localAddresses;
}





 
/**
 * validate the array for Addresses
 */
protected void validateAddresses(org.apache.axis2.databinding.types.URI[] param){
  
if ((param != null) && (param.length < 1)){
throw new java.lang.RuntimeException();
}

}


  /**
* Auto generated setter method
* @param param Addresses
*/
public void setAddresses(org.apache.axis2.databinding.types.URI[] param){

validateAddresses(param);

 
this.localAddresses=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param org.apache.axis2.databinding.types.URI
  */
  public void addAddresses(org.apache.axis2.databinding.types.URI param){
if (localAddresses == null){
localAddresses = new org.apache.axis2.databinding.types.URI[]{};
}

 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localAddresses);
 list.add(param);
 this.localAddresses =
  (org.apache.axis2.databinding.types.URI[])list.toArray(
 new org.apache.axis2.databinding.types.URI[list.size()]);

  }
  

/**
* field for RequestedAccuracy
*/


 protected int localRequestedAccuracy ;


/**
* Auto generated getter method
* @return int
*/
public  int getRequestedAccuracy(){
 return localRequestedAccuracy;
}



 /**
 * Auto generated setter method
 * @param param RequestedAccuracy
 */
 public void setRequestedAccuracy(int param){
 
 this.localRequestedAccuracy=param;
 

 }
 

/**
* field for AcceptableAccuracy
*/


 protected int localAcceptableAccuracy ;


/**
* Auto generated getter method
* @return int
*/
public  int getAcceptableAccuracy(){
 return localAcceptableAccuracy;
}



 /**
 * Auto generated setter method
 * @param param AcceptableAccuracy
 */
 public void setAcceptableAccuracy(int param){
 
 this.localAcceptableAccuracy=param;
 

 }
 

/**
* field for MaximumAge
*/


 protected TimeMetric localMaximumAge ;


/**
* Auto generated getter method
* @return TimeMetric
*/
public  TimeMetric getMaximumAge(){
 return localMaximumAge;
}



 /**
 * Auto generated setter method
 * @param param MaximumAge
 */
 public void setMaximumAge(TimeMetric param){
 
 this.localMaximumAge=param;
 

 }
 

/**
* field for ResponseTime
*/


 protected TimeMetric localResponseTime ;


/**
* Auto generated getter method
* @return TimeMetric
*/
public  TimeMetric getResponseTime(){
 return localResponseTime;
}



 /**
 * Auto generated setter method
 * @param param ResponseTime
 */
 public void setResponseTime(TimeMetric param){
 
 this.localResponseTime=param;
 

 }
 

/**
* field for Tolerance
*/


 protected DelayTolerance localTolerance ;


/**
* Auto generated getter method
* @return DelayTolerance
*/
public  DelayTolerance getTolerance(){
 return localTolerance;
}



 /**
 * Auto generated setter method
 * @param param Tolerance
 */
 public void setTolerance(DelayTolerance param){
 
 this.localTolerance=param;
 

 }
 

/**
* field for ApplicationId
*/


 protected java.lang.String localApplicationId ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApplicationId(){
 return localApplicationId;
}



 /**
 * Auto generated setter method
 * @param param ApplicationId
 */
 public void setApplicationId(java.lang.String param){
 
 this.localApplicationId=param;
 

 }
 

/**
* field for ServiceType
*/


 protected ServiceType localServiceType ;


/**
* Auto generated getter method
* @return ServiceType
*/
public  ServiceType getServiceType(){
 return localServiceType;
}



 /**
 * Auto generated setter method
 * @param param ServiceType
 */
 public void setServiceType(ServiceType param){
 
 this.localServiceType=param;
 

 }
 

/**
* field for Crs
*/


 protected CoordinateReferenceSystem localCrs ;


/**
* Auto generated getter method
* @return CoordinateReferenceSystem
*/
public  CoordinateReferenceSystem getCrs(){
 return localCrs;
}



 /**
 * Auto generated setter method
 * @param param Crs
 */
 public void setCrs(CoordinateReferenceSystem param){
 
 this.localCrs=param;
 

 }
 

/**
* field for LocType
*/


 protected LocType localLocType ;


/**
* Auto generated getter method
* @return LocType
*/
public  LocType getLocType(){
 return localLocType;
}



 /**
 * Auto generated setter method
 * @param param LocType
 */
 public void setLocType(LocType param){
 
 this.localLocType=param;
 

 }
 

/**
* field for Prio
*/


 protected Priority localPrio ;


/**
* Auto generated getter method
* @return Priority
*/
public  Priority getPrio(){
 return localPrio;
}



 /**
 * Auto generated setter method
 * @param param Prio
 */
 public void setPrio(Priority param){
 
 this.localPrio=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 GetLocationForGroupRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/location");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":getLocationForGroupRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"getLocationForGroupRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Requester", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Requester");
}

 } else {
xmlWriter.writeStartElement("Requester");
 }


  if (localRequester==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequester));
 
  }
 
xmlWriter.writeEndElement();
  
  if (localAddresses!=null) {
namespace = "";
boolean emptyNamespace = namespace == null || namespace.length() == 0;
prefix =  emptyNamespace ? null : xmlWriter.getPrefix(namespace);
for (int i = 0;i < localAddresses.length;i++){

 if (localAddresses[i] != null){

if (!emptyNamespace) {
 if (prefix == null) {
java.lang.String prefix2 = generatePrefix(namespace);

xmlWriter.writeStartElement(prefix2,"Addresses", namespace);
xmlWriter.writeNamespace(prefix2, namespace);
xmlWriter.setPrefix(prefix2, namespace);

 } else {
xmlWriter.writeStartElement(namespace,"Addresses");
 }

} else {
 xmlWriter.writeStartElement("Addresses");
}

 
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddresses[i]));
 
xmlWriter.writeEndElement();

} else {

// write null attribute
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Addresses", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Addresses");
}

 } else {
xmlWriter.writeStartElement("Addresses");
 }
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
 xmlWriter.writeEndElement();
 
}

}
  } else {
 
 // write the null attribute
// write null attribute
 java.lang.String namespace2 = "";
 if (! namespace2.equals("")) {
java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

if (prefix2 == null) {
 prefix2 = generatePrefix(namespace2);

 xmlWriter.writeStartElement(prefix2,"Addresses", namespace2);
 xmlWriter.writeNamespace(prefix2, namespace2);
 xmlWriter.setPrefix(prefix2, namespace2);

} else {
 xmlWriter.writeStartElement(namespace2,"Addresses");
}

 } else {
xmlWriter.writeStartElement("Addresses");
 }

// write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 
  }


 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"RequestedAccuracy", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"RequestedAccuracy");
}

 } else {
xmlWriter.writeStartElement("RequestedAccuracy");
 }

 if (localRequestedAccuracy==java.lang.Integer.MIN_VALUE) {

 throw new org.apache.axis2.databinding.ADBException("RequestedAccuracy cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestedAccuracy));
 }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"AcceptableAccuracy", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"AcceptableAccuracy");
}

 } else {
xmlWriter.writeStartElement("AcceptableAccuracy");
 }

 if (localAcceptableAccuracy==java.lang.Integer.MIN_VALUE) {

 throw new org.apache.axis2.databinding.ADBException("AcceptableAccuracy cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAcceptableAccuracy));
 }
 
xmlWriter.writeEndElement();
  
 if (localMaximumAge==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"MaximumAge", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"MaximumAge");
 }

} else {
 xmlWriter.writeStartElement("MaximumAge");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localMaximumAge.serialize(new javax.xml.namespace.QName("","MaximumAge"),
factory,xmlWriter);
 }

 if (localResponseTime==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"ResponseTime", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"ResponseTime");
 }

} else {
 xmlWriter.writeStartElement("ResponseTime");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localResponseTime.serialize(new javax.xml.namespace.QName("","ResponseTime"),
factory,xmlWriter);
 }

 if (localTolerance==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"Tolerance", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"Tolerance");
 }

} else {
 xmlWriter.writeStartElement("Tolerance");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localTolerance.serialize(new javax.xml.namespace.QName("","Tolerance"),
factory,xmlWriter);
 }

 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApplicationId", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApplicationId");
}

 } else {
xmlWriter.writeStartElement("ApplicationId");
 }


  if (localApplicationId==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApplicationId);
 
  }
 
xmlWriter.writeEndElement();
  
 if (localServiceType==null){
 throw new org.apache.axis2.databinding.ADBException("serviceType cannot be null!!");
 }
localServiceType.serialize(new javax.xml.namespace.QName("","serviceType"),
 factory,xmlWriter);

 if (localCrs==null){
 throw new org.apache.axis2.databinding.ADBException("crs cannot be null!!");
 }
localCrs.serialize(new javax.xml.namespace.QName("","crs"),
 factory,xmlWriter);

 if (localLocType==null){
 throw new org.apache.axis2.databinding.ADBException("locType cannot be null!!");
 }
localLocType.serialize(new javax.xml.namespace.QName("","locType"),
 factory,xmlWriter);

 if (localPrio==null){
 throw new org.apache.axis2.databinding.ADBException("prio cannot be null!!");
 }
localPrio.serialize(new javax.xml.namespace.QName("","prio"),
 factory,xmlWriter);

 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"Requester"));
 
 elementList.add(localRequester==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequester));
 
 if (localAddresses!=null){
  for (int i = 0;i < localAddresses.length;i++){

 if (localAddresses[i] != null){
  elementList.add(new javax.xml.namespace.QName("",
"Addresses"));
  elementList.add(
  org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddresses[i]));
  } else {
  
 elementList.add(new javax.xml.namespace.QName("",
"Addresses"));
 elementList.add(null);

  }


  }
 } else {

 elementList.add(new javax.xml.namespace.QName("",
"Addresses"));
 elementList.add(null);

 }


elementList.add(new javax.xml.namespace.QName("",
"RequestedAccuracy"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestedAccuracy));
 
elementList.add(new javax.xml.namespace.QName("",
"AcceptableAccuracy"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAcceptableAccuracy));
 
 elementList.add(new javax.xml.namespace.QName("",
"MaximumAge"));
 
 
 elementList.add(localMaximumAge==null?null:
 localMaximumAge);

 elementList.add(new javax.xml.namespace.QName("",
"ResponseTime"));
 
 
 elementList.add(localResponseTime==null?null:
 localResponseTime);

 elementList.add(new javax.xml.namespace.QName("",
"Tolerance"));
 
 
 elementList.add(localTolerance==null?null:
 localTolerance);

elementList.add(new javax.xml.namespace.QName("",
"ApplicationId"));
 
 elementList.add(localApplicationId==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApplicationId));
 
 elementList.add(new javax.xml.namespace.QName("",
"serviceType"));
 
 
 if (localServiceType==null){
 throw new org.apache.axis2.databinding.ADBException("serviceType cannot be null!!");
 }
 elementList.add(localServiceType);

 elementList.add(new javax.xml.namespace.QName("",
"crs"));
 
 
 if (localCrs==null){
 throw new org.apache.axis2.databinding.ADBException("crs cannot be null!!");
 }
 elementList.add(localCrs);

 elementList.add(new javax.xml.namespace.QName("",
"locType"));
 
 
 if (localLocType==null){
 throw new org.apache.axis2.databinding.ADBException("locType cannot be null!!");
 }
 elementList.add(localLocType);

 elementList.add(new javax.xml.namespace.QName("",
"prio"));
 
 
 if (localPrio==null){
 throw new org.apache.axis2.databinding.ADBException("prio cannot be null!!");
 }
 elementList.add(localPrio);


return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static GetLocationForGroupRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 GetLocationForGroupRequest object =
new GetLocationForGroupRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"getLocationForGroupRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (GetLocationForGroupRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list2 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Requester").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setRequester(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Addresses").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 
nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  list2.add(null);
 
  reader.next();
} else {
 list2.add(reader.getElementText());
 }
 //loop until we find a start element that is not part of this array
 boolean loopDone2 = false;
 while(!loopDone2){
// Ensure we are at the EndElement
while (!reader.isEndElement()){
 reader.next();
}
// Step out of this element
reader.next();
// Step to next element event.
while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();
if (reader.isEndElement()){
 //two continuous end elements means we are exiting the xml structure
 loopDone2 = true;
} else {
 if (new javax.xml.namespace.QName("","Addresses").equals(reader.getName())){
 
  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
list2.add(null);

reader.next();
  } else {
list2.add(reader.getElementText());
}
 }else{
loopDone2 = true;
 }
}
 }
 // call the converter utility  to convert and set the array
 
 object.setAddresses((org.apache.axis2.databinding.types.URI[])
org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
 org.apache.axis2.databinding.types.URI.class,list2));

}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","RequestedAccuracy").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setRequestedAccuracy(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","AcceptableAccuracy").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAcceptableAccuracy(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","MaximumAge").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setMaximumAge(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setMaximumAge(TimeMetric.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ResponseTime").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setResponseTime(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setResponseTime(TimeMetric.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Tolerance").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setTolerance(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setTolerance(DelayTolerance.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApplicationId").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApplicationId(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","serviceType").equals(reader.getName())){

object.setServiceType(ServiceType.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","crs").equals(reader.getName())){

object.setCrs(CoordinateReferenceSystem.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","locType").equals(reader.getName())){

object.setLocType(LocType.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","prio").equals(reader.getName())){

object.setPrio(Priority.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class HandleUssdRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ussd",
"handleUssdRequest",
"ns4");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ussd")){
return "ns4";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for UssdIdentifier
*/


 protected java.lang.String localUssdIdentifier ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getUssdIdentifier(){
 return localUssdIdentifier;
}



 /**
 * Auto generated setter method
 * @param param UssdIdentifier
 */
 public void setUssdIdentifier(java.lang.String param){
 
 this.localUssdIdentifier=param;
 

 }
 

/**
* field for SenderAddress
*/


 protected org.apache.axis2.databinding.types.URI localSenderAddress ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI
*/
public  org.apache.axis2.databinding.types.URI getSenderAddress(){
 return localSenderAddress;
}



 /**
 * Auto generated setter method
 * @param param SenderAddress
 */
 public void setSenderAddress(org.apache.axis2.databinding.types.URI param){
 
 this.localSenderAddress=param;
 

 }
 

/**
* field for UssdMessage
*/


 protected java.lang.String localUssdMessage ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getUssdMessage(){
 return localUssdMessage;
}



 /**
 * Auto generated setter method
 * @param param UssdMessage
 */
 public void setUssdMessage(java.lang.String param){
 
 this.localUssdMessage=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 HandleUssdRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ussd");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":handleUssdRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"handleUssdRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ussdIdentifier", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ussdIdentifier");
}

 } else {
xmlWriter.writeStartElement("ussdIdentifier");
 }


  if (localUssdIdentifier==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("ussdIdentifier cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localUssdIdentifier);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"senderAddress", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"senderAddress");
}

 } else {
xmlWriter.writeStartElement("senderAddress");
 }


  if (localSenderAddress==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("senderAddress cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderAddress));
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ussdMessage", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ussdMessage");
}

 } else {
xmlWriter.writeStartElement("ussdMessage");
 }


  if (localUssdMessage==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("ussdMessage cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localUssdMessage);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ussdIdentifier"));
 
if (localUssdIdentifier != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUssdIdentifier));
} else {
throw new org.apache.axis2.databinding.ADBException("ussdIdentifier cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"senderAddress"));
 
if (localSenderAddress != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSenderAddress));
} else {
throw new org.apache.axis2.databinding.ADBException("senderAddress cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"ussdMessage"));
 
if (localUssdMessage != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUssdMessage));
} else {
throw new org.apache.axis2.databinding.ADBException("ussdMessage cannot be null!!");
}
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static HandleUssdRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 HandleUssdRequest object =
new HandleUssdRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"handleUssdRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (HandleUssdRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ussdIdentifier").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setUssdIdentifier(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","senderAddress").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setSenderAddress(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ussdMessage").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setUssdMessage(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class RecoveryAPRsp
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ap",
"RecoveryAPRsp",
"ns2");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ap")){
return "ns2";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for ACK
*/


 protected boolean localACK ;


/**
* Auto generated getter method
* @return boolean
*/
public  boolean getACK(){
 return localACK;
}



 /**
 * Auto generated setter method
 * @param param ACK
 */
 public void setACK(boolean param){
 
 this.localACK=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 RecoveryAPRsp.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":RecoveryAPRsp",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"RecoveryAPRsp",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ACK", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ACK");
}

 } else {
xmlWriter.writeStartElement("ACK");
 }

 if (false) {

 throw new org.apache.axis2.databinding.ADBException("ACK cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localACK));
 }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ACK"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localACK));
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static RecoveryAPRsp parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 RecoveryAPRsp object =
new RecoveryAPRsp();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"RecoveryAPRsp".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (RecoveryAPRsp)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ACK").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setACK(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class HandleUssdResponse
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ussd",
"handleUssdResponse",
"ns4");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ussd")){
return "ns4";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Result
*/


 protected UssdArray localResult ;


/**
* Auto generated getter method
* @return UssdArray
*/
public  UssdArray getResult(){
 return localResult;
}



 /**
 * Auto generated setter method
 * @param param Result
 */
 public void setResult(UssdArray param){
 
 this.localResult=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 HandleUssdResponse.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ussd");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":handleUssdResponse",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"handleUssdResponse",
xmlWriter);
}

 
}
 
 if (localResult==null){
 throw new org.apache.axis2.databinding.ADBException("result cannot be null!!");
 }
localResult.serialize(new javax.xml.namespace.QName("","result"),
 factory,xmlWriter);

 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


 elementList.add(new javax.xml.namespace.QName("",
"result"));
 
 
 if (localResult==null){
 throw new org.apache.axis2.databinding.ADBException("result cannot be null!!");
 }
 elementList.add(localResult);


return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static HandleUssdResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 HandleUssdResponse object =
new HandleUssdResponse();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"handleUssdResponse".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (HandleUssdResponse)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","result").equals(reader.getName())){

object.setResult(UssdArray.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class LocationData
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
name = LocationData
Namespace URI = http://www.csapi.org/schema/location
Namespace Prefix = ns5
*/
 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/location")){
return "ns5";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Address
*/


 protected org.apache.axis2.databinding.types.URI localAddress ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI
*/
public  org.apache.axis2.databinding.types.URI getAddress(){
 return localAddress;
}



 /**
 * Auto generated setter method
 * @param param Address
 */
 public void setAddress(org.apache.axis2.databinding.types.URI param){
 
 this.localAddress=param;
 

 }
 

/**
* field for ReportStatus
*/


 protected RetrievalStatus localReportStatus ;


/**
* Auto generated getter method
* @return RetrievalStatus
*/
public  RetrievalStatus getReportStatus(){
 return localReportStatus;
}



 /**
 * Auto generated setter method
 * @param param ReportStatus
 */
 public void setReportStatus(RetrievalStatus param){
 
 this.localReportStatus=param;
 

 }
 

/**
* field for CurrentLocation
*/


 protected LocationInfo localCurrentLocation ;


/**
* Auto generated getter method
* @return LocationInfo
*/
public  LocationInfo getCurrentLocation(){
 return localCurrentLocation;
}



 /**
 * Auto generated setter method
 * @param param CurrentLocation
 */
 public void setCurrentLocation(LocationInfo param){
 
 this.localCurrentLocation=param;
 

 }
 

/**
* field for ErrorInformation
*/


 protected ServiceError localErrorInformation ;


/**
* Auto generated getter method
* @return ServiceError
*/
public  ServiceError getErrorInformation(){
 return localErrorInformation;
}



 /**
 * Auto generated setter method
 * @param param ErrorInformation
 */
 public void setErrorInformation(ServiceError param){
 
 this.localErrorInformation=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



 org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 LocationData.this.serialize(parentQName,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 parentQName,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/location");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":LocationData",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"LocationData",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Address", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Address");
}

 } else {
xmlWriter.writeStartElement("Address");
 }


  if (localAddress==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddress));
 
  }
 
xmlWriter.writeEndElement();
  
 if (localReportStatus==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"ReportStatus", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"ReportStatus");
 }

} else {
 xmlWriter.writeStartElement("ReportStatus");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localReportStatus.serialize(new javax.xml.namespace.QName("","ReportStatus"),
factory,xmlWriter);
 }

 if (localCurrentLocation==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"CurrentLocation", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"CurrentLocation");
 }

} else {
 xmlWriter.writeStartElement("CurrentLocation");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localCurrentLocation.serialize(new javax.xml.namespace.QName("","CurrentLocation"),
factory,xmlWriter);
 }

 if (localErrorInformation==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"ErrorInformation", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"ErrorInformation");
 }

} else {
 xmlWriter.writeStartElement("ErrorInformation");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localErrorInformation.serialize(new javax.xml.namespace.QName("","ErrorInformation"),
factory,xmlWriter);
 }

 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"Address"));
 
 elementList.add(localAddress==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddress));
 
 elementList.add(new javax.xml.namespace.QName("",
"ReportStatus"));
 
 
 elementList.add(localReportStatus==null?null:
 localReportStatus);

 elementList.add(new javax.xml.namespace.QName("",
"CurrentLocation"));
 
 
 elementList.add(localCurrentLocation==null?null:
 localCurrentLocation);

 elementList.add(new javax.xml.namespace.QName("",
"ErrorInformation"));
 
 
 elementList.add(localErrorInformation==null?null:
 localErrorInformation);


return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static LocationData parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 LocationData object =
new LocationData();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"LocationData".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (LocationData)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Address").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setAddress(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ReportStatus").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setReportStatus(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setReportStatus(RetrievalStatus.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","CurrentLocation").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setCurrentLocation(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setCurrentLocation(LocationInfo.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ErrorInformation").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setErrorInformation(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setErrorInformation(ServiceError.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class GetReceivedMessagesRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/mms",
"getReceivedMessagesRequest",
"ns8");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/mms")){
return "ns8";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for ApplicationID
*/


 protected java.lang.String localApplicationID ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApplicationID(){
 return localApplicationID;
}



 /**
 * Auto generated setter method
 * @param param ApplicationID
 */
 public void setApplicationID(java.lang.String param){
 
 this.localApplicationID=param;
 

 }
 

/**
* field for Priority
*/


 protected MessagePriority localPriority ;


/**
* Auto generated getter method
* @return MessagePriority
*/
public  MessagePriority getPriority(){
 return localPriority;
}



 /**
 * Auto generated setter method
 * @param param Priority
 */
 public void setPriority(MessagePriority param){
 
 this.localPriority=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 GetReceivedMessagesRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/mms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":getReceivedMessagesRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"getReceivedMessagesRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApplicationID", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApplicationID");
}

 } else {
xmlWriter.writeStartElement("ApplicationID");
 }


  if (localApplicationID==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApplicationID);
 
  }
 
xmlWriter.writeEndElement();
  
 if (localPriority==null){
 throw new org.apache.axis2.databinding.ADBException("priority cannot be null!!");
 }
localPriority.serialize(new javax.xml.namespace.QName("","priority"),
 factory,xmlWriter);

 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ApplicationID"));
 
 elementList.add(localApplicationID==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApplicationID));
 
 elementList.add(new javax.xml.namespace.QName("",
"priority"));
 
 
 if (localPriority==null){
 throw new org.apache.axis2.databinding.ADBException("priority cannot be null!!");
 }
 elementList.add(localPriority);


return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static GetReceivedMessagesRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 GetReceivedMessagesRequest object =
new GetReceivedMessagesRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"getReceivedMessagesRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (GetReceivedMessagesRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApplicationID").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApplicationID(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","priority").equals(reader.getName())){

object.setPriority(MessagePriority.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class NotifyPushDeliveryReceiptRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/wap",
"notifyPushDeliveryReceiptRequest",
"ns3");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/wap")){
return "ns3";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for RequestIdentifier
*/


 protected java.lang.String localRequestIdentifier ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getRequestIdentifier(){
 return localRequestIdentifier;
}



 /**
 * Auto generated setter method
 * @param param RequestIdentifier
 */
 public void setRequestIdentifier(java.lang.String param){
 
 this.localRequestIdentifier=param;
 

 }
 

/**
* field for DeliveryStatus
* This was an Array!
*/


 protected DeliveryInformation[] localDeliveryStatus ;


/**
* Auto generated getter method
* @return DeliveryInformation[]
*/
public  DeliveryInformation[] getDeliveryStatus(){
 return localDeliveryStatus;
}





 
/**
 * validate the array for DeliveryStatus
 */
protected void validateDeliveryStatus(DeliveryInformation[] param){
  
if ((param != null) && (param.length < 1)){
throw new java.lang.RuntimeException();
}

}


  /**
* Auto generated setter method
* @param param DeliveryStatus
*/
public void setDeliveryStatus(DeliveryInformation[] param){

validateDeliveryStatus(param);

 
this.localDeliveryStatus=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param DeliveryInformation
  */
  public void addDeliveryStatus(DeliveryInformation param){
if (localDeliveryStatus == null){
localDeliveryStatus = new DeliveryInformation[]{};
}

 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localDeliveryStatus);
 list.add(param);
 this.localDeliveryStatus =
  (DeliveryInformation[])list.toArray(
 new DeliveryInformation[list.size()]);

  }
  

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 NotifyPushDeliveryReceiptRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/wap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":notifyPushDeliveryReceiptRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"notifyPushDeliveryReceiptRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"requestIdentifier", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"requestIdentifier");
}

 } else {
xmlWriter.writeStartElement("requestIdentifier");
 }


  if (localRequestIdentifier==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("requestIdentifier cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localRequestIdentifier);
 
  }
 
xmlWriter.writeEndElement();
  
 if (localDeliveryStatus!=null){
 for (int i = 0;i < localDeliveryStatus.length;i++){
if (localDeliveryStatus[i] != null){
 localDeliveryStatus[i].serialize(new javax.xml.namespace.QName("","deliveryStatus"),
factory,xmlWriter);
} else {

throw new org.apache.axis2.databinding.ADBException("deliveryStatus cannot be null!!");
 
}

 }
  } else {

 throw new org.apache.axis2.databinding.ADBException("deliveryStatus cannot be null!!");

 }
 
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"requestIdentifier"));
 
if (localRequestIdentifier != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestIdentifier));
} else {
throw new org.apache.axis2.databinding.ADBException("requestIdentifier cannot be null!!");
}
 
  if (localDeliveryStatus!=null) {
 for (int i = 0;i < localDeliveryStatus.length;i++){

 if (localDeliveryStatus[i] != null){
 elementList.add(new javax.xml.namespace.QName("",
  "deliveryStatus"));
 elementList.add(localDeliveryStatus[i]);
 } else {

 throw new org.apache.axis2.databinding.ADBException("deliveryStatus cannot be null !!");
 
 }

 }
  } else {
 
throw new org.apache.axis2.databinding.ADBException("deliveryStatus cannot be null!!");
 
  }



return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static NotifyPushDeliveryReceiptRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 NotifyPushDeliveryReceiptRequest object =
new NotifyPushDeliveryReceiptRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"notifyPushDeliveryReceiptRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (NotifyPushDeliveryReceiptRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list2 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","requestIdentifier").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setRequestIdentifier(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","deliveryStatus").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 list2.add(DeliveryInformation.Factory.parse(reader));

//loop until we find a start element that is not part of this array
boolean loopDone2 = false;
while(!loopDone2){
 // We should be at the end element, but make sure
 while (!reader.isEndElement())
reader.next();
 // Step out of this element
 reader.next();
 // Step to next element event.
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 if (reader.isEndElement()){
//two continuous end elements means we are exiting the xml structure
loopDone2 = true;
 } else {
if (new javax.xml.namespace.QName("","deliveryStatus").equals(reader.getName())){
 list2.add(DeliveryInformation.Factory.parse(reader));

}else{
 loopDone2 = true;
}
 }
}
// call the converter utility  to convert and set the array

object.setDeliveryStatus((DeliveryInformation[])
 org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
DeliveryInformation.class,
list2));
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class Priority
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/location",
"Priority",
"ns5");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/location")){
return "ns5";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Priority
*/


 protected java.lang.String localPriority ;

 private static java.util.HashMap _table_ = new java.util.HashMap();

 // Constructor
 
protected Priority(java.lang.String value, boolean isRegisterValue) {
 localPriority = value;
 if (isRegisterValue){

 _table_.put(localPriority, this);

 }

}
 
 public static final java.lang.String _NORMAL =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("NORMAL");

 public static final java.lang.String _HIGH =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("HIGH");

public static final Priority NORMAL =
 new Priority(_NORMAL,true);
 
public static final Priority HIGH =
 new Priority(_HIGH,true);
 

public java.lang.String getValue() { return localPriority;}

public boolean equals(java.lang.Object obj) {return (obj == this);}
public int hashCode() { return toString().hashCode();}
public java.lang.String toString() {

return localPriority.toString();
 

}



  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 Priority.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 

//We can safely assume an element has only one type associated with it

 java.lang.String namespace = parentQName.getNamespaceURI();
 java.lang.String localName = parentQName.getLocalPart();

 if (! namespace.equals("")) {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix, localName, namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace, localName);
}

 } else {
xmlWriter.writeStartElement(localName);
 }

 // add the type details if this is used in a simple type
 if (serializeType){
java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/location");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":Priority",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"Priority",
xmlWriter);
}
 }
 
  if (localPriority==null){
 
  throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

 }else{

 xmlWriter.writeCharacters(localPriority);
 
 }
 
 xmlWriter.writeEndElement();

 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{




//We can safely assume an element has only one type associated with it
 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
 new java.lang.Object[]{
 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPriority)
 },
 null);

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{



public static Priority fromValue(java.lang.String value)
throws java.lang.IllegalArgumentException {
 Priority enumeration = (Priority)
 
 _table_.get(value);


 if (enumeration==null) throw new java.lang.IllegalArgumentException();
 return enumeration;
}
public static Priority fromString(java.lang.String value,java.lang.String namespaceURI)
throws java.lang.IllegalArgumentException {
 try {
 
 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


 } catch (java.lang.Exception e) {
throw new java.lang.IllegalArgumentException();
 }
}

public static Priority fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
 java.lang.String content) {
 if (content.indexOf(":") > -1){
java.lang.String prefix = content.substring(0,content.indexOf(":"));
java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
return Priority.Factory.fromString(content,namespaceUri);
 } else {
 return Priority.Factory.fromString(content,"");
 }
}
 

/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static Priority parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 Priority object = null;
// initialize a hash map to keep values
java.util.Map attributeMap = new java.util.HashMap();
java.util.List extraAttributeList = new java.util.ArrayList();
 

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
while(!reader.isEndElement()) {
 if (reader.isStartElement()  || reader.hasText()){

 java.lang.String content = reader.getElementText();
 
if (content.indexOf(":") > 0) {
 // this seems to be a Qname so find the namespace and send
 prefix = content.substring(0, content.indexOf(":"));
 namespaceuri = reader.getNamespaceURI(prefix);
 object = Priority.Factory.fromString(content,namespaceuri);
} else {
 // this seems to be not a qname send and empty namespace incase of it is
 // check is done in fromString method
 object = Priority.Factory.fromString(content,"");
}


  } else {
reader.next();
  }  
}  // end of while loop




 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class ServiceException
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
name = ServiceException
Namespace URI = http://www.csapi.org/schema/common/v2_0
Namespace Prefix = ns1
*/
 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/common/v2_0")){
return "ns1";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for MessageId
*/


 protected java.lang.String localMessageId ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getMessageId(){
 return localMessageId;
}



 /**
 * Auto generated setter method
 * @param param MessageId
 */
 public void setMessageId(java.lang.String param){
 
 this.localMessageId=param;
 

 }
 

/**
* field for Text
*/


 protected java.lang.String localText ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getText(){
 return localText;
}



 /**
 * Auto generated setter method
 * @param param Text
 */
 public void setText(java.lang.String param){
 
 this.localText=param;
 

 }
 

/**
* field for Variables
* This was an Array!
*/


 protected java.lang.String[] localVariables ;

/*  This tracker boolean wil be used to detect whether the user called the set method
  *for this attribute. It will be used to determine whether to include this field
*in the serialized XML
*/
protected boolean localVariablesTracker = false ;


/**
* Auto generated getter method
* @return java.lang.String[]
*/
public  java.lang.String[] getVariables(){
 return localVariables;
}





 
/**
 * validate the array for Variables
 */
protected void validateVariables(java.lang.String[] param){
  
}


  /**
* Auto generated setter method
* @param param Variables
*/
public void setVariables(java.lang.String[] param){

validateVariables(param);

 
  if (param != null){
  //update the setting tracker
  localVariablesTracker = true;
  } else {
  localVariablesTracker = true;
 
  }

this.localVariables=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param java.lang.String
  */
  public void addVariables(java.lang.String param){
if (localVariables == null){
localVariables = new java.lang.String[]{};
}

 
 //update the setting tracker
localVariablesTracker = true;
 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localVariables);
 list.add(param);
 this.localVariables =
  (java.lang.String[])list.toArray(
 new java.lang.String[list.size()]);

  }
  

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



 org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 ServiceException.this.serialize(parentQName,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 parentQName,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/common/v2_0");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":ServiceException",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"ServiceException",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"MessageId", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"MessageId");
}

 } else {
xmlWriter.writeStartElement("MessageId");
 }


  if (localMessageId==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localMessageId);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Text", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Text");
}

 } else {
xmlWriter.writeStartElement("Text");
 }


  if (localText==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localText);
 
  }
 
xmlWriter.writeEndElement();
if (localVariablesTracker){
  if (localVariables!=null) {
namespace = "";
boolean emptyNamespace = namespace == null || namespace.length() == 0;
prefix =  emptyNamespace ? null : xmlWriter.getPrefix(namespace);
for (int i = 0;i < localVariables.length;i++){

 if (localVariables[i] != null){

if (!emptyNamespace) {
 if (prefix == null) {
java.lang.String prefix2 = generatePrefix(namespace);

xmlWriter.writeStartElement(prefix2,"Variables", namespace);
xmlWriter.writeNamespace(prefix2, namespace);
xmlWriter.setPrefix(prefix2, namespace);

 } else {
xmlWriter.writeStartElement(namespace,"Variables");
 }

} else {
 xmlWriter.writeStartElement("Variables");
}

 
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVariables[i]));
 
xmlWriter.writeEndElement();

} else {

// write null attribute
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Variables", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Variables");
}

 } else {
xmlWriter.writeStartElement("Variables");
 }
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
 xmlWriter.writeEndElement();
 
}

}
  } else {
 
 // write the null attribute
// write null attribute
 java.lang.String namespace2 = "";
 if (! namespace2.equals("")) {
java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

if (prefix2 == null) {
 prefix2 = generatePrefix(namespace2);

 xmlWriter.writeStartElement(prefix2,"Variables", namespace2);
 xmlWriter.writeNamespace(prefix2, namespace2);
 xmlWriter.setPrefix(prefix2, namespace2);

} else {
 xmlWriter.writeStartElement(namespace2,"Variables");
}

 } else {
xmlWriter.writeStartElement("Variables");
 }

// write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 
  }

}
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"MessageId"));
 
 elementList.add(localMessageId==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMessageId));
 
elementList.add(new javax.xml.namespace.QName("",
"Text"));
 
 elementList.add(localText==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localText));
  if (localVariablesTracker){
 if (localVariables!=null){
  for (int i = 0;i < localVariables.length;i++){

 if (localVariables[i] != null){
  elementList.add(new javax.xml.namespace.QName("",
"Variables"));
  elementList.add(
  org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVariables[i]));
  } else {
  
 elementList.add(new javax.xml.namespace.QName("",
"Variables"));
 elementList.add(null);

  }


  }
 } else {

 elementList.add(new javax.xml.namespace.QName("",
"Variables"));
 elementList.add(null);

 }

}

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ServiceException parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 ServiceException object =
new ServiceException();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"ServiceException".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (ServiceException)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list3 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","MessageId").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setMessageId(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Text").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setText(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Variables").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 
nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  list3.add(null);
 
  reader.next();
} else {
 list3.add(reader.getElementText());
 }
 //loop until we find a start element that is not part of this array
 boolean loopDone3 = false;
 while(!loopDone3){
// Ensure we are at the EndElement
while (!reader.isEndElement()){
 reader.next();
}
// Step out of this element
reader.next();
// Step to next element event.
while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();
if (reader.isEndElement()){
 //two continuous end elements means we are exiting the xml structure
 loopDone3 = true;
} else {
 if (new javax.xml.namespace.QName("","Variables").equals(reader.getName())){
 
  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
list3.add(null);

reader.next();
  } else {
list3.add(reader.getElementText());
}
 }else{
loopDone3 = true;
 }
}
 }
 // call the converter utility  to convert and set the array
 
 object.setVariables((java.lang.String[])
list3.toArray(new java.lang.String[list3.size()]));

}  // End of if for expected property start element

 else {

 }
  
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class EndReason
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ussd",
"EndReason",
"ns4");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ussd")){
return "ns4";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for EndReason
*/


 protected java.lang.String localEndReason ;

 private static java.util.HashMap _table_ = new java.util.HashMap();

 // Constructor
 
protected EndReason(java.lang.String value, boolean isRegisterValue) {
 localEndReason = value;
 if (isRegisterValue){

 _table_.put(localEndReason, this);

 }

}
 
 public static final java.lang.String _UserEnd =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("UserEnd");

 public static final java.lang.String _Busy =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Busy");

 public static final java.lang.String _UserAbsent =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("UserAbsent");

 public static final java.lang.String _IllegalEquipment =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("IllegalEquipment");

 public static final java.lang.String _SystemError =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("SystemError");

 public static final java.lang.String _TimeOut =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("TimeOut");

public static final EndReason UserEnd =
 new EndReason(_UserEnd,true);
 
public static final EndReason Busy =
 new EndReason(_Busy,true);
 
public static final EndReason UserAbsent =
 new EndReason(_UserAbsent,true);
 
public static final EndReason IllegalEquipment =
 new EndReason(_IllegalEquipment,true);
 
public static final EndReason SystemError =
 new EndReason(_SystemError,true);
 
public static final EndReason TimeOut =
 new EndReason(_TimeOut,true);
 

public java.lang.String getValue() { return localEndReason;}

public boolean equals(java.lang.Object obj) {return (obj == this);}
public int hashCode() { return toString().hashCode();}
public java.lang.String toString() {

return localEndReason.toString();
 

}



  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 EndReason.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 

//We can safely assume an element has only one type associated with it

 java.lang.String namespace = parentQName.getNamespaceURI();
 java.lang.String localName = parentQName.getLocalPart();

 if (! namespace.equals("")) {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix, localName, namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace, localName);
}

 } else {
xmlWriter.writeStartElement(localName);
 }

 // add the type details if this is used in a simple type
 if (serializeType){
java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ussd");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":EndReason",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"EndReason",
xmlWriter);
}
 }
 
  if (localEndReason==null){
 
  throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

 }else{

 xmlWriter.writeCharacters(localEndReason);
 
 }
 
 xmlWriter.writeEndElement();

 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{




//We can safely assume an element has only one type associated with it
 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
 new java.lang.Object[]{
 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEndReason)
 },
 null);

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{



public static EndReason fromValue(java.lang.String value)
throws java.lang.IllegalArgumentException {
 EndReason enumeration = (EndReason)
 
 _table_.get(value);


 if (enumeration==null) throw new java.lang.IllegalArgumentException();
 return enumeration;
}
public static EndReason fromString(java.lang.String value,java.lang.String namespaceURI)
throws java.lang.IllegalArgumentException {
 try {
 
 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


 } catch (java.lang.Exception e) {
throw new java.lang.IllegalArgumentException();
 }
}

public static EndReason fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
 java.lang.String content) {
 if (content.indexOf(":") > -1){
java.lang.String prefix = content.substring(0,content.indexOf(":"));
java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
return EndReason.Factory.fromString(content,namespaceUri);
 } else {
 return EndReason.Factory.fromString(content,"");
 }
}
 

/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static EndReason parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 EndReason object = null;
// initialize a hash map to keep values
java.util.Map attributeMap = new java.util.HashMap();
java.util.List extraAttributeList = new java.util.ArrayList();
 

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
while(!reader.isEndElement()) {
 if (reader.isStartElement()  || reader.hasText()){

 java.lang.String content = reader.getElementText();
 
if (content.indexOf(":") > 0) {
 // this seems to be a Qname so find the namespace and send
 prefix = content.substring(0, content.indexOf(":"));
 namespaceuri = reader.getNamespaceURI(prefix);
 object = EndReason.Factory.fromString(content,namespaceuri);
} else {
 // this seems to be not a qname send and empty namespace incase of it is
 // check is done in fromString method
 object = EndReason.Factory.fromString(content,"");
}


  } else {
reader.next();
  }  
}  // end of while loop




 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class SendSmsRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/sms",
"sendSmsRequest",
"ns7");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/sms")){
return "ns7";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for ApplicationID
*/


 protected java.lang.String localApplicationID ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApplicationID(){
 return localApplicationID;
}



 /**
 * Auto generated setter method
 * @param param ApplicationID
 */
 public void setApplicationID(java.lang.String param){
 
 this.localApplicationID=param;
 

 }
 

/**
* field for DestinationAddresses
* This was an Array!
*/


 protected org.apache.axis2.databinding.types.URI[] localDestinationAddresses ;

/*  This tracker boolean wil be used to detect whether the user called the set method
  *for this attribute. It will be used to determine whether to include this field
*in the serialized XML
*/
protected boolean localDestinationAddressesTracker = false ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI[]
*/
public  org.apache.axis2.databinding.types.URI[] getDestinationAddresses(){
 return localDestinationAddresses;
}





 
/**
 * validate the array for DestinationAddresses
 */
protected void validateDestinationAddresses(org.apache.axis2.databinding.types.URI[] param){
  
}


  /**
* Auto generated setter method
* @param param DestinationAddresses
*/
public void setDestinationAddresses(org.apache.axis2.databinding.types.URI[] param){

validateDestinationAddresses(param);

 
  if (param != null){
  //update the setting tracker
  localDestinationAddressesTracker = true;
  } else {
  localDestinationAddressesTracker = true;
 
  }

this.localDestinationAddresses=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param org.apache.axis2.databinding.types.URI
  */
  public void addDestinationAddresses(org.apache.axis2.databinding.types.URI param){
if (localDestinationAddresses == null){
localDestinationAddresses = new org.apache.axis2.databinding.types.URI[]{};
}

 
 //update the setting tracker
localDestinationAddressesTracker = true;
 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localDestinationAddresses);
 list.add(param);
 this.localDestinationAddresses =
  (org.apache.axis2.databinding.types.URI[])list.toArray(
 new org.apache.axis2.databinding.types.URI[list.size()]);

  }
  

/**
* field for ExtendCode
*/


 protected java.lang.String localExtendCode ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getExtendCode(){
 return localExtendCode;
}



 /**
 * Auto generated setter method
 * @param param ExtendCode
 */
 public void setExtendCode(java.lang.String param){
 
 this.localExtendCode=param;
 

 }
 

/**
* field for Message
*/


 protected java.lang.String localMessage ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getMessage(){
 return localMessage;
}



 /**
 * Auto generated setter method
 * @param param Message
 */
 public void setMessage(java.lang.String param){
 
 this.localMessage=param;
 

 }
 

/**
* field for MessageFormat
*/


 protected MessageFormat localMessageFormat ;


/**
* Auto generated getter method
* @return MessageFormat
*/
public  MessageFormat getMessageFormat(){
 return localMessageFormat;
}



 /**
 * Auto generated setter method
 * @param param MessageFormat
 */
 public void setMessageFormat(MessageFormat param){
 
 this.localMessageFormat=param;
 

 }
 

/**
* field for SendMethod
*/


 protected SendMethodType localSendMethod ;


/**
* Auto generated getter method
* @return SendMethodType
*/
public  SendMethodType getSendMethod(){
 return localSendMethod;
}



 /**
 * Auto generated setter method
 * @param param SendMethod
 */
 public void setSendMethod(SendMethodType param){
 
 this.localSendMethod=param;
 

 }
 

/**
* field for DeliveryResultRequest
*/


 protected boolean localDeliveryResultRequest ;


/**
* Auto generated getter method
* @return boolean
*/
public  boolean getDeliveryResultRequest(){
 return localDeliveryResultRequest;
}



 /**
 * Auto generated setter method
 * @param param DeliveryResultRequest
 */
 public void setDeliveryResultRequest(boolean param){
 
 this.localDeliveryResultRequest=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 SendSmsRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/sms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":sendSmsRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"sendSmsRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApplicationID", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApplicationID");
}

 } else {
xmlWriter.writeStartElement("ApplicationID");
 }


  if (localApplicationID==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApplicationID);
 
  }
 
xmlWriter.writeEndElement();
if (localDestinationAddressesTracker){
  if (localDestinationAddresses!=null) {
namespace = "";
boolean emptyNamespace = namespace == null || namespace.length() == 0;
prefix =  emptyNamespace ? null : xmlWriter.getPrefix(namespace);
for (int i = 0;i < localDestinationAddresses.length;i++){

 if (localDestinationAddresses[i] != null){

if (!emptyNamespace) {
 if (prefix == null) {
java.lang.String prefix2 = generatePrefix(namespace);

xmlWriter.writeStartElement(prefix2,"DestinationAddresses", namespace);
xmlWriter.writeNamespace(prefix2, namespace);
xmlWriter.setPrefix(prefix2, namespace);

 } else {
xmlWriter.writeStartElement(namespace,"DestinationAddresses");
 }

} else {
 xmlWriter.writeStartElement("DestinationAddresses");
}

 
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDestinationAddresses[i]));
 
xmlWriter.writeEndElement();

} else {

// write null attribute
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"DestinationAddresses", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"DestinationAddresses");
}

 } else {
xmlWriter.writeStartElement("DestinationAddresses");
 }
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
 xmlWriter.writeEndElement();
 
}

}
  } else {
 
 // write the null attribute
// write null attribute
 java.lang.String namespace2 = "";
 if (! namespace2.equals("")) {
java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

if (prefix2 == null) {
 prefix2 = generatePrefix(namespace2);

 xmlWriter.writeStartElement(prefix2,"DestinationAddresses", namespace2);
 xmlWriter.writeNamespace(prefix2, namespace2);
 xmlWriter.setPrefix(prefix2, namespace2);

} else {
 xmlWriter.writeStartElement(namespace2,"DestinationAddresses");
}

 } else {
xmlWriter.writeStartElement("DestinationAddresses");
 }

// write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 
  }

}
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ExtendCode", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ExtendCode");
}

 } else {
xmlWriter.writeStartElement("ExtendCode");
 }


  if (localExtendCode==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localExtendCode);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Message", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Message");
}

 } else {
xmlWriter.writeStartElement("Message");
 }


  if (localMessage==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localMessage);
 
  }
 
xmlWriter.writeEndElement();
  
 if (localMessageFormat==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"MessageFormat", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"MessageFormat");
 }

} else {
 xmlWriter.writeStartElement("MessageFormat");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localMessageFormat.serialize(new javax.xml.namespace.QName("","MessageFormat"),
factory,xmlWriter);
 }

 if (localSendMethod==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"SendMethod", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"SendMethod");
 }

} else {
 xmlWriter.writeStartElement("SendMethod");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localSendMethod.serialize(new javax.xml.namespace.QName("","SendMethod"),
factory,xmlWriter);
 }

 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"DeliveryResultRequest", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"DeliveryResultRequest");
}

 } else {
xmlWriter.writeStartElement("DeliveryResultRequest");
 }

 if (false) {

 throw new org.apache.axis2.databinding.ADBException("DeliveryResultRequest cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeliveryResultRequest));
 }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ApplicationID"));
 
 elementList.add(localApplicationID==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApplicationID));
  if (localDestinationAddressesTracker){
 if (localDestinationAddresses!=null){
  for (int i = 0;i < localDestinationAddresses.length;i++){

 if (localDestinationAddresses[i] != null){
  elementList.add(new javax.xml.namespace.QName("",
"DestinationAddresses"));
  elementList.add(
  org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDestinationAddresses[i]));
  } else {
  
 elementList.add(new javax.xml.namespace.QName("",
"DestinationAddresses"));
 elementList.add(null);

  }


  }
 } else {

 elementList.add(new javax.xml.namespace.QName("",
"DestinationAddresses"));
 elementList.add(null);

 }

}
elementList.add(new javax.xml.namespace.QName("",
"ExtendCode"));
 
 elementList.add(localExtendCode==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExtendCode));
 
elementList.add(new javax.xml.namespace.QName("",
"Message"));
 
 elementList.add(localMessage==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMessage));
 
 elementList.add(new javax.xml.namespace.QName("",
"MessageFormat"));
 
 
 elementList.add(localMessageFormat==null?null:
 localMessageFormat);

 elementList.add(new javax.xml.namespace.QName("",
"SendMethod"));
 
 
 elementList.add(localSendMethod==null?null:
 localSendMethod);

elementList.add(new javax.xml.namespace.QName("",
"DeliveryResultRequest"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeliveryResultRequest));
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static SendSmsRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 SendSmsRequest object =
new SendSmsRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"sendSmsRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (SendSmsRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list2 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApplicationID").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApplicationID(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","DestinationAddresses").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 
nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  list2.add(null);
 
  reader.next();
} else {
 list2.add(reader.getElementText());
 }
 //loop until we find a start element that is not part of this array
 boolean loopDone2 = false;
 while(!loopDone2){
// Ensure we are at the EndElement
while (!reader.isEndElement()){
 reader.next();
}
// Step out of this element
reader.next();
// Step to next element event.
while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();
if (reader.isEndElement()){
 //two continuous end elements means we are exiting the xml structure
 loopDone2 = true;
} else {
 if (new javax.xml.namespace.QName("","DestinationAddresses").equals(reader.getName())){
 
  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
list2.add(null);

reader.next();
  } else {
list2.add(reader.getElementText());
}
 }else{
loopDone2 = true;
 }
}
 }
 // call the converter utility  to convert and set the array
 
 object.setDestinationAddresses((org.apache.axis2.databinding.types.URI[])
org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
 org.apache.axis2.databinding.types.URI.class,list2));

}  // End of if for expected property start element

 else {

 }

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ExtendCode").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setExtendCode(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Message").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setMessage(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","MessageFormat").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setMessageFormat(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setMessageFormat(MessageFormat.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","SendMethod").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setSendMethod(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setSendMethod(SendMethodType.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","DeliveryResultRequest").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setDeliveryResultRequest(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class MakeUssdRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ussd",
"makeUssdRequest",
"ns4");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ussd")){
return "ns4";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for ApplicationID
*/


 protected java.lang.String localApplicationID ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApplicationID(){
 return localApplicationID;
}



 /**
 * Auto generated setter method
 * @param param ApplicationID
 */
 public void setApplicationID(java.lang.String param){
 
 this.localApplicationID=param;
 

 }
 

/**
* field for DestinationAddress
*/


 protected org.apache.axis2.databinding.types.URI localDestinationAddress ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI
*/
public  org.apache.axis2.databinding.types.URI getDestinationAddress(){
 return localDestinationAddress;
}



 /**
 * Auto generated setter method
 * @param param DestinationAddress
 */
 public void setDestinationAddress(org.apache.axis2.databinding.types.URI param){
 
 this.localDestinationAddress=param;
 

 }
 

/**
* field for UssdMessage
*/


 protected UssdArray localUssdMessage ;


/**
* Auto generated getter method
* @return UssdArray
*/
public  UssdArray getUssdMessage(){
 return localUssdMessage;
}



 /**
 * Auto generated setter method
 * @param param UssdMessage
 */
 public void setUssdMessage(UssdArray param){
 
 this.localUssdMessage=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 MakeUssdRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ussd");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":makeUssdRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"makeUssdRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApplicationID", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApplicationID");
}

 } else {
xmlWriter.writeStartElement("ApplicationID");
 }


  if (localApplicationID==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApplicationID);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"destinationAddress", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"destinationAddress");
}

 } else {
xmlWriter.writeStartElement("destinationAddress");
 }


  if (localDestinationAddress==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("destinationAddress cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDestinationAddress));
 
  }
 
xmlWriter.writeEndElement();
  
 if (localUssdMessage==null){
 throw new org.apache.axis2.databinding.ADBException("ussdMessage cannot be null!!");
 }
localUssdMessage.serialize(new javax.xml.namespace.QName("","ussdMessage"),
 factory,xmlWriter);

 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ApplicationID"));
 
 elementList.add(localApplicationID==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApplicationID));
 
elementList.add(new javax.xml.namespace.QName("",
"destinationAddress"));
 
if (localDestinationAddress != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDestinationAddress));
} else {
throw new org.apache.axis2.databinding.ADBException("destinationAddress cannot be null!!");
}
 
 elementList.add(new javax.xml.namespace.QName("",
"ussdMessage"));
 
 
 if (localUssdMessage==null){
 throw new org.apache.axis2.databinding.ADBException("ussdMessage cannot be null!!");
 }
 elementList.add(localUssdMessage);


return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static MakeUssdRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 MakeUssdRequest object =
new MakeUssdRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"makeUssdRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (MakeUssdRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApplicationID").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApplicationID(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","destinationAddress").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setDestinationAddress(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ussdMessage").equals(reader.getName())){

object.setUssdMessage(UssdArray.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class GetSmsDeliveryStatusResponse
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/sms",
"GetSmsDeliveryStatusResponse",
"ns7");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/sms")){
return "ns7";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Item
* This was an Array!
*/


 protected DeliveryInformationE[] localItem ;

/*  This tracker boolean wil be used to detect whether the user called the set method
  *for this attribute. It will be used to determine whether to include this field
*in the serialized XML
*/
protected boolean localItemTracker = false ;


/**
* Auto generated getter method
* @return DeliveryInformationE[]
*/
public  DeliveryInformationE[] getItem(){
 return localItem;
}





 
/**
 * validate the array for Item
 */
protected void validateItem(DeliveryInformationE[] param){
  
}


  /**
* Auto generated setter method
* @param param Item
*/
public void setItem(DeliveryInformationE[] param){

validateItem(param);

 
  if (param != null){
  //update the setting tracker
  localItemTracker = true;
  } else {
  localItemTracker = false;
 
  }

this.localItem=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param DeliveryInformationE
  */
  public void addItem(DeliveryInformationE param){
if (localItem == null){
localItem = new DeliveryInformationE[]{};
}

 
 //update the setting tracker
localItemTracker = true;
 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localItem);
 list.add(param);
 this.localItem =
  (DeliveryInformationE[])list.toArray(
 new DeliveryInformationE[list.size()]);

  }
  

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 GetSmsDeliveryStatusResponse.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/sms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":GetSmsDeliveryStatusResponse",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"GetSmsDeliveryStatusResponse",
xmlWriter);
}

 
}
if (localItemTracker){
 if (localItem!=null){
 for (int i = 0;i < localItem.length;i++){
if (localItem[i] != null){
 localItem[i].serialize(new javax.xml.namespace.QName("","item"),
factory,xmlWriter);
} else {

// we don't have to do any thing since minOccures is zero
 
}

 }
  } else {

 throw new org.apache.axis2.databinding.ADBException("item cannot be null!!");

 }
 }
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();

 if (localItemTracker){
  if (localItem!=null) {
 for (int i = 0;i < localItem.length;i++){

 if (localItem[i] != null){
 elementList.add(new javax.xml.namespace.QName("",
  "item"));
 elementList.add(localItem[i]);
 } else {

// nothing to do
 
 }

 }
  } else {
 
throw new org.apache.axis2.databinding.ADBException("item cannot be null!!");
 
  }

}

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static GetSmsDeliveryStatusResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 GetSmsDeliveryStatusResponse object =
new GetSmsDeliveryStatusResponse();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"GetSmsDeliveryStatusResponse".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (GetSmsDeliveryStatusResponse)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list1 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","item").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 list1.add(DeliveryInformationE.Factory.parse(reader));

//loop until we find a start element that is not part of this array
boolean loopDone1 = false;
while(!loopDone1){
 // We should be at the end element, but make sure
 while (!reader.isEndElement())
reader.next();
 // Step out of this element
 reader.next();
 // Step to next element event.
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 if (reader.isEndElement()){
//two continuous end elements means we are exiting the xml structure
loopDone1 = true;
 } else {
if (new javax.xml.namespace.QName("","item").equals(reader.getName())){
 list1.add(DeliveryInformationE.Factory.parse(reader));

}else{
 loopDone1 = true;
}
 }
}
// call the converter utility  to convert and set the array

object.setItem((DeliveryInformationE[])
 org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
DeliveryInformationE.class,
list1));
 
}  // End of if for expected property start element

 else {

 }
  
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class MessagePriority
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/mms",
"MessagePriority",
"ns8");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/mms")){
return "ns8";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for MessagePriority
*/


 protected java.lang.String localMessagePriority ;

 private static java.util.HashMap _table_ = new java.util.HashMap();

 // Constructor
 
protected MessagePriority(java.lang.String value, boolean isRegisterValue) {
 localMessagePriority = value;
 if (isRegisterValue){

 _table_.put(localMessagePriority, this);

 }

}
 
 public static final java.lang.String _Default =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Default");

 public static final java.lang.String _Low =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Low");

 public static final java.lang.String _Normal =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Normal");

 public static final java.lang.String _High =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("High");

public static final MessagePriority Default =
 new MessagePriority(_Default,true);
 
public static final MessagePriority Low =
 new MessagePriority(_Low,true);
 
public static final MessagePriority Normal =
 new MessagePriority(_Normal,true);
 
public static final MessagePriority High =
 new MessagePriority(_High,true);
 

public java.lang.String getValue() { return localMessagePriority;}

public boolean equals(java.lang.Object obj) {return (obj == this);}
public int hashCode() { return toString().hashCode();}
public java.lang.String toString() {

return localMessagePriority.toString();
 

}



  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 MessagePriority.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 

//We can safely assume an element has only one type associated with it

 java.lang.String namespace = parentQName.getNamespaceURI();
 java.lang.String localName = parentQName.getLocalPart();

 if (! namespace.equals("")) {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix, localName, namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace, localName);
}

 } else {
xmlWriter.writeStartElement(localName);
 }

 // add the type details if this is used in a simple type
 if (serializeType){
java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/mms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":MessagePriority",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"MessagePriority",
xmlWriter);
}
 }
 
  if (localMessagePriority==null){
 
  throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

 }else{

 xmlWriter.writeCharacters(localMessagePriority);
 
 }
 
 xmlWriter.writeEndElement();

 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{




//We can safely assume an element has only one type associated with it
 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
 new java.lang.Object[]{
 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMessagePriority)
 },
 null);

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{



public static MessagePriority fromValue(java.lang.String value)
throws java.lang.IllegalArgumentException {
 MessagePriority enumeration = (MessagePriority)
 
 _table_.get(value);


 if (enumeration==null) throw new java.lang.IllegalArgumentException();
 return enumeration;
}
public static MessagePriority fromString(java.lang.String value,java.lang.String namespaceURI)
throws java.lang.IllegalArgumentException {
 try {
 
 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


 } catch (java.lang.Exception e) {
throw new java.lang.IllegalArgumentException();
 }
}

public static MessagePriority fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
 java.lang.String content) {
 if (content.indexOf(":") > -1){
java.lang.String prefix = content.substring(0,content.indexOf(":"));
java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
return MessagePriority.Factory.fromString(content,namespaceUri);
 } else {
 return MessagePriority.Factory.fromString(content,"");
 }
}
 

/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static MessagePriority parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 MessagePriority object = null;
// initialize a hash map to keep values
java.util.Map attributeMap = new java.util.HashMap();
java.util.List extraAttributeList = new java.util.ArrayList();
 

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
while(!reader.isEndElement()) {
 if (reader.isStartElement()  || reader.hasText()){

 java.lang.String content = reader.getElementText();
 
if (content.indexOf(":") > 0) {
 // this seems to be a Qname so find the namespace and send
 prefix = content.substring(0, content.indexOf(":"));
 namespaceuri = reader.getNamespaceURI(prefix);
 object = MessagePriority.Factory.fromString(content,namespaceuri);
} else {
 // this seems to be not a qname send and empty namespace incase of it is
 // check is done in fromString method
 object = MessagePriority.Factory.fromString(content,"");
}


  } else {
reader.next();
  }  
}  // end of while loop




 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class NotifyMessageDeliveryReceiptRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/mms",
"notifyMessageDeliveryReceiptRequest",
"ns8");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/mms")){
return "ns8";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Correlator
*/


 protected java.lang.String localCorrelator ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getCorrelator(){
 return localCorrelator;
}



 /**
 * Auto generated setter method
 * @param param Correlator
 */
 public void setCorrelator(java.lang.String param){
 
 this.localCorrelator=param;
 

 }
 

/**
* field for DeliveryStatus
* This was an Array!
*/


 protected DeliveryInformation0[] localDeliveryStatus ;

/*  This tracker boolean wil be used to detect whether the user called the set method
  *for this attribute. It will be used to determine whether to include this field
*in the serialized XML
*/
protected boolean localDeliveryStatusTracker = false ;


/**
* Auto generated getter method
* @return DeliveryInformation0[]
*/
public  DeliveryInformation0[] getDeliveryStatus(){
 return localDeliveryStatus;
}





 
/**
 * validate the array for DeliveryStatus
 */
protected void validateDeliveryStatus(DeliveryInformation0[] param){
  
}


  /**
* Auto generated setter method
* @param param DeliveryStatus
*/
public void setDeliveryStatus(DeliveryInformation0[] param){

validateDeliveryStatus(param);

 
  if (param != null){
  //update the setting tracker
  localDeliveryStatusTracker = true;
  } else {
  localDeliveryStatusTracker = false;
 
  }

this.localDeliveryStatus=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param DeliveryInformation0
  */
  public void addDeliveryStatus(DeliveryInformation0 param){
if (localDeliveryStatus == null){
localDeliveryStatus = new DeliveryInformation0[]{};
}

 
 //update the setting tracker
localDeliveryStatusTracker = true;
 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localDeliveryStatus);
 list.add(param);
 this.localDeliveryStatus =
  (DeliveryInformation0[])list.toArray(
 new DeliveryInformation0[list.size()]);

  }
  

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 NotifyMessageDeliveryReceiptRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/mms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":notifyMessageDeliveryReceiptRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"notifyMessageDeliveryReceiptRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"correlator", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"correlator");
}

 } else {
xmlWriter.writeStartElement("correlator");
 }


  if (localCorrelator==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("correlator cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localCorrelator);
 
  }
 
xmlWriter.writeEndElement();
if (localDeliveryStatusTracker){
 if (localDeliveryStatus!=null){
 for (int i = 0;i < localDeliveryStatus.length;i++){
if (localDeliveryStatus[i] != null){
 localDeliveryStatus[i].serialize(new javax.xml.namespace.QName("","deliveryStatus"),
factory,xmlWriter);
} else {

// we don't have to do any thing since minOccures is zero
 
}

 }
  } else {

 throw new org.apache.axis2.databinding.ADBException("deliveryStatus cannot be null!!");

 }
 }
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"correlator"));
 
if (localCorrelator != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCorrelator));
} else {
throw new org.apache.axis2.databinding.ADBException("correlator cannot be null!!");
}
  if (localDeliveryStatusTracker){
  if (localDeliveryStatus!=null) {
 for (int i = 0;i < localDeliveryStatus.length;i++){

 if (localDeliveryStatus[i] != null){
 elementList.add(new javax.xml.namespace.QName("",
  "deliveryStatus"));
 elementList.add(localDeliveryStatus[i]);
 } else {

// nothing to do
 
 }

 }
  } else {
 
throw new org.apache.axis2.databinding.ADBException("deliveryStatus cannot be null!!");
 
  }

}

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static NotifyMessageDeliveryReceiptRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 NotifyMessageDeliveryReceiptRequest object =
new NotifyMessageDeliveryReceiptRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"notifyMessageDeliveryReceiptRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (NotifyMessageDeliveryReceiptRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list2 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","correlator").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setCorrelator(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","deliveryStatus").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 list2.add(DeliveryInformation0.Factory.parse(reader));

//loop until we find a start element that is not part of this array
boolean loopDone2 = false;
while(!loopDone2){
 // We should be at the end element, but make sure
 while (!reader.isEndElement())
reader.next();
 // Step out of this element
 reader.next();
 // Step to next element event.
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 if (reader.isEndElement()){
//two continuous end elements means we are exiting the xml structure
loopDone2 = true;
 } else {
if (new javax.xml.namespace.QName("","deliveryStatus").equals(reader.getName())){
 list2.add(DeliveryInformation0.Factory.parse(reader));

}else{
 loopDone2 = true;
}
 }
}
// call the converter utility  to convert and set the array

object.setDeliveryStatus((DeliveryInformation0[])
 org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
DeliveryInformation0.class,
list2));
 
}  // End of if for expected property start element

 else {

 }
  
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class AlarmRsp
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ap",
"AlarmRsp",
"ns2");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ap")){
return "ns2";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Recode
*/


 protected java.lang.String localRecode ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getRecode(){
 return localRecode;
}



 /**
 * Auto generated setter method
 * @param param Recode
 */
 public void setRecode(java.lang.String param){
 
 this.localRecode=param;
 

 }
 

/**
* field for ReMsg
*/


 protected java.lang.String localReMsg ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getReMsg(){
 return localReMsg;
}



 /**
 * Auto generated setter method
 * @param param ReMsg
 */
 public void setReMsg(java.lang.String param){
 
 this.localReMsg=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 AlarmRsp.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":AlarmRsp",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"AlarmRsp",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"recode", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"recode");
}

 } else {
xmlWriter.writeStartElement("recode");
 }


  if (localRecode==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("recode cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localRecode);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"reMsg", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"reMsg");
}

 } else {
xmlWriter.writeStartElement("reMsg");
 }


  if (localReMsg==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("reMsg cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localReMsg);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"recode"));
 
if (localRecode != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRecode));
} else {
throw new org.apache.axis2.databinding.ADBException("recode cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"reMsg"));
 
if (localReMsg != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReMsg));
} else {
throw new org.apache.axis2.databinding.ADBException("reMsg cannot be null!!");
}
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static AlarmRsp parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 AlarmRsp object =
new AlarmRsp();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"AlarmRsp".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (AlarmRsp)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","recode").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setRecode(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","reMsg").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setReMsg(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class GetMessageResponse
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/mms",
"getMessageResponse",
"ns8");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/mms")){
return "ns8";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for MmsMessage
*/


 protected MmsMessage localMmsMessage ;


/**
* Auto generated getter method
* @return MmsMessage
*/
public  MmsMessage getMmsMessage(){
 return localMmsMessage;
}



 /**
 * Auto generated setter method
 * @param param MmsMessage
 */
 public void setMmsMessage(MmsMessage param){
 
 this.localMmsMessage=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 GetMessageResponse.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/mms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":getMessageResponse",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"getMessageResponse",
xmlWriter);
}

 
}
 
 if (localMmsMessage==null){
 throw new org.apache.axis2.databinding.ADBException("mmsMessage cannot be null!!");
 }
localMmsMessage.serialize(new javax.xml.namespace.QName("","mmsMessage"),
 factory,xmlWriter);

 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


 elementList.add(new javax.xml.namespace.QName("",
"mmsMessage"));
 
 
 if (localMmsMessage==null){
 throw new org.apache.axis2.databinding.ADBException("mmsMessage cannot be null!!");
 }
 elementList.add(localMmsMessage);


return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static GetMessageResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 GetMessageResponse object =
new GetMessageResponse();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"getMessageResponse".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (GetMessageResponse)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","mmsMessage").equals(reader.getName())){

object.setMmsMessage(MmsMessage.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class LocType
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/location",
"LocType",
"ns5");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/location")){
return "ns5";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for LocType
*/


 protected java.lang.String localLocType ;

 private static java.util.HashMap _table_ = new java.util.HashMap();

 // Constructor
 
protected LocType(java.lang.String value, boolean isRegisterValue) {
 localLocType = value;
 if (isRegisterValue){

 _table_.put(localLocType, this);

 }

}
 
 public static final java.lang.String _CURRENT =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("CURRENT");

 public static final java.lang.String _LAST =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("LAST");

 public static final java.lang.String _CURRENT_OR_LAST =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("CURRENT_OR_LAST");

public static final LocType CURRENT =
 new LocType(_CURRENT,true);
 
public static final LocType LAST =
 new LocType(_LAST,true);
 
public static final LocType CURRENT_OR_LAST =
 new LocType(_CURRENT_OR_LAST,true);
 

public java.lang.String getValue() { return localLocType;}

public boolean equals(java.lang.Object obj) {return (obj == this);}
public int hashCode() { return toString().hashCode();}
public java.lang.String toString() {

return localLocType.toString();
 

}



  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 LocType.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 

//We can safely assume an element has only one type associated with it

 java.lang.String namespace = parentQName.getNamespaceURI();
 java.lang.String localName = parentQName.getLocalPart();

 if (! namespace.equals("")) {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix, localName, namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace, localName);
}

 } else {
xmlWriter.writeStartElement(localName);
 }

 // add the type details if this is used in a simple type
 if (serializeType){
java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/location");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":LocType",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"LocType",
xmlWriter);
}
 }
 
  if (localLocType==null){
 
  throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

 }else{

 xmlWriter.writeCharacters(localLocType);
 
 }
 
 xmlWriter.writeEndElement();

 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{




//We can safely assume an element has only one type associated with it
 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
 new java.lang.Object[]{
 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLocType)
 },
 null);

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{



public static LocType fromValue(java.lang.String value)
throws java.lang.IllegalArgumentException {
 LocType enumeration = (LocType)
 
 _table_.get(value);


 if (enumeration==null) throw new java.lang.IllegalArgumentException();
 return enumeration;
}
public static LocType fromString(java.lang.String value,java.lang.String namespaceURI)
throws java.lang.IllegalArgumentException {
 try {
 
 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


 } catch (java.lang.Exception e) {
throw new java.lang.IllegalArgumentException();
 }
}

public static LocType fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
 java.lang.String content) {
 if (content.indexOf(":") > -1){
java.lang.String prefix = content.substring(0,content.indexOf(":"));
java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
return LocType.Factory.fromString(content,namespaceUri);
 } else {
 return LocType.Factory.fromString(content,"");
 }
}
 

/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static LocType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 LocType object = null;
// initialize a hash map to keep values
java.util.Map attributeMap = new java.util.HashMap();
java.util.List extraAttributeList = new java.util.ArrayList();
 

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
while(!reader.isEndElement()) {
 if (reader.isStartElement()  || reader.hasText()){

 java.lang.String content = reader.getElementText();
 
if (content.indexOf(":") > 0) {
 // this seems to be a Qname so find the namespace and send
 prefix = content.substring(0, content.indexOf(":"));
 namespaceuri = reader.getNamespaceURI(prefix);
 object = LocType.Factory.fromString(content,namespaceuri);
} else {
 // this seems to be not a qname send and empty namespace incase of it is
 // check is done in fromString method
 object = LocType.Factory.fromString(content,"");
}


  } else {
reader.next();
  }  
}  // end of while loop




 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class GetPushDeliveryStatusRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/wap",
"getPushDeliveryStatusRequest",
"ns3");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/wap")){
return "ns3";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for ApplicationID
*/


 protected java.lang.String localApplicationID ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApplicationID(){
 return localApplicationID;
}



 /**
 * Auto generated setter method
 * @param param ApplicationID
 */
 public void setApplicationID(java.lang.String param){
 
 this.localApplicationID=param;
 

 }
 

/**
* field for RequestIdentifier
*/


 protected java.lang.String localRequestIdentifier ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getRequestIdentifier(){
 return localRequestIdentifier;
}



 /**
 * Auto generated setter method
 * @param param RequestIdentifier
 */
 public void setRequestIdentifier(java.lang.String param){
 
 this.localRequestIdentifier=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 GetPushDeliveryStatusRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/wap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":getPushDeliveryStatusRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"getPushDeliveryStatusRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApplicationID", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApplicationID");
}

 } else {
xmlWriter.writeStartElement("ApplicationID");
 }


  if (localApplicationID==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApplicationID);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"requestIdentifier", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"requestIdentifier");
}

 } else {
xmlWriter.writeStartElement("requestIdentifier");
 }


  if (localRequestIdentifier==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("requestIdentifier cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localRequestIdentifier);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ApplicationID"));
 
 elementList.add(localApplicationID==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApplicationID));
 
elementList.add(new javax.xml.namespace.QName("",
"requestIdentifier"));
 
if (localRequestIdentifier != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestIdentifier));
} else {
throw new org.apache.axis2.databinding.ADBException("requestIdentifier cannot be null!!");
}
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static GetPushDeliveryStatusRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 GetPushDeliveryStatusRequest object =
new GetPushDeliveryStatusRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"getPushDeliveryStatusRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (GetPushDeliveryStatusRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApplicationID").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApplicationID(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","requestIdentifier").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setRequestIdentifier(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class MessageFormat
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/sms",
"MessageFormat",
"ns7");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/sms")){
return "ns7";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for MessageFormat
*/


 protected java.lang.String localMessageFormat ;

 private static java.util.HashMap _table_ = new java.util.HashMap();

 // Constructor
 
protected MessageFormat(java.lang.String value, boolean isRegisterValue) {
 localMessageFormat = value;
 if (isRegisterValue){

 _table_.put(localMessageFormat, this);

 }

}
 
 public static final java.lang.String _ASCII =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("ASCII");

 public static final java.lang.String _UCS2 =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("UCS2");

 public static final java.lang.String _GB18030 =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("GB18030");

 public static final java.lang.String _GB2312 =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("GB2312");

 public static final java.lang.String _Binary =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Binary");

public static final MessageFormat ASCII =
 new MessageFormat(_ASCII,true);
 
public static final MessageFormat UCS2 =
 new MessageFormat(_UCS2,true);
 
public static final MessageFormat GB18030 =
 new MessageFormat(_GB18030,true);
 
public static final MessageFormat GB2312 =
 new MessageFormat(_GB2312,true);
 
public static final MessageFormat Binary =
 new MessageFormat(_Binary,true);
 

public java.lang.String getValue() { return localMessageFormat;}

public boolean equals(java.lang.Object obj) {return (obj == this);}
public int hashCode() { return toString().hashCode();}
public java.lang.String toString() {

return localMessageFormat.toString();
 

}



  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 MessageFormat.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 

//We can safely assume an element has only one type associated with it

 java.lang.String namespace = parentQName.getNamespaceURI();
 java.lang.String localName = parentQName.getLocalPart();

 if (! namespace.equals("")) {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix, localName, namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace, localName);
}

 } else {
xmlWriter.writeStartElement(localName);
 }

 // add the type details if this is used in a simple type
 if (serializeType){
java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/sms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":MessageFormat",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"MessageFormat",
xmlWriter);
}
 }
 
  if (localMessageFormat==null){
 
  throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

 }else{

 xmlWriter.writeCharacters(localMessageFormat);
 
 }
 
 xmlWriter.writeEndElement();

 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{




//We can safely assume an element has only one type associated with it
 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
 new java.lang.Object[]{
 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMessageFormat)
 },
 null);

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{



public static MessageFormat fromValue(java.lang.String value)
throws java.lang.IllegalArgumentException {
 MessageFormat enumeration = (MessageFormat)
 
 _table_.get(value);


 if (enumeration==null) throw new java.lang.IllegalArgumentException();
 return enumeration;
}
public static MessageFormat fromString(java.lang.String value,java.lang.String namespaceURI)
throws java.lang.IllegalArgumentException {
 try {
 
 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


 } catch (java.lang.Exception e) {
throw new java.lang.IllegalArgumentException();
 }
}

public static MessageFormat fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
 java.lang.String content) {
 if (content.indexOf(":") > -1){
java.lang.String prefix = content.substring(0,content.indexOf(":"));
java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
return MessageFormat.Factory.fromString(content,namespaceUri);
 } else {
 return MessageFormat.Factory.fromString(content,"");
 }
}
 

/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static MessageFormat parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 MessageFormat object = null;
// initialize a hash map to keep values
java.util.Map attributeMap = new java.util.HashMap();
java.util.List extraAttributeList = new java.util.ArrayList();
 

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
while(!reader.isEndElement()) {
 if (reader.isStartElement()  || reader.hasText()){

 java.lang.String content = reader.getElementText();
 
if (content.indexOf(":") > 0) {
 // this seems to be a Qname so find the namespace and send
 prefix = content.substring(0, content.indexOf(":"));
 namespaceuri = reader.getNamespaceURI(prefix);
 object = MessageFormat.Factory.fromString(content,namespaceuri);
} else {
 // this seems to be not a qname send and empty namespace incase of it is
 // check is done in fromString method
 object = MessageFormat.Factory.fromString(content,"");
}


  } else {
reader.next();
  }  
}  // end of while loop




 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class CoordinateReferenceSystem
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
name = CoordinateReferenceSystem
Namespace URI = http://www.csapi.org/schema/location
Namespace Prefix = ns5
*/
 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/location")){
return "ns5";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Code
*/


 protected java.lang.String localCode ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getCode(){
 return localCode;
}



 /**
 * Auto generated setter method
 * @param param Code
 */
 public void setCode(java.lang.String param){
 
 this.localCode=param;
 

 }
 

/**
* field for CodeSpace
*/


 protected java.lang.String localCodeSpace ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getCodeSpace(){
 return localCodeSpace;
}



 /**
 * Auto generated setter method
 * @param param CodeSpace
 */
 public void setCodeSpace(java.lang.String param){
 
 this.localCodeSpace=param;
 

 }
 

/**
* field for Edition
*/


 protected java.lang.String localEdition ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getEdition(){
 return localEdition;
}



 /**
 * Auto generated setter method
 * @param param Edition
 */
 public void setEdition(java.lang.String param){
 
 this.localEdition=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



 org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 CoordinateReferenceSystem.this.serialize(parentQName,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 parentQName,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/location");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":CoordinateReferenceSystem",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"CoordinateReferenceSystem",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"code", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"code");
}

 } else {
xmlWriter.writeStartElement("code");
 }


  if (localCode==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("code cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localCode);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"codeSpace", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"codeSpace");
}

 } else {
xmlWriter.writeStartElement("codeSpace");
 }


  if (localCodeSpace==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("codeSpace cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localCodeSpace);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"edition", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"edition");
}

 } else {
xmlWriter.writeStartElement("edition");
 }


  if (localEdition==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("edition cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localEdition);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"code"));
 
if (localCode != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCode));
} else {
throw new org.apache.axis2.databinding.ADBException("code cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"codeSpace"));
 
if (localCodeSpace != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCodeSpace));
} else {
throw new org.apache.axis2.databinding.ADBException("codeSpace cannot be null!!");
}
 
elementList.add(new javax.xml.namespace.QName("",
"edition"));
 
if (localEdition != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEdition));
} else {
throw new org.apache.axis2.databinding.ADBException("edition cannot be null!!");
}
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static CoordinateReferenceSystem parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 CoordinateReferenceSystem object =
new CoordinateReferenceSystem();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"CoordinateReferenceSystem".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (CoordinateReferenceSystem)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","code").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setCode(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","codeSpace").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setCodeSpace(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","edition").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setEdition(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class StopNotificationRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/notification",
"stopNotificationRequest",
"ns6");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/notification")){
return "ns6";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for ApplicationId
*/


 protected java.lang.String localApplicationId ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApplicationId(){
 return localApplicationId;
}



 /**
 * Auto generated setter method
 * @param param ApplicationId
 */
 public void setApplicationId(java.lang.String param){
 
 this.localApplicationId=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 StopNotificationRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/notification");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":stopNotificationRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"stopNotificationRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApplicationId", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApplicationId");
}

 } else {
xmlWriter.writeStartElement("ApplicationId");
 }


  if (localApplicationId==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApplicationId);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ApplicationId"));
 
 elementList.add(localApplicationId==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApplicationId));
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static StopNotificationRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 StopNotificationRequest object =
new StopNotificationRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"stopNotificationRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (StopNotificationRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApplicationId").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApplicationId(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class LocationInfo
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
name = LocationInfo
Namespace URI = http://www.csapi.org/schema/location
Namespace Prefix = ns5
*/
 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/location")){
return "ns5";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Latitude
*/


 protected float localLatitude ;


/**
* Auto generated getter method
* @return float
*/
public  float getLatitude(){
 return localLatitude;
}



 /**
 * Auto generated setter method
 * @param param Latitude
 */
 public void setLatitude(float param){
 
 this.localLatitude=param;
 

 }
 

/**
* field for Longitude
*/


 protected float localLongitude ;


/**
* Auto generated getter method
* @return float
*/
public  float getLongitude(){
 return localLongitude;
}



 /**
 * Auto generated setter method
 * @param param Longitude
 */
 public void setLongitude(float param){
 
 this.localLongitude=param;
 

 }
 

/**
* field for Altitude
*/


 protected float localAltitude ;


/**
* Auto generated getter method
* @return float
*/
public  float getAltitude(){
 return localAltitude;
}



 /**
 * Auto generated setter method
 * @param param Altitude
 */
 public void setAltitude(float param){
 
 this.localAltitude=param;
 

 }
 

/**
* field for Accuracy
*/


 protected int localAccuracy ;


/**
* Auto generated getter method
* @return int
*/
public  int getAccuracy(){
 return localAccuracy;
}



 /**
 * Auto generated setter method
 * @param param Accuracy
 */
 public void setAccuracy(int param){
 
 this.localAccuracy=param;
 

 }
 

/**
* field for Timestamp
*/


 protected java.util.Calendar localTimestamp ;


/**
* Auto generated getter method
* @return java.util.Calendar
*/
public  java.util.Calendar getTimestamp(){
 return localTimestamp;
}



 /**
 * Auto generated setter method
 * @param param Timestamp
 */
 public void setTimestamp(java.util.Calendar param){
 
 this.localTimestamp=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



 org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 LocationInfo.this.serialize(parentQName,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 parentQName,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/location");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":LocationInfo",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"LocationInfo",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Latitude", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Latitude");
}

 } else {
xmlWriter.writeStartElement("Latitude");
 }

 if (java.lang.Float.isNaN(localLatitude)) {

 throw new org.apache.axis2.databinding.ADBException("Latitude cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLatitude));
 }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Longitude", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Longitude");
}

 } else {
xmlWriter.writeStartElement("Longitude");
 }

 if (java.lang.Float.isNaN(localLongitude)) {

 throw new org.apache.axis2.databinding.ADBException("Longitude cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLongitude));
 }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Altitude", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Altitude");
}

 } else {
xmlWriter.writeStartElement("Altitude");
 }

 if (java.lang.Float.isNaN(localAltitude)) {

 throw new org.apache.axis2.databinding.ADBException("Altitude cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAltitude));
 }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Accuracy", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Accuracy");
}

 } else {
xmlWriter.writeStartElement("Accuracy");
 }

 if (localAccuracy==java.lang.Integer.MIN_VALUE) {

 throw new org.apache.axis2.databinding.ADBException("Accuracy cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAccuracy));
 }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Timestamp", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Timestamp");
}

 } else {
xmlWriter.writeStartElement("Timestamp");
 }


  if (localTimestamp==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTimestamp));
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"Latitude"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLatitude));
 
elementList.add(new javax.xml.namespace.QName("",
"Longitude"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLongitude));
 
elementList.add(new javax.xml.namespace.QName("",
"Altitude"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAltitude));
 
elementList.add(new javax.xml.namespace.QName("",
"Accuracy"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAccuracy));
 
elementList.add(new javax.xml.namespace.QName("",
"Timestamp"));
 
 elementList.add(localTimestamp==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTimestamp));
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static LocationInfo parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 LocationInfo object =
new LocationInfo();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"LocationInfo".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (LocationInfo)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Latitude").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setLatitude(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToFloat(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Longitude").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setLongitude(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToFloat(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Altitude").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAltitude(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToFloat(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Accuracy").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAccuracy(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Timestamp").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setTimestamp(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class SendMessageRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/mms",
"sendMessageRequest",
"ns8");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/mms")){
return "ns8";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for ApplicationID
*/


 protected java.lang.String localApplicationID ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApplicationID(){
 return localApplicationID;
}



 /**
 * Auto generated setter method
 * @param param ApplicationID
 */
 public void setApplicationID(java.lang.String param){
 
 this.localApplicationID=param;
 

 }
 

/**
* field for Addresses
* This was an Array!
*/


 protected org.apache.axis2.databinding.types.URI[] localAddresses ;

/*  This tracker boolean wil be used to detect whether the user called the set method
  *for this attribute. It will be used to determine whether to include this field
*in the serialized XML
*/
protected boolean localAddressesTracker = false ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI[]
*/
public  org.apache.axis2.databinding.types.URI[] getAddresses(){
 return localAddresses;
}





 
/**
 * validate the array for Addresses
 */
protected void validateAddresses(org.apache.axis2.databinding.types.URI[] param){
  
}


  /**
* Auto generated setter method
* @param param Addresses
*/
public void setAddresses(org.apache.axis2.databinding.types.URI[] param){

validateAddresses(param);

 
  if (param != null){
  //update the setting tracker
  localAddressesTracker = true;
  } else {
  localAddressesTracker = false;
 
  }

this.localAddresses=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param org.apache.axis2.databinding.types.URI
  */
  public void addAddresses(org.apache.axis2.databinding.types.URI param){
if (localAddresses == null){
localAddresses = new org.apache.axis2.databinding.types.URI[]{};
}

 
 //update the setting tracker
localAddressesTracker = true;
 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localAddresses);
 list.add(param);
 this.localAddresses =
  (org.apache.axis2.databinding.types.URI[])list.toArray(
 new org.apache.axis2.databinding.types.URI[list.size()]);

  }
  

/**
* field for ExtendCode
*/


 protected java.lang.String localExtendCode ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getExtendCode(){
 return localExtendCode;
}



 /**
 * Auto generated setter method
 * @param param ExtendCode
 */
 public void setExtendCode(java.lang.String param){
 
 this.localExtendCode=param;
 

 }
 

/**
* field for Subject
*/


 protected java.lang.String localSubject ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getSubject(){
 return localSubject;
}



 /**
 * Auto generated setter method
 * @param param Subject
 */
 public void setSubject(java.lang.String param){
 
 this.localSubject=param;
 

 }
 

/**
* field for Priority
*/


 protected MessagePriority localPriority ;


/**
* Auto generated getter method
* @return MessagePriority
*/
public  MessagePriority getPriority(){
 return localPriority;
}



 /**
 * Auto generated setter method
 * @param param Priority
 */
 public void setPriority(MessagePriority param){
 
 this.localPriority=param;
 

 }
 

/**
* field for ReceiptRequest
*/


 protected boolean localReceiptRequest ;


/**
* Auto generated getter method
* @return boolean
*/
public  boolean getReceiptRequest(){
 return localReceiptRequest;
}



 /**
 * Auto generated setter method
 * @param param ReceiptRequest
 */
 public void setReceiptRequest(boolean param){
 
 this.localReceiptRequest=param;
 

 }
 

/**
* field for Content
*/


 protected javax.activation.DataHandler localContent ;


/**
* Auto generated getter method
* @return javax.activation.DataHandler
*/
public  javax.activation.DataHandler getContent(){
 return localContent;
}



 /**
 * Auto generated setter method
 * @param param Content
 */
 public void setContent(javax.activation.DataHandler param){
 
 this.localContent=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 SendMessageRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/mms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":sendMessageRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"sendMessageRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApplicationID", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApplicationID");
}

 } else {
xmlWriter.writeStartElement("ApplicationID");
 }


  if (localApplicationID==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApplicationID);
 
  }
 
xmlWriter.writeEndElement();
if (localAddressesTracker){
  if (localAddresses!=null) {
namespace = "";
boolean emptyNamespace = namespace == null || namespace.length() == 0;
prefix =  emptyNamespace ? null : xmlWriter.getPrefix(namespace);
for (int i = 0;i < localAddresses.length;i++){

 if (localAddresses[i] != null){

if (!emptyNamespace) {
 if (prefix == null) {
java.lang.String prefix2 = generatePrefix(namespace);

xmlWriter.writeStartElement(prefix2,"addresses", namespace);
xmlWriter.writeNamespace(prefix2, namespace);
xmlWriter.setPrefix(prefix2, namespace);

 } else {
xmlWriter.writeStartElement(namespace,"addresses");
 }

} else {
 xmlWriter.writeStartElement("addresses");
}

 
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddresses[i]));
 
xmlWriter.writeEndElement();

} else {

// we have to do nothing since minOccurs is zero
 
}

}
  } else {
 
 throw new org.apache.axis2.databinding.ADBException("addresses cannot be null!!");
 
  }

}
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ExtendCode", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ExtendCode");
}

 } else {
xmlWriter.writeStartElement("ExtendCode");
 }


  if (localExtendCode==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localExtendCode);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"subject", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"subject");
}

 } else {
xmlWriter.writeStartElement("subject");
 }


  if (localSubject==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("subject cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localSubject);
 
  }
 
xmlWriter.writeEndElement();
  
 if (localPriority==null){
 throw new org.apache.axis2.databinding.ADBException("priority cannot be null!!");
 }
localPriority.serialize(new javax.xml.namespace.QName("","priority"),
 factory,xmlWriter);

 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"receiptRequest", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"receiptRequest");
}

 } else {
xmlWriter.writeStartElement("receiptRequest");
 }

 if (false) {

 throw new org.apache.axis2.databinding.ADBException("receiptRequest cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReceiptRequest));
 }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Content", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Content");
}

 } else {
xmlWriter.writeStartElement("Content");
 }


 if (localContent!=null)
 {
 xmlWriter.writeDataHandler(localContent);
 }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ApplicationID"));
 
 elementList.add(localApplicationID==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApplicationID));
  if (localAddressesTracker){
 if (localAddresses!=null){
  for (int i = 0;i < localAddresses.length;i++){

 if (localAddresses[i] != null){
  elementList.add(new javax.xml.namespace.QName("",
"addresses"));
  elementList.add(
  org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddresses[i]));
  } else {
  
 // have to do nothing

  }


  }
 } else {

 throw new org.apache.axis2.databinding.ADBException("addresses cannot be null!!");

 }

}
elementList.add(new javax.xml.namespace.QName("",
"ExtendCode"));
 
 elementList.add(localExtendCode==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExtendCode));
 
elementList.add(new javax.xml.namespace.QName("",
"subject"));
 
if (localSubject != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSubject));
} else {
throw new org.apache.axis2.databinding.ADBException("subject cannot be null!!");
}
 
 elementList.add(new javax.xml.namespace.QName("",
"priority"));
 
 
 if (localPriority==null){
 throw new org.apache.axis2.databinding.ADBException("priority cannot be null!!");
 }
 elementList.add(localPriority);

elementList.add(new javax.xml.namespace.QName("",
"receiptRequest"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReceiptRequest));
 
elementList.add(new javax.xml.namespace.QName("",
"Content"));

 elementList.add(localContent);


return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static SendMessageRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 SendMessageRequest object =
new SendMessageRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"sendMessageRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (SendMessageRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list2 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApplicationID").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApplicationID(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","addresses").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 list2.add(reader.getElementText());
 
 //loop until we find a start element that is not part of this array
 boolean loopDone2 = false;
 while(!loopDone2){
// Ensure we are at the EndElement
while (!reader.isEndElement()){
 reader.next();
}
// Step out of this element
reader.next();
// Step to next element event.
while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();
if (reader.isEndElement()){
 //two continuous end elements means we are exiting the xml structure
 loopDone2 = true;
} else {
 if (new javax.xml.namespace.QName("","addresses").equals(reader.getName())){
 list2.add(reader.getElementText());

 }else{
loopDone2 = true;
 }
}
 }
 // call the converter utility  to convert and set the array
 
 object.setAddresses((org.apache.axis2.databinding.types.URI[])
org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
 org.apache.axis2.databinding.types.URI.class,list2));

}  // End of if for expected property start element

 else {

 }

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ExtendCode").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setExtendCode(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","subject").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setSubject(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","priority").equals(reader.getName())){

object.setPriority(MessagePriority.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","receiptRequest").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setReceiptRequest(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Content").equals(reader.getName())){
reader.next();
 if (isReaderMTOMAware(reader)
 &&
 java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_BINARY)))
 {
//MTOM aware reader - get the datahandler directly and put it in the object
object.setContent(
(javax.activation.DataHandler) reader.getProperty(org.apache.axiom.om.OMConstants.DATA_HANDLER));
 } else {
if (reader.getEventType() == javax.xml.stream.XMLStreamConstants.START_ELEMENT && reader.getName().equals(new javax.xml.namespace.QName(org.apache.axiom.om.impl.MTOMConstants.XOP_NAMESPACE_URI, org.apache.axiom.om.impl.MTOMConstants.XOP_INCLUDE)))
{
 java.lang.String id = org.apache.axiom.om.util.ElementHelper.getContentID(reader, "UTF-8");
 object.setContent(((org.apache.axiom.soap.impl.builder.MTOMStAXSOAPModelBuilder) ((org.apache.axiom.om.impl.llom.OMStAXWrapper) reader).getBuilder()).getDataHandler(id));
 reader.next();
 
reader.next();
 
} else if(reader.hasText()) {
 //Do the usual conversion
 java.lang.String content = reader.getText();
 object.setContent(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToBase64Binary(content));
 
reader.next();
 
}
 }


reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class StartPeriodicNotificationResponse
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/location",
"startPeriodicNotificationResponse",
"ns5");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/location")){
return "ns5";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Correlator
*/


 protected java.lang.String localCorrelator ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getCorrelator(){
 return localCorrelator;
}



 /**
 * Auto generated setter method
 * @param param Correlator
 */
 public void setCorrelator(java.lang.String param){
 
 this.localCorrelator=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 StartPeriodicNotificationResponse.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/location");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":startPeriodicNotificationResponse",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"startPeriodicNotificationResponse",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"correlator", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"correlator");
}

 } else {
xmlWriter.writeStartElement("correlator");
 }


  if (localCorrelator==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("correlator cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localCorrelator);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"correlator"));
 
if (localCorrelator != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCorrelator));
} else {
throw new org.apache.axis2.databinding.ADBException("correlator cannot be null!!");
}
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static StartPeriodicNotificationResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 StartPeriodicNotificationResponse object =
new StartPeriodicNotificationResponse();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"startPeriodicNotificationResponse".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (StartPeriodicNotificationResponse)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","correlator").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setCorrelator(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class DeliveryStatus
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/wap",
"DeliveryStatus",
"ns3");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/wap")){
return "ns3";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for DeliveryStatus
*/


 protected java.lang.String localDeliveryStatus ;

 private static java.util.HashMap _table_ = new java.util.HashMap();

 // Constructor
 
protected DeliveryStatus(java.lang.String value, boolean isRegisterValue) {
 localDeliveryStatus = value;
 if (isRegisterValue){

 _table_.put(localDeliveryStatus, this);

 }

}
 
 public static final java.lang.String _DeliveredToNetwork =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("DeliveredToNetwork");

 public static final java.lang.String _DeliveryUncertain =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("DeliveryUncertain");

 public static final java.lang.String _DeliveryImpossible =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("DeliveryImpossible");

 public static final java.lang.String _MessageWaiting =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("MessageWaiting");

 public static final java.lang.String _DeliveredToTerminal =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("DeliveredToTerminal");

 public static final java.lang.String _DeliveryNotificationNotSupported =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("DeliveryNotificationNotSupported");

public static final DeliveryStatus DeliveredToNetwork =
 new DeliveryStatus(_DeliveredToNetwork,true);
 
public static final DeliveryStatus DeliveryUncertain =
 new DeliveryStatus(_DeliveryUncertain,true);
 
public static final DeliveryStatus DeliveryImpossible =
 new DeliveryStatus(_DeliveryImpossible,true);
 
public static final DeliveryStatus MessageWaiting =
 new DeliveryStatus(_MessageWaiting,true);
 
public static final DeliveryStatus DeliveredToTerminal =
 new DeliveryStatus(_DeliveredToTerminal,true);
 
public static final DeliveryStatus DeliveryNotificationNotSupported =
 new DeliveryStatus(_DeliveryNotificationNotSupported,true);
 

public java.lang.String getValue() { return localDeliveryStatus;}

public boolean equals(java.lang.Object obj) {return (obj == this);}
public int hashCode() { return toString().hashCode();}
public java.lang.String toString() {

return localDeliveryStatus.toString();
 

}



  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 DeliveryStatus.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 

//We can safely assume an element has only one type associated with it

 java.lang.String namespace = parentQName.getNamespaceURI();
 java.lang.String localName = parentQName.getLocalPart();

 if (! namespace.equals("")) {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix, localName, namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace, localName);
}

 } else {
xmlWriter.writeStartElement(localName);
 }

 // add the type details if this is used in a simple type
 if (serializeType){
java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/wap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":DeliveryStatus",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"DeliveryStatus",
xmlWriter);
}
 }
 
  if (localDeliveryStatus==null){
 
  throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

 }else{

 xmlWriter.writeCharacters(localDeliveryStatus);
 
 }
 
 xmlWriter.writeEndElement();

 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{




//We can safely assume an element has only one type associated with it
 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
 new java.lang.Object[]{
 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeliveryStatus)
 },
 null);

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{



public static DeliveryStatus fromValue(java.lang.String value)
throws java.lang.IllegalArgumentException {
 DeliveryStatus enumeration = (DeliveryStatus)
 
 _table_.get(value);


 if (enumeration==null) throw new java.lang.IllegalArgumentException();
 return enumeration;
}
public static DeliveryStatus fromString(java.lang.String value,java.lang.String namespaceURI)
throws java.lang.IllegalArgumentException {
 try {
 
 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


 } catch (java.lang.Exception e) {
throw new java.lang.IllegalArgumentException();
 }
}

public static DeliveryStatus fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
 java.lang.String content) {
 if (content.indexOf(":") > -1){
java.lang.String prefix = content.substring(0,content.indexOf(":"));
java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
return DeliveryStatus.Factory.fromString(content,namespaceUri);
 } else {
 return DeliveryStatus.Factory.fromString(content,"");
 }
}
 

/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static DeliveryStatus parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 DeliveryStatus object = null;
// initialize a hash map to keep values
java.util.Map attributeMap = new java.util.HashMap();
java.util.List extraAttributeList = new java.util.ArrayList();
 

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
while(!reader.isEndElement()) {
 if (reader.isStartElement()  || reader.hasText()){

 java.lang.String content = reader.getElementText();
 
if (content.indexOf(":") > 0) {
 // this seems to be a Qname so find the namespace and send
 prefix = content.substring(0, content.indexOf(":"));
 namespaceuri = reader.getNamespaceURI(prefix);
 object = DeliveryStatus.Factory.fromString(content,namespaceuri);
} else {
 // this seems to be not a qname send and empty namespace incase of it is
 // check is done in fromString method
 object = DeliveryStatus.Factory.fromString(content,"");
}


  } else {
reader.next();
  }  
}  // end of while loop




 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class GetReceivedSmsRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/sms",
"GetReceivedSmsRequest",
"ns7");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/sms")){
return "ns7";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for ApplicationID
*/


 protected java.lang.String localApplicationID ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApplicationID(){
 return localApplicationID;
}



 /**
 * Auto generated setter method
 * @param param ApplicationID
 */
 public void setApplicationID(java.lang.String param){
 
 this.localApplicationID=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 GetReceivedSmsRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/sms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":GetReceivedSmsRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"GetReceivedSmsRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApplicationID", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApplicationID");
}

 } else {
xmlWriter.writeStartElement("ApplicationID");
 }


  if (localApplicationID==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApplicationID);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ApplicationID"));
 
 elementList.add(localApplicationID==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApplicationID));
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static GetReceivedSmsRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 GetReceivedSmsRequest object =
new GetReceivedSmsRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"GetReceivedSmsRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (GetReceivedSmsRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApplicationID").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApplicationID(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class APStatusRepReq
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ap",
"APStatusRepReq",
"ns2");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ap")){
return "ns2";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for APid
*/


 protected java.lang.String localAPid ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getAPid(){
 return localAPid;
}



 /**
 * Auto generated setter method
 * @param param APid
 */
 public void setAPid(java.lang.String param){
 
 this.localAPid=param;
 

 }
 

/**
* field for APStatus
*/


 protected APStatusType localAPStatus ;


/**
* Auto generated getter method
* @return APStatusType
*/
public  APStatusType getAPStatus(){
 return localAPStatus;
}



 /**
 * Auto generated setter method
 * @param param APStatus
 */
 public void setAPStatus(APStatusType param){
 
 this.localAPStatus=param;
 

 }
 

/**
* field for APPid
*/


 protected int localAPPid ;


/**
* Auto generated getter method
* @return int
*/
public  int getAPPid(){
 return localAPPid;
}



 /**
 * Auto generated setter method
 * @param param APPid
 */
 public void setAPPid(int param){
 
 this.localAPPid=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 APStatusRepReq.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":APStatusRepReq",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"APStatusRepReq",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"APid", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"APid");
}

 } else {
xmlWriter.writeStartElement("APid");
 }


  if (localAPid==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("APid cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localAPid);
 
  }
 
xmlWriter.writeEndElement();
  
 if (localAPStatus==null){
 throw new org.apache.axis2.databinding.ADBException("APStatus cannot be null!!");
 }
localAPStatus.serialize(new javax.xml.namespace.QName("","APStatus"),
 factory,xmlWriter);

 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"APPid", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"APPid");
}

 } else {
xmlWriter.writeStartElement("APPid");
 }

 if (localAPPid==java.lang.Integer.MIN_VALUE) {

 throw new org.apache.axis2.databinding.ADBException("APPid cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAPPid));
 }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"APid"));
 
if (localAPid != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAPid));
} else {
throw new org.apache.axis2.databinding.ADBException("APid cannot be null!!");
}
 
 elementList.add(new javax.xml.namespace.QName("",
"APStatus"));
 
 
 if (localAPStatus==null){
 throw new org.apache.axis2.databinding.ADBException("APStatus cannot be null!!");
 }
 elementList.add(localAPStatus);

elementList.add(new javax.xml.namespace.QName("",
"APPid"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAPPid));
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static APStatusRepReq parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 APStatusRepReq object =
new APStatusRepReq();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"APStatusRepReq".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (APStatusRepReq)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","APid").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAPid(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","APStatus").equals(reader.getName())){

object.setAPStatus(APStatusType.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","APPid").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAPPid(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class APStatusRepRsp
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ap",
"APStatusRepRsp",
"ns2");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ap")){
return "ns2";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for NextCommand
*/


 protected java.lang.String localNextCommand ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getNextCommand(){
 return localNextCommand;
}



 /**
 * Auto generated setter method
 * @param param NextCommand
 */
 public void setNextCommand(java.lang.String param){
 
 this.localNextCommand=param;
 

 }
 

/**
* field for NextInterval
*/


 protected int localNextInterval ;


/**
* Auto generated getter method
* @return int
*/
public  int getNextInterval(){
 return localNextInterval;
}



 /**
 * Auto generated setter method
 * @param param NextInterval
 */
 public void setNextInterval(int param){
 
 this.localNextInterval=param;
 

 }
 

/**
* field for ApSvcAuthType
* This was an Array!
*/


 protected java.lang.String[] localApSvcAuthType ;

/*  This tracker boolean wil be used to detect whether the user called the set method
  *for this attribute. It will be used to determine whether to include this field
*in the serialized XML
*/
protected boolean localApSvcAuthTypeTracker = false ;


/**
* Auto generated getter method
* @return java.lang.String[]
*/
public  java.lang.String[] getApSvcAuthType(){
 return localApSvcAuthType;
}





 
/**
 * validate the array for ApSvcAuthType
 */
protected void validateApSvcAuthType(java.lang.String[] param){
  
}


  /**
* Auto generated setter method
* @param param ApSvcAuthType
*/
public void setApSvcAuthType(java.lang.String[] param){

validateApSvcAuthType(param);

 
  if (param != null){
  //update the setting tracker
  localApSvcAuthTypeTracker = true;
  } else {
  localApSvcAuthTypeTracker = true;
 
  }

this.localApSvcAuthType=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param java.lang.String
  */
  public void addApSvcAuthType(java.lang.String param){
if (localApSvcAuthType == null){
localApSvcAuthType = new java.lang.String[]{};
}

 
 //update the setting tracker
localApSvcAuthTypeTracker = true;
 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localApSvcAuthType);
 list.add(param);
 this.localApSvcAuthType =
  (java.lang.String[])list.toArray(
 new java.lang.String[list.size()]);

  }
  

/**
* field for ApSvcPerfCmdType
* This was an Array!
*/


 protected java.lang.String[] localApSvcPerfCmdType ;

/*  This tracker boolean wil be used to detect whether the user called the set method
  *for this attribute. It will be used to determine whether to include this field
*in the serialized XML
*/
protected boolean localApSvcPerfCmdTypeTracker = false ;


/**
* Auto generated getter method
* @return java.lang.String[]
*/
public  java.lang.String[] getApSvcPerfCmdType(){
 return localApSvcPerfCmdType;
}





 
/**
 * validate the array for ApSvcPerfCmdType
 */
protected void validateApSvcPerfCmdType(java.lang.String[] param){
  
}


  /**
* Auto generated setter method
* @param param ApSvcPerfCmdType
*/
public void setApSvcPerfCmdType(java.lang.String[] param){

validateApSvcPerfCmdType(param);

 
  if (param != null){
  //update the setting tracker
  localApSvcPerfCmdTypeTracker = true;
  } else {
  localApSvcPerfCmdTypeTracker = true;
 
  }

this.localApSvcPerfCmdType=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param java.lang.String
  */
  public void addApSvcPerfCmdType(java.lang.String param){
if (localApSvcPerfCmdType == null){
localApSvcPerfCmdType = new java.lang.String[]{};
}

 
 //update the setting tracker
localApSvcPerfCmdTypeTracker = true;
 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localApSvcPerfCmdType);
 list.add(param);
 this.localApSvcPerfCmdType =
  (java.lang.String[])list.toArray(
 new java.lang.String[list.size()]);

  }
  

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 APStatusRepRsp.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":APStatusRepRsp",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"APStatusRepRsp",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"NextCommand", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"NextCommand");
}

 } else {
xmlWriter.writeStartElement("NextCommand");
 }


  if (localNextCommand==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localNextCommand);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"NextInterval", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"NextInterval");
}

 } else {
xmlWriter.writeStartElement("NextInterval");
 }

 if (localNextInterval==java.lang.Integer.MIN_VALUE) {

 throw new org.apache.axis2.databinding.ADBException("NextInterval cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNextInterval));
 }
 
xmlWriter.writeEndElement();
if (localApSvcAuthTypeTracker){
  if (localApSvcAuthType!=null) {
namespace = "";
boolean emptyNamespace = namespace == null || namespace.length() == 0;
prefix =  emptyNamespace ? null : xmlWriter.getPrefix(namespace);
for (int i = 0;i < localApSvcAuthType.length;i++){

 if (localApSvcAuthType[i] != null){

if (!emptyNamespace) {
 if (prefix == null) {
java.lang.String prefix2 = generatePrefix(namespace);

xmlWriter.writeStartElement(prefix2,"ApSvcAuthType", namespace);
xmlWriter.writeNamespace(prefix2, namespace);
xmlWriter.setPrefix(prefix2, namespace);

 } else {
xmlWriter.writeStartElement(namespace,"ApSvcAuthType");
 }

} else {
 xmlWriter.writeStartElement("ApSvcAuthType");
}

 
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApSvcAuthType[i]));
 
xmlWriter.writeEndElement();

} else {

// write null attribute
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApSvcAuthType", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApSvcAuthType");
}

 } else {
xmlWriter.writeStartElement("ApSvcAuthType");
 }
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
 xmlWriter.writeEndElement();
 
}

}
  } else {
 
 // write the null attribute
// write null attribute
 java.lang.String namespace2 = "";
 if (! namespace2.equals("")) {
java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

if (prefix2 == null) {
 prefix2 = generatePrefix(namespace2);

 xmlWriter.writeStartElement(prefix2,"ApSvcAuthType", namespace2);
 xmlWriter.writeNamespace(prefix2, namespace2);
 xmlWriter.setPrefix(prefix2, namespace2);

} else {
 xmlWriter.writeStartElement(namespace2,"ApSvcAuthType");
}

 } else {
xmlWriter.writeStartElement("ApSvcAuthType");
 }

// write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 
  }

} if (localApSvcPerfCmdTypeTracker){
  if (localApSvcPerfCmdType!=null) {
namespace = "";
boolean emptyNamespace = namespace == null || namespace.length() == 0;
prefix =  emptyNamespace ? null : xmlWriter.getPrefix(namespace);
for (int i = 0;i < localApSvcPerfCmdType.length;i++){

 if (localApSvcPerfCmdType[i] != null){

if (!emptyNamespace) {
 if (prefix == null) {
java.lang.String prefix2 = generatePrefix(namespace);

xmlWriter.writeStartElement(prefix2,"ApSvcPerfCmdType", namespace);
xmlWriter.writeNamespace(prefix2, namespace);
xmlWriter.setPrefix(prefix2, namespace);

 } else {
xmlWriter.writeStartElement(namespace,"ApSvcPerfCmdType");
 }

} else {
 xmlWriter.writeStartElement("ApSvcPerfCmdType");
}

 
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApSvcPerfCmdType[i]));
 
xmlWriter.writeEndElement();

} else {

// write null attribute
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApSvcPerfCmdType", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApSvcPerfCmdType");
}

 } else {
xmlWriter.writeStartElement("ApSvcPerfCmdType");
 }
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
 xmlWriter.writeEndElement();
 
}

}
  } else {
 
 // write the null attribute
// write null attribute
 java.lang.String namespace2 = "";
 if (! namespace2.equals("")) {
java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

if (prefix2 == null) {
 prefix2 = generatePrefix(namespace2);

 xmlWriter.writeStartElement(prefix2,"ApSvcPerfCmdType", namespace2);
 xmlWriter.writeNamespace(prefix2, namespace2);
 xmlWriter.setPrefix(prefix2, namespace2);

} else {
 xmlWriter.writeStartElement(namespace2,"ApSvcPerfCmdType");
}

 } else {
xmlWriter.writeStartElement("ApSvcPerfCmdType");
 }

// write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 
  }

}
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"NextCommand"));
 
 elementList.add(localNextCommand==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNextCommand));
 
elementList.add(new javax.xml.namespace.QName("",
"NextInterval"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNextInterval));
  if (localApSvcAuthTypeTracker){
 if (localApSvcAuthType!=null){
  for (int i = 0;i < localApSvcAuthType.length;i++){

 if (localApSvcAuthType[i] != null){
  elementList.add(new javax.xml.namespace.QName("",
"ApSvcAuthType"));
  elementList.add(
  org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApSvcAuthType[i]));
  } else {
  
 elementList.add(new javax.xml.namespace.QName("",
"ApSvcAuthType"));
 elementList.add(null);

  }


  }
 } else {

 elementList.add(new javax.xml.namespace.QName("",
"ApSvcAuthType"));
 elementList.add(null);

 }

} if (localApSvcPerfCmdTypeTracker){
 if (localApSvcPerfCmdType!=null){
  for (int i = 0;i < localApSvcPerfCmdType.length;i++){

 if (localApSvcPerfCmdType[i] != null){
  elementList.add(new javax.xml.namespace.QName("",
"ApSvcPerfCmdType"));
  elementList.add(
  org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApSvcPerfCmdType[i]));
  } else {
  
 elementList.add(new javax.xml.namespace.QName("",
"ApSvcPerfCmdType"));
 elementList.add(null);

  }


  }
 } else {

 elementList.add(new javax.xml.namespace.QName("",
"ApSvcPerfCmdType"));
 elementList.add(null);

 }

}

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static APStatusRepRsp parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 APStatusRepRsp object =
new APStatusRepRsp();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"APStatusRepRsp".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (APStatusRepRsp)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list3 = new java.util.ArrayList();
 
java.util.ArrayList list4 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","NextCommand").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setNextCommand(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","NextInterval").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setNextInterval(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApSvcAuthType").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 
nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  list3.add(null);
 
  reader.next();
} else {
 list3.add(reader.getElementText());
 }
 //loop until we find a start element that is not part of this array
 boolean loopDone3 = false;
 while(!loopDone3){
// Ensure we are at the EndElement
while (!reader.isEndElement()){
 reader.next();
}
// Step out of this element
reader.next();
// Step to next element event.
while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();
if (reader.isEndElement()){
 //two continuous end elements means we are exiting the xml structure
 loopDone3 = true;
} else {
 if (new javax.xml.namespace.QName("","ApSvcAuthType").equals(reader.getName())){
 
  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
list3.add(null);

reader.next();
  } else {
list3.add(reader.getElementText());
}
 }else{
loopDone3 = true;
 }
}
 }
 // call the converter utility  to convert and set the array
 
 object.setApSvcAuthType((java.lang.String[])
list3.toArray(new java.lang.String[list3.size()]));

}  // End of if for expected property start element

 else {

 }

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApSvcPerfCmdType").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 
nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  list4.add(null);
 
  reader.next();
} else {
 list4.add(reader.getElementText());
 }
 //loop until we find a start element that is not part of this array
 boolean loopDone4 = false;
 while(!loopDone4){
// Ensure we are at the EndElement
while (!reader.isEndElement()){
 reader.next();
}
// Step out of this element
reader.next();
// Step to next element event.
while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();
if (reader.isEndElement()){
 //two continuous end elements means we are exiting the xml structure
 loopDone4 = true;
} else {
 if (new javax.xml.namespace.QName("","ApSvcPerfCmdType").equals(reader.getName())){
 
  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
list4.add(null);

reader.next();
  } else {
list4.add(reader.getElementText());
}
 }else{
loopDone4 = true;
 }
}
 }
 // call the converter utility  to convert and set the array
 
 object.setApSvcPerfCmdType((java.lang.String[])
list4.toArray(new java.lang.String[list4.size()]));

}  // End of if for expected property start element

 else {

 }
  
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class SendMethodType
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/sms",
"SendMethodType",
"ns7");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/sms")){
return "ns7";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for SendMethodType
*/


 protected java.lang.String localSendMethodType ;

 private static java.util.HashMap _table_ = new java.util.HashMap();

 // Constructor
 
protected SendMethodType(java.lang.String value, boolean isRegisterValue) {
 localSendMethodType = value;
 if (isRegisterValue){

 _table_.put(localSendMethodType, this);

 }

}
 
 public static final java.lang.String _Normal =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Normal");

 public static final java.lang.String _Instant =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Instant");

 public static final java.lang.String _Long =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Long");

 public static final java.lang.String _Structured =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Structured");

public static final SendMethodType Normal =
 new SendMethodType(_Normal,true);
 
public static final SendMethodType Instant =
 new SendMethodType(_Instant,true);
 
public static final SendMethodType Long =
 new SendMethodType(_Long,true);
 
public static final SendMethodType Structured =
 new SendMethodType(_Structured,true);
 

public java.lang.String getValue() { return localSendMethodType;}

public boolean equals(java.lang.Object obj) {return (obj == this);}
public int hashCode() { return toString().hashCode();}
public java.lang.String toString() {

return localSendMethodType.toString();
 

}



  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 SendMethodType.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 

//We can safely assume an element has only one type associated with it

 java.lang.String namespace = parentQName.getNamespaceURI();
 java.lang.String localName = parentQName.getLocalPart();

 if (! namespace.equals("")) {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix, localName, namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace, localName);
}

 } else {
xmlWriter.writeStartElement(localName);
 }

 // add the type details if this is used in a simple type
 if (serializeType){
java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/sms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":SendMethodType",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"SendMethodType",
xmlWriter);
}
 }
 
  if (localSendMethodType==null){
 
  throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

 }else{

 xmlWriter.writeCharacters(localSendMethodType);
 
 }
 
 xmlWriter.writeEndElement();

 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{




//We can safely assume an element has only one type associated with it
 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
 new java.lang.Object[]{
 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSendMethodType)
 },
 null);

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{



public static SendMethodType fromValue(java.lang.String value)
throws java.lang.IllegalArgumentException {
 SendMethodType enumeration = (SendMethodType)
 
 _table_.get(value);


 if (enumeration==null) throw new java.lang.IllegalArgumentException();
 return enumeration;
}
public static SendMethodType fromString(java.lang.String value,java.lang.String namespaceURI)
throws java.lang.IllegalArgumentException {
 try {
 
 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


 } catch (java.lang.Exception e) {
throw new java.lang.IllegalArgumentException();
 }
}

public static SendMethodType fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
 java.lang.String content) {
 if (content.indexOf(":") > -1){
java.lang.String prefix = content.substring(0,content.indexOf(":"));
java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
return SendMethodType.Factory.fromString(content,namespaceUri);
 } else {
 return SendMethodType.Factory.fromString(content,"");
 }
}
 

/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static SendMethodType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 SendMethodType object = null;
// initialize a hash map to keep values
java.util.Map attributeMap = new java.util.HashMap();
java.util.List extraAttributeList = new java.util.ArrayList();
 

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
while(!reader.isEndElement()) {
 if (reader.isStartElement()  || reader.hasText()){

 java.lang.String content = reader.getElementText();
 
if (content.indexOf(":") > 0) {
 // this seems to be a Qname so find the namespace and send
 prefix = content.substring(0, content.indexOf(":"));
 namespaceuri = reader.getNamespaceURI(prefix);
 object = SendMethodType.Factory.fromString(content,namespaceuri);
} else {
 // this seems to be not a qname send and empty namespace incase of it is
 // check is done in fromString method
 object = SendMethodType.Factory.fromString(content,"");
}


  } else {
reader.next();
  }  
}  // end of while loop




 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class TimeMetric
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
name = TimeMetric
Namespace URI = http://www.csapi.org/schema/common/v2_0
Namespace Prefix = ns1
*/
 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/common/v2_0")){
return "ns1";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Metric
*/


 protected TimeMetricsValues localMetric ;


/**
* Auto generated getter method
* @return TimeMetricsValues
*/
public  TimeMetricsValues getMetric(){
 return localMetric;
}



 /**
 * Auto generated setter method
 * @param param Metric
 */
 public void setMetric(TimeMetricsValues param){
 
 this.localMetric=param;
 

 }
 

/**
* field for Units
*/


 protected int localUnits ;


/**
* Auto generated getter method
* @return int
*/
public  int getUnits(){
 return localUnits;
}



 /**
 * Auto generated setter method
 * @param param Units
 */
 public void setUnits(int param){
 
 this.localUnits=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



 org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,parentQName){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 TimeMetric.this.serialize(parentQName,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 parentQName,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/common/v2_0");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":TimeMetric",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"TimeMetric",
xmlWriter);
}

 
}
 
 if (localMetric==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"Metric", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"Metric");
 }

} else {
 xmlWriter.writeStartElement("Metric");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localMetric.serialize(new javax.xml.namespace.QName("","Metric"),
factory,xmlWriter);
 }

 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Units", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Units");
}

 } else {
xmlWriter.writeStartElement("Units");
 }

 if (localUnits==java.lang.Integer.MIN_VALUE) {

 throw new org.apache.axis2.databinding.ADBException("Units cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUnits));
 }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


 elementList.add(new javax.xml.namespace.QName("",
"Metric"));
 
 
 elementList.add(localMetric==null?null:
 localMetric);

elementList.add(new javax.xml.namespace.QName("",
"Units"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUnits));
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static TimeMetric parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 TimeMetric object =
new TimeMetric();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"TimeMetric".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (TimeMetric)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Metric").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setMetric(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setMetric(TimeMetricsValues.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Units").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setUnits(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class NotifySmsReceptionRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/sms",
"notifySmsReceptionRequest",
"ns7");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/sms")){
return "ns7";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Message
*/


 protected SMSMessage localMessage ;


/**
* Auto generated getter method
* @return SMSMessage
*/
public  SMSMessage getMessage(){
 return localMessage;
}



 /**
 * Auto generated setter method
 * @param param Message
 */
 public void setMessage(SMSMessage param){
 
 this.localMessage=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 NotifySmsReceptionRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/sms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":notifySmsReceptionRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"notifySmsReceptionRequest",
xmlWriter);
}

 
}
 
 if (localMessage==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"Message", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"Message");
 }

} else {
 xmlWriter.writeStartElement("Message");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localMessage.serialize(new javax.xml.namespace.QName("","Message"),
factory,xmlWriter);
 }

 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


 elementList.add(new javax.xml.namespace.QName("",
"Message"));
 
 
 elementList.add(localMessage==null?null:
 localMessage);


return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static NotifySmsReceptionRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 NotifySmsReceptionRequest object =
new NotifySmsReceptionRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"notifySmsReceptionRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (NotifySmsReceptionRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Message").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setMessage(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setMessage(SMSMessage.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class GetLocationRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/location",
"getLocationRequest",
"ns5");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/location")){
return "ns5";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Requester
*/


 protected org.apache.axis2.databinding.types.URI localRequester ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI
*/
public  org.apache.axis2.databinding.types.URI getRequester(){
 return localRequester;
}



 /**
 * Auto generated setter method
 * @param param Requester
 */
 public void setRequester(org.apache.axis2.databinding.types.URI param){
 
 this.localRequester=param;
 

 }
 

/**
* field for Address
*/


 protected org.apache.axis2.databinding.types.URI localAddress ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI
*/
public  org.apache.axis2.databinding.types.URI getAddress(){
 return localAddress;
}



 /**
 * Auto generated setter method
 * @param param Address
 */
 public void setAddress(org.apache.axis2.databinding.types.URI param){
 
 this.localAddress=param;
 

 }
 

/**
* field for RequestedAccuracy
*/


 protected int localRequestedAccuracy ;


/**
* Auto generated getter method
* @return int
*/
public  int getRequestedAccuracy(){
 return localRequestedAccuracy;
}



 /**
 * Auto generated setter method
 * @param param RequestedAccuracy
 */
 public void setRequestedAccuracy(int param){
 
 this.localRequestedAccuracy=param;
 

 }
 

/**
* field for AcceptableAccuracy
*/


 protected int localAcceptableAccuracy ;


/**
* Auto generated getter method
* @return int
*/
public  int getAcceptableAccuracy(){
 return localAcceptableAccuracy;
}



 /**
 * Auto generated setter method
 * @param param AcceptableAccuracy
 */
 public void setAcceptableAccuracy(int param){
 
 this.localAcceptableAccuracy=param;
 

 }
 

/**
* field for MaximumAge
*/


 protected TimeMetric localMaximumAge ;


/**
* Auto generated getter method
* @return TimeMetric
*/
public  TimeMetric getMaximumAge(){
 return localMaximumAge;
}



 /**
 * Auto generated setter method
 * @param param MaximumAge
 */
 public void setMaximumAge(TimeMetric param){
 
 this.localMaximumAge=param;
 

 }
 

/**
* field for ResponseTime
*/


 protected TimeMetric localResponseTime ;


/**
* Auto generated getter method
* @return TimeMetric
*/
public  TimeMetric getResponseTime(){
 return localResponseTime;
}



 /**
 * Auto generated setter method
 * @param param ResponseTime
 */
 public void setResponseTime(TimeMetric param){
 
 this.localResponseTime=param;
 

 }
 

/**
* field for Tolerance
*/


 protected DelayTolerance localTolerance ;


/**
* Auto generated getter method
* @return DelayTolerance
*/
public  DelayTolerance getTolerance(){
 return localTolerance;
}



 /**
 * Auto generated setter method
 * @param param Tolerance
 */
 public void setTolerance(DelayTolerance param){
 
 this.localTolerance=param;
 

 }
 

/**
* field for ApplicationId
*/


 protected java.lang.String localApplicationId ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApplicationId(){
 return localApplicationId;
}



 /**
 * Auto generated setter method
 * @param param ApplicationId
 */
 public void setApplicationId(java.lang.String param){
 
 this.localApplicationId=param;
 

 }
 

/**
* field for ServiceType
*/


 protected ServiceType localServiceType ;


/**
* Auto generated getter method
* @return ServiceType
*/
public  ServiceType getServiceType(){
 return localServiceType;
}



 /**
 * Auto generated setter method
 * @param param ServiceType
 */
 public void setServiceType(ServiceType param){
 
 this.localServiceType=param;
 

 }
 

/**
* field for Crs
*/


 protected CoordinateReferenceSystem localCrs ;


/**
* Auto generated getter method
* @return CoordinateReferenceSystem
*/
public  CoordinateReferenceSystem getCrs(){
 return localCrs;
}



 /**
 * Auto generated setter method
 * @param param Crs
 */
 public void setCrs(CoordinateReferenceSystem param){
 
 this.localCrs=param;
 

 }
 

/**
* field for LocType
*/


 protected LocType localLocType ;


/**
* Auto generated getter method
* @return LocType
*/
public  LocType getLocType(){
 return localLocType;
}



 /**
 * Auto generated setter method
 * @param param LocType
 */
 public void setLocType(LocType param){
 
 this.localLocType=param;
 

 }
 

/**
* field for Prio
*/


 protected Priority localPrio ;


/**
* Auto generated getter method
* @return Priority
*/
public  Priority getPrio(){
 return localPrio;
}



 /**
 * Auto generated setter method
 * @param param Prio
 */
 public void setPrio(Priority param){
 
 this.localPrio=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 GetLocationRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/location");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":getLocationRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"getLocationRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Requester", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Requester");
}

 } else {
xmlWriter.writeStartElement("Requester");
 }


  if (localRequester==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequester));
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Address", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Address");
}

 } else {
xmlWriter.writeStartElement("Address");
 }


  if (localAddress==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddress));
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"RequestedAccuracy", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"RequestedAccuracy");
}

 } else {
xmlWriter.writeStartElement("RequestedAccuracy");
 }

 if (localRequestedAccuracy==java.lang.Integer.MIN_VALUE) {

 throw new org.apache.axis2.databinding.ADBException("RequestedAccuracy cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestedAccuracy));
 }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"AcceptableAccuracy", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"AcceptableAccuracy");
}

 } else {
xmlWriter.writeStartElement("AcceptableAccuracy");
 }

 if (localAcceptableAccuracy==java.lang.Integer.MIN_VALUE) {

 throw new org.apache.axis2.databinding.ADBException("AcceptableAccuracy cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAcceptableAccuracy));
 }
 
xmlWriter.writeEndElement();
  
 if (localMaximumAge==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"MaximumAge", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"MaximumAge");
 }

} else {
 xmlWriter.writeStartElement("MaximumAge");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localMaximumAge.serialize(new javax.xml.namespace.QName("","MaximumAge"),
factory,xmlWriter);
 }

 if (localResponseTime==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"ResponseTime", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"ResponseTime");
 }

} else {
 xmlWriter.writeStartElement("ResponseTime");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localResponseTime.serialize(new javax.xml.namespace.QName("","ResponseTime"),
factory,xmlWriter);
 }

 if (localTolerance==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"Tolerance", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"Tolerance");
 }

} else {
 xmlWriter.writeStartElement("Tolerance");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localTolerance.serialize(new javax.xml.namespace.QName("","Tolerance"),
factory,xmlWriter);
 }

 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApplicationId", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApplicationId");
}

 } else {
xmlWriter.writeStartElement("ApplicationId");
 }


  if (localApplicationId==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApplicationId);
 
  }
 
xmlWriter.writeEndElement();
  
 if (localServiceType==null){
 throw new org.apache.axis2.databinding.ADBException("serviceType cannot be null!!");
 }
localServiceType.serialize(new javax.xml.namespace.QName("","serviceType"),
 factory,xmlWriter);

 if (localCrs==null){
 throw new org.apache.axis2.databinding.ADBException("crs cannot be null!!");
 }
localCrs.serialize(new javax.xml.namespace.QName("","crs"),
 factory,xmlWriter);

 if (localLocType==null){
 throw new org.apache.axis2.databinding.ADBException("locType cannot be null!!");
 }
localLocType.serialize(new javax.xml.namespace.QName("","locType"),
 factory,xmlWriter);

 if (localPrio==null){
 throw new org.apache.axis2.databinding.ADBException("prio cannot be null!!");
 }
localPrio.serialize(new javax.xml.namespace.QName("","prio"),
 factory,xmlWriter);

 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"Requester"));
 
 elementList.add(localRequester==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequester));
 
elementList.add(new javax.xml.namespace.QName("",
"Address"));
 
 elementList.add(localAddress==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAddress));
 
elementList.add(new javax.xml.namespace.QName("",
"RequestedAccuracy"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestedAccuracy));
 
elementList.add(new javax.xml.namespace.QName("",
"AcceptableAccuracy"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAcceptableAccuracy));
 
 elementList.add(new javax.xml.namespace.QName("",
"MaximumAge"));
 
 
 elementList.add(localMaximumAge==null?null:
 localMaximumAge);

 elementList.add(new javax.xml.namespace.QName("",
"ResponseTime"));
 
 
 elementList.add(localResponseTime==null?null:
 localResponseTime);

 elementList.add(new javax.xml.namespace.QName("",
"Tolerance"));
 
 
 elementList.add(localTolerance==null?null:
 localTolerance);

elementList.add(new javax.xml.namespace.QName("",
"ApplicationId"));
 
 elementList.add(localApplicationId==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApplicationId));
 
 elementList.add(new javax.xml.namespace.QName("",
"serviceType"));
 
 
 if (localServiceType==null){
 throw new org.apache.axis2.databinding.ADBException("serviceType cannot be null!!");
 }
 elementList.add(localServiceType);

 elementList.add(new javax.xml.namespace.QName("",
"crs"));
 
 
 if (localCrs==null){
 throw new org.apache.axis2.databinding.ADBException("crs cannot be null!!");
 }
 elementList.add(localCrs);

 elementList.add(new javax.xml.namespace.QName("",
"locType"));
 
 
 if (localLocType==null){
 throw new org.apache.axis2.databinding.ADBException("locType cannot be null!!");
 }
 elementList.add(localLocType);

 elementList.add(new javax.xml.namespace.QName("",
"prio"));
 
 
 if (localPrio==null){
 throw new org.apache.axis2.databinding.ADBException("prio cannot be null!!");
 }
 elementList.add(localPrio);


return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static GetLocationRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 GetLocationRequest object =
new GetLocationRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"getLocationRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (GetLocationRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Requester").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setRequester(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Address").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setAddress(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","RequestedAccuracy").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setRequestedAccuracy(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","AcceptableAccuracy").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAcceptableAccuracy(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","MaximumAge").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setMaximumAge(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setMaximumAge(TimeMetric.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ResponseTime").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setResponseTime(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setResponseTime(TimeMetric.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Tolerance").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setTolerance(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setTolerance(DelayTolerance.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApplicationId").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApplicationId(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","serviceType").equals(reader.getName())){

object.setServiceType(ServiceType.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","crs").equals(reader.getName())){

object.setCrs(CoordinateReferenceSystem.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","locType").equals(reader.getName())){

object.setLocType(LocType.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","prio").equals(reader.getName())){

object.setPrio(Priority.Factory.parse(reader));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class SendSmsResponse
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/sms",
"sendSmsResponse",
"ns7");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/sms")){
return "ns7";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for RequestIdentifier
*/


 protected java.lang.String localRequestIdentifier ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getRequestIdentifier(){
 return localRequestIdentifier;
}



 /**
 * Auto generated setter method
 * @param param RequestIdentifier
 */
 public void setRequestIdentifier(java.lang.String param){
 
 this.localRequestIdentifier=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 SendSmsResponse.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/sms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":sendSmsResponse",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"sendSmsResponse",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"RequestIdentifier", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"RequestIdentifier");
}

 } else {
xmlWriter.writeStartElement("RequestIdentifier");
 }


  if (localRequestIdentifier==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localRequestIdentifier);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"RequestIdentifier"));
 
 elementList.add(localRequestIdentifier==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestIdentifier));
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static SendSmsResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 SendSmsResponse object =
new SendSmsResponse();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"sendSmsResponse".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (SendSmsResponse)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","RequestIdentifier").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setRequestIdentifier(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class PauseAPReq
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ap",
"PauseAPReq",
"ns2");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ap")){
return "ns2";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for APid
*/


 protected java.lang.String localAPid ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getAPid(){
 return localAPid;
}



 /**
 * Auto generated setter method
 * @param param APid
 */
 public void setAPid(java.lang.String param){
 
 this.localAPid=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 PauseAPReq.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":PauseAPReq",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"PauseAPReq",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"APid", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"APid");
}

 } else {
xmlWriter.writeStartElement("APid");
 }


  if (localAPid==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("APid cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localAPid);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"APid"));
 
if (localAPid != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAPid));
} else {
throw new org.apache.axis2.databinding.ADBException("APid cannot be null!!");
}
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static PauseAPReq parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 PauseAPReq object =
new PauseAPReq();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"PauseAPReq".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (PauseAPReq)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","APid").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAPid(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class GetReceivedSmsResponse
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/sms",
"GetReceivedSmsResponse",
"ns7");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/sms")){
return "ns7";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Item
* This was an Array!
*/


 protected SMSMessage[] localItem ;

/*  This tracker boolean wil be used to detect whether the user called the set method
  *for this attribute. It will be used to determine whether to include this field
*in the serialized XML
*/
protected boolean localItemTracker = false ;


/**
* Auto generated getter method
* @return SMSMessage[]
*/
public  SMSMessage[] getItem(){
 return localItem;
}





 
/**
 * validate the array for Item
 */
protected void validateItem(SMSMessage[] param){
  
}


  /**
* Auto generated setter method
* @param param Item
*/
public void setItem(SMSMessage[] param){

validateItem(param);

 
  if (param != null){
  //update the setting tracker
  localItemTracker = true;
  } else {
  localItemTracker = false;
 
  }

this.localItem=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param SMSMessage
  */
  public void addItem(SMSMessage param){
if (localItem == null){
localItem = new SMSMessage[]{};
}

 
 //update the setting tracker
localItemTracker = true;
 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localItem);
 list.add(param);
 this.localItem =
  (SMSMessage[])list.toArray(
 new SMSMessage[list.size()]);

  }
  

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 GetReceivedSmsResponse.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/sms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":GetReceivedSmsResponse",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"GetReceivedSmsResponse",
xmlWriter);
}

 
}
if (localItemTracker){
 if (localItem!=null){
 for (int i = 0;i < localItem.length;i++){
if (localItem[i] != null){
 localItem[i].serialize(new javax.xml.namespace.QName("","item"),
factory,xmlWriter);
} else {

// we don't have to do any thing since minOccures is zero
 
}

 }
  } else {

 throw new org.apache.axis2.databinding.ADBException("item cannot be null!!");

 }
 }
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();

 if (localItemTracker){
  if (localItem!=null) {
 for (int i = 0;i < localItem.length;i++){

 if (localItem[i] != null){
 elementList.add(new javax.xml.namespace.QName("",
  "item"));
 elementList.add(localItem[i]);
 } else {

// nothing to do
 
 }

 }
  } else {
 
throw new org.apache.axis2.databinding.ADBException("item cannot be null!!");
 
  }

}

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static GetReceivedSmsResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 GetReceivedSmsResponse object =
new GetReceivedSmsResponse();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"GetReceivedSmsResponse".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (GetReceivedSmsResponse)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list1 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","item").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 list1.add(SMSMessage.Factory.parse(reader));

//loop until we find a start element that is not part of this array
boolean loopDone1 = false;
while(!loopDone1){
 // We should be at the end element, but make sure
 while (!reader.isEndElement())
reader.next();
 // Step out of this element
 reader.next();
 // Step to next element event.
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 if (reader.isEndElement()){
//two continuous end elements means we are exiting the xml structure
loopDone1 = true;
 } else {
if (new javax.xml.namespace.QName("","item").equals(reader.getName())){
 list1.add(SMSMessage.Factory.parse(reader));

}else{
 loopDone1 = true;
}
 }
}
// call the converter utility  to convert and set the array

object.setItem((SMSMessage[])
 org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
SMSMessage.class,
list1));
 
}  // End of if for expected property start element

 else {

 }
  
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class GetReceivedMessagesResponse
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/mms",
"getReceivedMessagesResponse",
"ns8");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/mms")){
return "ns8";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Item
* This was an Array!
*/


 protected MessageReference[] localItem ;

/*  This tracker boolean wil be used to detect whether the user called the set method
  *for this attribute. It will be used to determine whether to include this field
*in the serialized XML
*/
protected boolean localItemTracker = false ;


/**
* Auto generated getter method
* @return MessageReference[]
*/
public  MessageReference[] getItem(){
 return localItem;
}





 
/**
 * validate the array for Item
 */
protected void validateItem(MessageReference[] param){
  
}


  /**
* Auto generated setter method
* @param param Item
*/
public void setItem(MessageReference[] param){

validateItem(param);

 
  if (param != null){
  //update the setting tracker
  localItemTracker = true;
  } else {
  localItemTracker = false;
 
  }

this.localItem=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param MessageReference
  */
  public void addItem(MessageReference param){
if (localItem == null){
localItem = new MessageReference[]{};
}

 
 //update the setting tracker
localItemTracker = true;
 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localItem);
 list.add(param);
 this.localItem =
  (MessageReference[])list.toArray(
 new MessageReference[list.size()]);

  }
  

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 GetReceivedMessagesResponse.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/mms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":getReceivedMessagesResponse",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"getReceivedMessagesResponse",
xmlWriter);
}

 
}
if (localItemTracker){
 if (localItem!=null){
 for (int i = 0;i < localItem.length;i++){
if (localItem[i] != null){
 localItem[i].serialize(new javax.xml.namespace.QName("","item"),
factory,xmlWriter);
} else {

// we don't have to do any thing since minOccures is zero
 
}

 }
  } else {

 throw new org.apache.axis2.databinding.ADBException("item cannot be null!!");

 }
 }
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();

 if (localItemTracker){
  if (localItem!=null) {
 for (int i = 0;i < localItem.length;i++){

 if (localItem[i] != null){
 elementList.add(new javax.xml.namespace.QName("",
  "item"));
 elementList.add(localItem[i]);
 } else {

// nothing to do
 
 }

 }
  } else {
 
throw new org.apache.axis2.databinding.ADBException("item cannot be null!!");
 
  }

}

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static GetReceivedMessagesResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 GetReceivedMessagesResponse object =
new GetReceivedMessagesResponse();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"getReceivedMessagesResponse".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (GetReceivedMessagesResponse)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list1 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","item").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 list1.add(MessageReference.Factory.parse(reader));

//loop until we find a start element that is not part of this array
boolean loopDone1 = false;
while(!loopDone1){
 // We should be at the end element, but make sure
 while (!reader.isEndElement())
reader.next();
 // Step out of this element
 reader.next();
 // Step to next element event.
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 if (reader.isEndElement()){
//two continuous end elements means we are exiting the xml structure
loopDone1 = true;
 } else {
if (new javax.xml.namespace.QName("","item").equals(reader.getName())){
 list1.add(MessageReference.Factory.parse(reader));

}else{
 loopDone1 = true;
}
 }
}
// call the converter utility  to convert and set the array

object.setItem((MessageReference[])
 org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
MessageReference.class,
list1));
 
}  // End of if for expected property start element

 else {

 }
  
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class DeliveryStatusE
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/sms",
"DeliveryStatus",
"ns7");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/sms")){
return "ns7";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for DeliveryStatus
*/


 protected java.lang.String localDeliveryStatus ;

 private static java.util.HashMap _table_ = new java.util.HashMap();

 // Constructor
 
protected DeliveryStatusE(java.lang.String value, boolean isRegisterValue) {
 localDeliveryStatus = value;
 if (isRegisterValue){

 _table_.put(localDeliveryStatus, this);

 }

}
 
 public static final java.lang.String _Delivered =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Delivered");

 public static final java.lang.String _DeliveryUncertain =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("DeliveryUncertain");

 public static final java.lang.String _DeliveryImpossible =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("DeliveryImpossible");

 public static final java.lang.String _MessageWaiting =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("MessageWaiting");

 public static final java.lang.String _DeliveryToTerminal =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("DeliveryToTerminal");

 public static final java.lang.String _DeliveryNotificationNotSupported =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("DeliveryNotificationNotSupported");

 public static final java.lang.String _KeyWordFilterFailed =
org.apache.axis2.databinding.utils.ConverterUtil.convertToString("KeyWordFilterFailed");

public static final DeliveryStatusE Delivered =
 new DeliveryStatusE(_Delivered,true);
 
public static final DeliveryStatusE DeliveryUncertain =
 new DeliveryStatusE(_DeliveryUncertain,true);
 
public static final DeliveryStatusE DeliveryImpossible =
 new DeliveryStatusE(_DeliveryImpossible,true);
 
public static final DeliveryStatusE MessageWaiting =
 new DeliveryStatusE(_MessageWaiting,true);
 
public static final DeliveryStatusE DeliveryToTerminal =
 new DeliveryStatusE(_DeliveryToTerminal,true);
 
public static final DeliveryStatusE DeliveryNotificationNotSupported =
 new DeliveryStatusE(_DeliveryNotificationNotSupported,true);
 
public static final DeliveryStatusE KeyWordFilterFailed =
 new DeliveryStatusE(_KeyWordFilterFailed,true);
 

public java.lang.String getValue() { return localDeliveryStatus;}

public boolean equals(java.lang.Object obj) {return (obj == this);}
public int hashCode() { return toString().hashCode();}
public java.lang.String toString() {

return localDeliveryStatus.toString();
 

}



  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 DeliveryStatusE.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 

//We can safely assume an element has only one type associated with it

 java.lang.String namespace = parentQName.getNamespaceURI();
 java.lang.String localName = parentQName.getLocalPart();

 if (! namespace.equals("")) {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix, localName, namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace, localName);
}

 } else {
xmlWriter.writeStartElement(localName);
 }

 // add the type details if this is used in a simple type
 if (serializeType){
java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/sms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":DeliveryStatus",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"DeliveryStatus",
xmlWriter);
}
 }
 
  if (localDeliveryStatus==null){
 
  throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");

 }else{

 xmlWriter.writeCharacters(localDeliveryStatus);
 
 }
 
 xmlWriter.writeEndElement();

 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{




//We can safely assume an element has only one type associated with it
 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
 new java.lang.Object[]{
 org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDeliveryStatus)
 },
 null);

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{



public static DeliveryStatusE fromValue(java.lang.String value)
throws java.lang.IllegalArgumentException {
 DeliveryStatusE enumeration = (DeliveryStatusE)
 
 _table_.get(value);


 if (enumeration==null) throw new java.lang.IllegalArgumentException();
 return enumeration;
}
public static DeliveryStatusE fromString(java.lang.String value,java.lang.String namespaceURI)
throws java.lang.IllegalArgumentException {
 try {
 
 return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


 } catch (java.lang.Exception e) {
throw new java.lang.IllegalArgumentException();
 }
}

public static DeliveryStatusE fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
 java.lang.String content) {
 if (content.indexOf(":") > -1){
java.lang.String prefix = content.substring(0,content.indexOf(":"));
java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
return DeliveryStatusE.Factory.fromString(content,namespaceUri);
 } else {
 return DeliveryStatusE.Factory.fromString(content,"");
 }
}
 

/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static DeliveryStatusE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 DeliveryStatusE object = null;
// initialize a hash map to keep values
java.util.Map attributeMap = new java.util.HashMap();
java.util.List extraAttributeList = new java.util.ArrayList();
 

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
while(!reader.isEndElement()) {
 if (reader.isStartElement()  || reader.hasText()){

 java.lang.String content = reader.getElementText();
 
if (content.indexOf(":") > 0) {
 // this seems to be a Qname so find the namespace and send
 prefix = content.substring(0, content.indexOf(":"));
 namespaceuri = reader.getNamespaceURI(prefix);
 object = DeliveryStatusE.Factory.fromString(content,namespaceuri);
} else {
 // this seems to be not a qname send and empty namespace incase of it is
 // check is done in fromString method
 object = DeliveryStatusE.Factory.fromString(content,"");
}


  } else {
reader.next();
  }  
}  // end of while loop




 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class GetMessageDeliveryStatusRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/mms",
"getMessageDeliveryStatusRequest",
"ns8");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/mms")){
return "ns8";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for ApplicationID
*/


 protected java.lang.String localApplicationID ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApplicationID(){
 return localApplicationID;
}



 /**
 * Auto generated setter method
 * @param param ApplicationID
 */
 public void setApplicationID(java.lang.String param){
 
 this.localApplicationID=param;
 

 }
 

/**
* field for RequestIdentifier
*/


 protected java.lang.String localRequestIdentifier ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getRequestIdentifier(){
 return localRequestIdentifier;
}



 /**
 * Auto generated setter method
 * @param param RequestIdentifier
 */
 public void setRequestIdentifier(java.lang.String param){
 
 this.localRequestIdentifier=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 GetMessageDeliveryStatusRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/mms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":getMessageDeliveryStatusRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"getMessageDeliveryStatusRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApplicationID", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApplicationID");
}

 } else {
xmlWriter.writeStartElement("ApplicationID");
 }


  if (localApplicationID==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApplicationID);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"requestIdentifier", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"requestIdentifier");
}

 } else {
xmlWriter.writeStartElement("requestIdentifier");
 }


  if (localRequestIdentifier==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("requestIdentifier cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localRequestIdentifier);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ApplicationID"));
 
 elementList.add(localApplicationID==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApplicationID));
 
elementList.add(new javax.xml.namespace.QName("",
"requestIdentifier"));
 
if (localRequestIdentifier != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestIdentifier));
} else {
throw new org.apache.axis2.databinding.ADBException("requestIdentifier cannot be null!!");
}
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static GetMessageDeliveryStatusRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 GetMessageDeliveryStatusRequest object =
new GetMessageDeliveryStatusRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"getMessageDeliveryStatusRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (GetMessageDeliveryStatusRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApplicationID").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApplicationID(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","requestIdentifier").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setRequestIdentifier(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class GetMessageDeliveryStatusResponse
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/mms",
"getMessageDeliveryStatusResponse",
"ns8");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/mms")){
return "ns8";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Item
* This was an Array!
*/


 protected DeliveryInformation0[] localItem ;

/*  This tracker boolean wil be used to detect whether the user called the set method
  *for this attribute. It will be used to determine whether to include this field
*in the serialized XML
*/
protected boolean localItemTracker = false ;


/**
* Auto generated getter method
* @return DeliveryInformation0[]
*/
public  DeliveryInformation0[] getItem(){
 return localItem;
}





 
/**
 * validate the array for Item
 */
protected void validateItem(DeliveryInformation0[] param){
  
}


  /**
* Auto generated setter method
* @param param Item
*/
public void setItem(DeliveryInformation0[] param){

validateItem(param);

 
  if (param != null){
  //update the setting tracker
  localItemTracker = true;
  } else {
  localItemTracker = false;
 
  }

this.localItem=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param DeliveryInformation0
  */
  public void addItem(DeliveryInformation0 param){
if (localItem == null){
localItem = new DeliveryInformation0[]{};
}

 
 //update the setting tracker
localItemTracker = true;
 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localItem);
 list.add(param);
 this.localItem =
  (DeliveryInformation0[])list.toArray(
 new DeliveryInformation0[list.size()]);

  }
  

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 GetMessageDeliveryStatusResponse.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/mms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":getMessageDeliveryStatusResponse",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"getMessageDeliveryStatusResponse",
xmlWriter);
}

 
}
if (localItemTracker){
 if (localItem!=null){
 for (int i = 0;i < localItem.length;i++){
if (localItem[i] != null){
 localItem[i].serialize(new javax.xml.namespace.QName("","item"),
factory,xmlWriter);
} else {

// we don't have to do any thing since minOccures is zero
 
}

 }
  } else {

 throw new org.apache.axis2.databinding.ADBException("item cannot be null!!");

 }
 }
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();

 if (localItemTracker){
  if (localItem!=null) {
 for (int i = 0;i < localItem.length;i++){

 if (localItem[i] != null){
 elementList.add(new javax.xml.namespace.QName("",
  "item"));
 elementList.add(localItem[i]);
 } else {

// nothing to do
 
 }

 }
  } else {
 
throw new org.apache.axis2.databinding.ADBException("item cannot be null!!");
 
  }

}

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static GetMessageDeliveryStatusResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 GetMessageDeliveryStatusResponse object =
new GetMessageDeliveryStatusResponse();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"getMessageDeliveryStatusResponse".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (GetMessageDeliveryStatusResponse)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list1 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","item").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 list1.add(DeliveryInformation0.Factory.parse(reader));

//loop until we find a start element that is not part of this array
boolean loopDone1 = false;
while(!loopDone1){
 // We should be at the end element, but make sure
 while (!reader.isEndElement())
reader.next();
 // Step out of this element
 reader.next();
 // Step to next element event.
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 if (reader.isEndElement()){
//two continuous end elements means we are exiting the xml structure
loopDone1 = true;
 } else {
if (new javax.xml.namespace.QName("","item").equals(reader.getName())){
 list1.add(DeliveryInformation0.Factory.parse(reader));

}else{
 loopDone1 = true;
}
 }
}
// call the converter utility  to convert and set the array

object.setItem((DeliveryInformation0[])
 org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
DeliveryInformation0.class,
list1));
 
}  // End of if for expected property start element

 else {

 }
  
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class NotifySmsDeliveryStatusRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/sms",
"notifySmsDeliveryStatusRequest",
"ns7");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/sms")){
return "ns7";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for RequestIdentifier
*/


 protected java.lang.String localRequestIdentifier ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getRequestIdentifier(){
 return localRequestIdentifier;
}



 /**
 * Auto generated setter method
 * @param param RequestIdentifier
 */
 public void setRequestIdentifier(java.lang.String param){
 
 this.localRequestIdentifier=param;
 

 }
 

/**
* field for DeliveryInformation
* This was an Array!
*/


 protected DeliveryInformationE[] localDeliveryInformation ;

/*  This tracker boolean wil be used to detect whether the user called the set method
  *for this attribute. It will be used to determine whether to include this field
*in the serialized XML
*/
protected boolean localDeliveryInformationTracker = false ;


/**
* Auto generated getter method
* @return DeliveryInformationE[]
*/
public  DeliveryInformationE[] getDeliveryInformation(){
 return localDeliveryInformation;
}





 
/**
 * validate the array for DeliveryInformation
 */
protected void validateDeliveryInformation(DeliveryInformationE[] param){
  
}


  /**
* Auto generated setter method
* @param param DeliveryInformation
*/
public void setDeliveryInformation(DeliveryInformationE[] param){

validateDeliveryInformation(param);

 
  if (param != null){
  //update the setting tracker
  localDeliveryInformationTracker = true;
  } else {
  localDeliveryInformationTracker = true;
 
  }

this.localDeliveryInformation=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param DeliveryInformationE
  */
  public void addDeliveryInformation(DeliveryInformationE param){
if (localDeliveryInformation == null){
localDeliveryInformation = new DeliveryInformationE[]{};
}

 
 //update the setting tracker
localDeliveryInformationTracker = true;
 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localDeliveryInformation);
 list.add(param);
 this.localDeliveryInformation =
  (DeliveryInformationE[])list.toArray(
 new DeliveryInformationE[list.size()]);

  }
  

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 NotifySmsDeliveryStatusRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/sms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":notifySmsDeliveryStatusRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"notifySmsDeliveryStatusRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"RequestIdentifier", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"RequestIdentifier");
}

 } else {
xmlWriter.writeStartElement("RequestIdentifier");
 }


  if (localRequestIdentifier==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localRequestIdentifier);
 
  }
 
xmlWriter.writeEndElement();
if (localDeliveryInformationTracker){
 if (localDeliveryInformation!=null){
 for (int i = 0;i < localDeliveryInformation.length;i++){
if (localDeliveryInformation[i] != null){
 localDeliveryInformation[i].serialize(new javax.xml.namespace.QName("","DeliveryInformation"),
factory,xmlWriter);
} else {

 // write null attribute
 java.lang.String namespace2 = "";
 if (! namespace2.equals("")) {
java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

if (prefix2 == null) {
 prefix2 = generatePrefix(namespace2);

 xmlWriter.writeStartElement(prefix2,"DeliveryInformation", namespace2);
 xmlWriter.writeNamespace(prefix2, namespace2);
 xmlWriter.setPrefix(prefix2, namespace2);

} else {
 xmlWriter.writeStartElement(namespace2,"DeliveryInformation");
}

 } else {
xmlWriter.writeStartElement("DeliveryInformation");
 }

// write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 
}

 }
  } else {

// write null attribute
java.lang.String namespace2 = "";
if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"DeliveryInformation", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"DeliveryInformation");
 }

} else {
 xmlWriter.writeStartElement("DeliveryInformation");
}

 // write the nil attribute
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
 xmlWriter.writeEndElement();

 }
 }
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"RequestIdentifier"));
 
 elementList.add(localRequestIdentifier==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestIdentifier));
  if (localDeliveryInformationTracker){
  if (localDeliveryInformation!=null) {
 for (int i = 0;i < localDeliveryInformation.length;i++){

 if (localDeliveryInformation[i] != null){
 elementList.add(new javax.xml.namespace.QName("",
  "DeliveryInformation"));
 elementList.add(localDeliveryInformation[i]);
 } else {

elementList.add(new javax.xml.namespace.QName("",
  "DeliveryInformation"));
elementList.add(null);
 
 }

 }
  } else {
 
elementList.add(new javax.xml.namespace.QName("",
  "DeliveryInformation"));
elementList.add(localDeliveryInformation);
 
  }

}

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static NotifySmsDeliveryStatusRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 NotifySmsDeliveryStatusRequest object =
new NotifySmsDeliveryStatusRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"notifySmsDeliveryStatusRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (NotifySmsDeliveryStatusRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list2 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","RequestIdentifier").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setRequestIdentifier(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","DeliveryInformation").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 
  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
list2.add(null);
reader.next();
  } else {
list2.add(DeliveryInformationE.Factory.parse(reader));
}
//loop until we find a start element that is not part of this array
boolean loopDone2 = false;
while(!loopDone2){
 // We should be at the end element, but make sure
 while (!reader.isEndElement())
reader.next();
 // Step out of this element
 reader.next();
 // Step to next element event.
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 if (reader.isEndElement()){
//two continuous end elements means we are exiting the xml structure
loopDone2 = true;
 } else {
if (new javax.xml.namespace.QName("","DeliveryInformation").equals(reader.getName())){
 
nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  list2.add(null);
  reader.next();
} else {
 list2.add(DeliveryInformationE.Factory.parse(reader));
}
}else{
 loopDone2 = true;
}
 }
}
// call the converter utility  to convert and set the array

object.setDeliveryInformation((DeliveryInformationE[])
 org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
DeliveryInformationE.class,
list2));
 
}  // End of if for expected property start element

 else {

 }
  
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class GetMessageRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/mms",
"getMessageRequest",
"ns8");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/mms")){
return "ns8";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}


 protected java.lang.String localApplicationID ;

public  java.lang.String getApplicationID(){
 return localApplicationID;
}

 public void setApplicationID(java.lang.String param){
 
 this.localApplicationID=param;
 

 }
 

/**
* field for MessageRefIdentifier
*/


 protected java.lang.String localMessageRefIdentifier ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getMessageRefIdentifier(){
 return localMessageRefIdentifier;
}



 /**
 * Auto generated setter method
 * @param param MessageRefIdentifier
 */
 public void setMessageRefIdentifier(java.lang.String param){
 
 this.localMessageRefIdentifier=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 GetMessageRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/mms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":getMessageRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"getMessageRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"ApplicationID", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"ApplicationID");
}

 } else {
xmlWriter.writeStartElement("ApplicationID");
 }


  if (localApplicationID==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApplicationID);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"messageRefIdentifier", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"messageRefIdentifier");
}

 } else {
xmlWriter.writeStartElement("messageRefIdentifier");
 }


  if (localMessageRefIdentifier==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("messageRefIdentifier cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localMessageRefIdentifier);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"ApplicationID"));
 
 elementList.add(localApplicationID==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApplicationID));
 
elementList.add(new javax.xml.namespace.QName("",
"messageRefIdentifier"));
 
if (localMessageRefIdentifier != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMessageRefIdentifier));
} else {
throw new org.apache.axis2.databinding.ADBException("messageRefIdentifier cannot be null!!");
}
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static GetMessageRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 GetMessageRequest object =
new GetMessageRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"getMessageRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (GetMessageRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","ApplicationID").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApplicationID(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","messageRefIdentifier").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setMessageRefIdentifier(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class GetLocationResponse
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/location",
"getLocationResponse",
"ns5");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/location")){
return "ns5";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



 protected LocationInfo localResult ;

public  LocationInfo getResult(){
 return localResult;
}

 public void setResult(LocationInfo param){
 
 this.localResult=param;
 

 }

public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}

 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{

org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 GetLocationResponse.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/location");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":getLocationResponse",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"getLocationResponse",
xmlWriter);
}

 
}
 
 if (localResult==null){

 java.lang.String namespace2 = "";

if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"Result", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"Result");
 }

} else {
 xmlWriter.writeStartElement("Result");
}


 // write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 }else{
  localResult.serialize(new javax.xml.namespace.QName("","Result"),
factory,xmlWriter);
 }

 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


 elementList.add(new javax.xml.namespace.QName("",
"Result"));
 
 
 elementList.add(localResult==null?null:
 localResult);


return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static GetLocationResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 GetLocationResponse object =
new GetLocationResponse();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"getLocationResponse".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (GetLocationResponse)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Result").equals(reader.getName())){

nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  object.setResult(null);
  reader.next();
 
 reader.next();
  
}else{
 
object.setResult(LocationInfo.Factory.parse(reader));

reader.next();
 }
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class APRegistrationReq
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/ap",
"APRegistrationReq",
"ns2");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/ap")){
return "ns2";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Apid
*/


 protected java.lang.String localApid ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getApid(){
 return localApid;
}



 /**
 * Auto generated setter method
 * @param param Apid
 */
 public void setApid(java.lang.String param){
 
 this.localApid=param;
 

 }
 

/**
* field for APPid
*/


 protected int localAPPid ;


/**
* Auto generated getter method
* @return int
*/
public  int getAPPid(){
 return localAPPid;
}



 /**
 * Auto generated setter method
 * @param param APPid
 */
 public void setAPPid(int param){
 
 this.localAPPid=param;
 

 }
 

/**
* field for HostIP
*/


 protected java.lang.String localHostIP ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getHostIP(){
 return localHostIP;
}




 public void setHostIP(java.lang.String param){
 
 this.localHostIP=param;
 

 }



 protected MessageNotificationType[] localMessageNotification ;

/*  This tracker boolean wil be used to detect whether the user called the set method
  *for this attribute. It will be used to determine whether to include this field
*in the serialized XML
*/
protected boolean localMessageNotificationTracker = false ;


/**
* Auto generated getter method
* @return MessageNotificationType[]
*/
public  MessageNotificationType[] getMessageNotification(){
 return localMessageNotification;
}





 
/**
 * validate the array for MessageNotification
 */
protected void validateMessageNotification(MessageNotificationType[] param){
  
}


  /**
* Auto generated setter method
* @param param MessageNotification
*/
public void setMessageNotification(MessageNotificationType[] param){

validateMessageNotification(param);

 
  if (param != null){
  //update the setting tracker
  localMessageNotificationTracker = true;
  } else {
  localMessageNotificationTracker = true;
 
  }

this.localMessageNotification=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param MessageNotificationType
  */
  public void addMessageNotification(MessageNotificationType param){
if (localMessageNotification == null){
localMessageNotification = new MessageNotificationType[]{};
}

 
 //update the setting tracker
localMessageNotificationTracker = true;
 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localMessageNotification);
 list.add(param);
 this.localMessageNotification =
  (MessageNotificationType[])list.toArray(
 new MessageNotificationType[list.size()]);

  }
  

/**
* field for APWSURI
*/


 protected org.apache.axis2.databinding.types.URI localAPWSURI ;


/**
* Auto generated getter method
* @return org.apache.axis2.databinding.types.URI
*/
public  org.apache.axis2.databinding.types.URI getAPWSURI(){
 return localAPWSURI;
}



 /**
 * Auto generated setter method
 * @param param APWSURI
 */
 public void setAPWSURI(org.apache.axis2.databinding.types.URI param){
 
 this.localAPWSURI=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 APRegistrationReq.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/ap");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":APRegistrationReq",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"APRegistrationReq",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"Apid", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"Apid");
}

 } else {
xmlWriter.writeStartElement("Apid");
 }


  if (localApid==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localApid);
 
  }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"APPid", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"APPid");
}

 } else {
xmlWriter.writeStartElement("APPid");
 }

 if (localAPPid==java.lang.Integer.MIN_VALUE) {

 throw new org.apache.axis2.databinding.ADBException("APPid cannot be null!!");

 } else {
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAPPid));
 }
 
xmlWriter.writeEndElement();
  
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"HostIP", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"HostIP");
}

 } else {
xmlWriter.writeStartElement("HostIP");
 }


  if (localHostIP==null){
// write the nil attribute

  writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
  
  }else{


xmlWriter.writeCharacters(localHostIP);
 
  }
 
xmlWriter.writeEndElement();
if (localMessageNotificationTracker){
 if (localMessageNotification!=null){
 for (int i = 0;i < localMessageNotification.length;i++){
if (localMessageNotification[i] != null){
 localMessageNotification[i].serialize(new javax.xml.namespace.QName("","MessageNotification"),
factory,xmlWriter);
} else {

 // write null attribute
 java.lang.String namespace2 = "";
 if (! namespace2.equals("")) {
java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

if (prefix2 == null) {
 prefix2 = generatePrefix(namespace2);

 xmlWriter.writeStartElement(prefix2,"MessageNotification", namespace2);
 xmlWriter.writeNamespace(prefix2, namespace2);
 xmlWriter.setPrefix(prefix2, namespace2);

} else {
 xmlWriter.writeStartElement(namespace2,"MessageNotification");
}

 } else {
xmlWriter.writeStartElement("MessageNotification");
 }

// write the nil attribute
writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
xmlWriter.writeEndElement();
 
}

 }
  } else {

// write null attribute
java.lang.String namespace2 = "";
if (! namespace2.equals("")) {
 java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

 if (prefix2 == null) {
prefix2 = generatePrefix(namespace2);

xmlWriter.writeStartElement(prefix2,"MessageNotification", namespace2);
xmlWriter.writeNamespace(prefix2, namespace2);
xmlWriter.setPrefix(prefix2, namespace2);

 } else {
xmlWriter.writeStartElement(namespace2,"MessageNotification");
 }

} else {
 xmlWriter.writeStartElement("MessageNotification");
}

 // write the nil attribute
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
 xmlWriter.writeEndElement();

 }
 }
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"APWSURI", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"APWSURI");
}

 } else {
xmlWriter.writeStartElement("APWSURI");
 }


  if (localAPWSURI==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("APWSURI cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAPWSURI));
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"Apid"));
 
 elementList.add(localApid==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localApid));
 
elementList.add(new javax.xml.namespace.QName("",
"APPid"));
 
elementList.add(
org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAPPid));
 
elementList.add(new javax.xml.namespace.QName("",
"HostIP"));
 
 elementList.add(localHostIP==null?null:
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHostIP));
  if (localMessageNotificationTracker){
  if (localMessageNotification!=null) {
 for (int i = 0;i < localMessageNotification.length;i++){

 if (localMessageNotification[i] != null){
 elementList.add(new javax.xml.namespace.QName("",
  "MessageNotification"));
 elementList.add(localMessageNotification[i]);
 } else {

elementList.add(new javax.xml.namespace.QName("",
  "MessageNotification"));
elementList.add(null);
 
 }

 }
  } else {
 
elementList.add(new javax.xml.namespace.QName("",
  "MessageNotification"));
elementList.add(localMessageNotification);
 
  }

}
elementList.add(new javax.xml.namespace.QName("",
"APWSURI"));
 
if (localAPWSURI != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAPWSURI));
} else {
throw new org.apache.axis2.databinding.ADBException("APWSURI cannot be null!!");
}
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static APRegistrationReq parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 APRegistrationReq object =
new APRegistrationReq();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"APRegistrationReq".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (APRegistrationReq)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list4 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","Apid").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setApid(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","APPid").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAPPid(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","HostIP").equals(reader.getName())){

 nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
 if (!"true".equals(nillableValue) && !"1".equals(nillableValue)){
 
 java.lang.String content = reader.getElementText();
 
object.setHostIP(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
 
 } else {


reader.getElementText(); // throw away text nodes if any.
 }

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","MessageNotification").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 
  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
list4.add(null);
reader.next();
  } else {
list4.add(MessageNotificationType.Factory.parse(reader));
}
//loop until we find a start element that is not part of this array
boolean loopDone4 = false;
while(!loopDone4){
 // We should be at the end element, but make sure
 while (!reader.isEndElement())
reader.next();
 // Step out of this element
 reader.next();
 // Step to next element event.
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 if (reader.isEndElement()){
//two continuous end elements means we are exiting the xml structure
loopDone4 = true;
 } else {
if (new javax.xml.namespace.QName("","MessageNotification").equals(reader.getName())){
 
nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
if ("true".equals(nillableValue) || "1".equals(nillableValue)){
  list4.add(null);
  reader.next();
} else {
 list4.add(MessageNotificationType.Factory.parse(reader));
}
}else{
 loopDone4 = true;
}
 }
}
// call the converter utility  to convert and set the array

object.setMessageNotification((MessageNotificationType[])
 org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
MessageNotificationType.class,
list4));
 
}  // End of if for expected property start element

 else {

 }

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","APWSURI").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setAPWSURI(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class SendMessageResponse
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/mms",
"sendMessageResponse",
"ns8");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/mms")){
return "ns8";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for RequestIdentifier
*/


 protected java.lang.String localRequestIdentifier ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getRequestIdentifier(){
 return localRequestIdentifier;
}



 /**
 * Auto generated setter method
 * @param param RequestIdentifier
 */
 public void setRequestIdentifier(java.lang.String param){
 
 this.localRequestIdentifier=param;
 

 }
 

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 SendMessageResponse.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/mms");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":sendMessageResponse",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"sendMessageResponse",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"requestIdentifier", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"requestIdentifier");
}

 } else {
xmlWriter.writeStartElement("requestIdentifier");
 }


  if (localRequestIdentifier==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("requestIdentifier cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localRequestIdentifier);
 
  }
 
xmlWriter.writeEndElement();
  
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"requestIdentifier"));
 
if (localRequestIdentifier != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestIdentifier));
} else {
throw new org.apache.axis2.databinding.ADBException("requestIdentifier cannot be null!!");
}
 

return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static SendMessageResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 SendMessageResponse object =
new SendMessageResponse();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"sendMessageResponse".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (SendMessageResponse)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","requestIdentifier").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setRequestIdentifier(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
public static class LocationNotificationRequest
implements org.apache.axis2.databinding.ADBBean{

public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
"http://www.csapi.org/schema/location",
"LocationNotificationRequest",
"ns5");

 

private static java.lang.String generatePrefix(java.lang.String namespace) {
 if(namespace.equals("http://www.csapi.org/schema/location")){
return "ns5";
 }
 return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}



/**
* field for Correlator
*/


 protected java.lang.String localCorrelator ;


/**
* Auto generated getter method
* @return java.lang.String
*/
public  java.lang.String getCorrelator(){
 return localCorrelator;
}



 /**
 * Auto generated setter method
 * @param param Correlator
 */
 public void setCorrelator(java.lang.String param){
 
 this.localCorrelator=param;
 

 }
 

/**
* field for Data
* This was an Array!
*/


 protected LocationData[] localData ;


/**
* Auto generated getter method
* @return LocationData[]
*/
public  LocationData[] getData(){
 return localData;
}





 
/**
 * validate the array for Data
 */
protected void validateData(LocationData[] param){
  
if ((param != null) && (param.length < 1)){
throw new java.lang.RuntimeException();
}

}


  /**
* Auto generated setter method
* @param param Data
*/
public void setData(LocationData[] param){

validateData(param);

 
this.localData=param;
}

 
  
  /**
  * Auto generated add method for the array for convenience
  * @param param LocationData
  */
  public void addData(LocationData param){
if (localData == null){
localData = new LocationData[]{};
}

 

 java.util.List list =
 org.apache.axis2.databinding.utils.ConverterUtil.toList(localData);
 list.add(param);
 this.localData =
  (LocationData[])list.toArray(
 new LocationData[list.size()]);

  }
  

  /**
  * isReaderMTOMAware
  * @return true if the reader supports MTOM
  */
public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader) {
boolean isReaderMTOMAware = false;

try{
  isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
}catch(java.lang.IllegalArgumentException e){
  isReaderMTOMAware = false;
}
return isReaderMTOMAware;
}
  
  
/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
 public org.apache.axiom.om.OMElement getOMElement (
 final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



org.apache.axiom.om.OMDataSource dataSource =
 new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){

 public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 LocationNotificationRequest.this.serialize(MY_QNAME,factory,xmlWriter);
 }
 };
 return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
 MY_QNAME,factory,dataSource);
 
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
serialize(parentQName,factory,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
 final org.apache.axiom.om.OMFactory factory,
 org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
 boolean serializeType)
 throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
 



java.lang.String prefix = null;
java.lang.String namespace = null;


 prefix = parentQName.getPrefix();
 namespace = parentQName.getNamespaceURI();

 if ((namespace != null) && (namespace.trim().length() > 0)) {
java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
if (writerPrefix != null) {
 xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
} else {
 if (prefix == null) {
prefix = generatePrefix(namespace);
 }

 xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}
 } else {
xmlWriter.writeStartElement(parentQName.getLocalPart());
 }

  if (serializeType){
 

java.lang.String namespacePrefix = registerPrefix(xmlWriter,"http://www.csapi.org/schema/location");
if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
namespacePrefix+":LocationNotificationRequest",
xmlWriter);
} else {
 writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
"LocationNotificationRequest",
xmlWriter);
}

 
}
 
 namespace = "";
 if (! namespace.equals("")) {
prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 xmlWriter.writeStartElement(prefix,"correlator", namespace);
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

} else {
 xmlWriter.writeStartElement(namespace,"correlator");
}

 } else {
xmlWriter.writeStartElement("correlator");
 }


  if (localCorrelator==null){
// write the nil attribute

  throw new org.apache.axis2.databinding.ADBException("correlator cannot be null!!");
  
  }else{


xmlWriter.writeCharacters(localCorrelator);
 
  }
 
xmlWriter.writeEndElement();
  
 if (localData!=null){
 for (int i = 0;i < localData.length;i++){
if (localData[i] != null){
 localData[i].serialize(new javax.xml.namespace.QName("","data"),
factory,xmlWriter);
} else {

throw new org.apache.axis2.databinding.ADBException("data cannot be null!!");
 
}

 }
  } else {

 throw new org.apache.axis2.databinding.ADBException("data cannot be null!!");

 }
 
 xmlWriter.writeEndElement();
 

}

 /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (xmlWriter.getPrefix(namespace) == null) {
 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);

}

xmlWriter.writeAttribute(namespace,attName,attValue);

 }

/**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
if (namespace.equals(""))
{
  xmlWriter.writeAttribute(attName,attValue);
}
else
{
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
}
  }


/**
  * Util method to write an attribute without the ns prefix
  */
 private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

java.lang.String attributeNamespace = qname.getNamespaceURI();
java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
if (attributePrefix == null) {
 attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
}
java.lang.String attributeValue;
if (attributePrefix.trim().length() > 0) {
 attributeValue = attributePrefix + ":" + qname.getLocalPart();
} else {
 attributeValue = qname.getLocalPart();
}

if (namespace.equals("")) {
 xmlWriter.writeAttribute(attName, attributeValue);
} else {
 registerPrefix(xmlWriter, namespace);
 xmlWriter.writeAttribute(namespace, attName, attributeValue);
}
 }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 java.lang.String namespaceURI = qname.getNamespaceURI();
 if (namespaceURI != null) {
java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
if (prefix == null) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
} else {
 // i.e this is the default namespace
 xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
}

 } else {
xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
 }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

 if (qnames != null) {
// we have to store this data until last moment since it is not possible to write any
// namespace data after writing the charactor data
java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
java.lang.String namespaceURI = null;
java.lang.String prefix = null;

for (int i = 0; i < qnames.length; i++) {
 if (i > 0) {
stringToWrite.append(" ");
 }
 namespaceURI = qnames[i].getNamespaceURI();
 if (namespaceURI != null) {
prefix = xmlWriter.getPrefix(namespaceURI);
if ((prefix == null) || (prefix.length() == 0)) {
 prefix = generatePrefix(namespaceURI);
 xmlWriter.writeNamespace(prefix, namespaceURI);
 xmlWriter.setPrefix(prefix,namespaceURI);
}

if (prefix.trim().length() > 0){
 stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
} else {
 stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
}
 } else {
stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
 }
}
xmlWriter.writeCharacters(stringToWrite.toString());
 }

}


 /**
 * Register a namespace prefix
 */
 private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
java.lang.String prefix = xmlWriter.getPrefix(namespace);

if (prefix == null) {
 prefix = generatePrefix(namespace);

 while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
 }

 xmlWriter.writeNamespace(prefix, namespace);
 xmlWriter.setPrefix(prefix, namespace);
}

return prefix;
 }


  
/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
 throws org.apache.axis2.databinding.ADBException{



 java.util.ArrayList elementList = new java.util.ArrayList();
 java.util.ArrayList attribList = new java.util.ArrayList();


elementList.add(new javax.xml.namespace.QName("",
"correlator"));
 
if (localCorrelator != null){
 elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCorrelator));
} else {
throw new org.apache.axis2.databinding.ADBException("correlator cannot be null!!");
}
 
  if (localData!=null) {
 for (int i = 0;i < localData.length;i++){

 if (localData[i] != null){
 elementList.add(new javax.xml.namespace.QName("",
  "data"));
 elementList.add(localData[i]);
 } else {

 throw new org.apache.axis2.databinding.ADBException("data cannot be null !!");
 
 }

 }
  } else {
 
throw new org.apache.axis2.databinding.ADBException("data cannot be null!!");
 
  }



return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
 
 

}

  

  /**
*  Factory class that keeps the parse method
*/
 public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static LocationNotificationRequest parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
 LocationNotificationRequest object =
new LocationNotificationRequest();

 int event;
 java.lang.String nillableValue = null;
 java.lang.String prefix ="";
 java.lang.String namespaceuri ="";
 try {

while (!reader.isStartElement() && !reader.isEndElement())
 reader.next();


if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
"type");
  if (fullTypeName!=null){
 java.lang.String nsPrefix = null;
 if (fullTypeName.indexOf(":") > -1){
nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
 }
 nsPrefix = nsPrefix==null?"":nsPrefix;

 java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
 
 if (!"LocationNotificationRequest".equals(type)){
//find namespace for the prefix
java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
return (LocationNotificationRequest)ExtensionMapper.getTypeObject(
  nsUri,type,reader);
}


  }


}




// Note all attributes that were handled. Used to differ normal attributes
// from anyAttributes.
java.util.Vector handledAttributes = new java.util.Vector();


 
 
 reader.next();

java.util.ArrayList list2 = new java.util.ArrayList();
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","correlator").equals(reader.getName())){

 java.lang.String content = reader.getElementText();
 
object.setCorrelator(
 org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

reader.next();
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}
 
 
 while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

 if (reader.isStartElement() && new javax.xml.namespace.QName("","data").equals(reader.getName())){

 
 
 // Process the array and step past its final element's end.
 list2.add(LocationData.Factory.parse(reader));

//loop until we find a start element that is not part of this array
boolean loopDone2 = false;
while(!loopDone2){
 // We should be at the end element, but make sure
 while (!reader.isEndElement())
reader.next();
 // Step out of this element
 reader.next();
 // Step to next element event.
 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 if (reader.isEndElement()){
//two continuous end elements means we are exiting the xml structure
loopDone2 = true;
 } else {
if (new javax.xml.namespace.QName("","data").equals(reader.getName())){
 list2.add(LocationData.Factory.parse(reader));

}else{
 loopDone2 = true;
}
 }
}
// call the converter utility  to convert and set the array

object.setData((LocationData[])
 org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
LocationData.class,
list2));
 
}  // End of if for expected property start element

else{
 // A start element we are not expecting indicates an invalid parameter was passed
 throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
}

 while (!reader.isStartElement() && !reader.isEndElement())
reader.next();
 
if (reader.isStartElement())
// A start element we are not expecting indicates a trailing invalid property
throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
 



 } catch (javax.xml.stream.XMLStreamException e) {
throw new java.lang.Exception(e);
 }

 return object;
}

}//end of factory class



}

  
 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.SendPushRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.SendPushRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.SendPushResponse param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.SendPushResponse.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.APStatusRepReq param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.APStatusRepReq.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.APStatusRepRsp param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.APStatusRepRsp.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationForGroupRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationForGroupRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationForGroupResponse param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationForGroupResponse.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.HandleUssdRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.HandleUssdRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.HandleUssdResponse param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.HandleUssdResponse.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.APLogOutReq param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.APLogOutReq.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.APLogOutRsp param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.APLogOutRsp.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.APRegistrationReq param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.APRegistrationReq.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.APRegistrationRsp param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.APRegistrationRsp.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.EndUssdRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.EndUssdRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedMessagesRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedMessagesRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedMessagesResponse param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedMessagesResponse.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.NotifyUssdEndRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.NotifyUssdEndRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationResponse param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationResponse.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.SendSmsRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.SendSmsRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.SendSmsResponse param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.SendSmsResponse.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedSmsRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedSmsRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedSmsResponse param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedSmsResponse.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.NotifySmsDeliveryStatusRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.NotifySmsDeliveryStatusRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.APSvcAuthenticReq param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.APSvcAuthenticReq.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.APSvcAuthenticRsp param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.APSvcAuthenticRsp.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.NotifySmsReceptionRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.NotifySmsReceptionRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.StopNotificationRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.StopNotificationRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.EndNotificationRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.EndNotificationRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.StartNotificationRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.StartNotificationRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.AlarmReq param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.AlarmReq.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.AlarmRsp param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.AlarmRsp.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.NotifyMessageReceptionRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.NotifyMessageReceptionRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.SendMessageRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.SendMessageRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.SendMessageResponse param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.SendMessageResponse.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.APSvcPerfReportReq param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.APSvcPerfReportReq.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.GetPushDeliveryStatusRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetPushDeliveryStatusRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.GetPushDeliveryStatusResponse param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetPushDeliveryStatusResponse.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.NotifyMessageDeliveryReceiptRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.NotifyMessageDeliveryReceiptRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.NotifyPushDeliveryReceiptRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.NotifyPushDeliveryReceiptRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.LocationErrorRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.LocationErrorRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.MakeUssdRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.MakeUssdRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.MakeUssdResponse param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.MakeUssdResponse.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.APSvcPerfCmdReq param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.APSvcPerfCmdReq.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageDeliveryStatusRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageDeliveryStatusRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageDeliveryStatusResponse param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageDeliveryStatusResponse.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.LocationEndRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.LocationEndRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.GetSmsDeliveryStatusRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetSmsDeliveryStatusRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.GetSmsDeliveryStatusResponse param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetSmsDeliveryStatusResponse.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.RecoveryAPReq param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.RecoveryAPReq.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.RecoveryAPRsp param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.RecoveryAPRsp.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.PauseAPReq param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.PauseAPReq.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.PauseAPRsp param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.PauseAPRsp.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageResponse param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageResponse.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.UssdContinueRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.UssdContinueRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.UssdContinueResponse param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.UssdContinueResponse.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.StartPeriodicNotificationRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.StartPeriodicNotificationRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.StartPeriodicNotificationResponse param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.StartPeriodicNotificationResponse.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 private  org.apache.axiom.om.OMElement  toOM(org.csapi.www.service.Cmcc_mas_wbsStub.LocationNotificationRequest param, boolean optimizeContent)
 throws org.apache.axis2.AxisFault {

 
try{
  return param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.LocationNotificationRequest.MY_QNAME,
  org.apache.axiom.om.OMAbstractFactory.getOMFactory());
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}
 

 }

 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.SendPushRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.SendPushRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.APStatusRepReq param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.APStatusRepReq.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationForGroupRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationForGroupRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.HandleUssdRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.HandleUssdRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.APLogOutReq param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.APLogOutReq.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.APRegistrationReq param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.APRegistrationReq.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.EndUssdRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.EndUssdRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedMessagesRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedMessagesRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.NotifyUssdEndRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.NotifyUssdEndRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.SendSmsRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.SendSmsRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedSmsRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedSmsRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.NotifySmsDeliveryStatusRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.NotifySmsDeliveryStatusRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.APSvcAuthenticReq param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.APSvcAuthenticReq.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.NotifySmsReceptionRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.NotifySmsReceptionRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.StopNotificationRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.StopNotificationRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.EndNotificationRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.EndNotificationRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.StartNotificationRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.StartNotificationRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.AlarmReq param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.AlarmReq.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.NotifyMessageReceptionRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.NotifyMessageReceptionRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.SendMessageRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.SendMessageRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.APSvcPerfReportReq param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.APSvcPerfReportReq.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.GetPushDeliveryStatusRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetPushDeliveryStatusRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.NotifyMessageDeliveryReceiptRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.NotifyMessageDeliveryReceiptRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.NotifyPushDeliveryReceiptRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.NotifyPushDeliveryReceiptRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.LocationErrorRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.LocationErrorRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.MakeUssdRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.MakeUssdRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.APSvcPerfCmdReq param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.APSvcPerfCmdReq.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageDeliveryStatusRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageDeliveryStatusRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.LocationEndRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.LocationEndRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.GetSmsDeliveryStatusRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetSmsDeliveryStatusRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.RecoveryAPReq param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.RecoveryAPReq.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.PauseAPReq param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.PauseAPReq.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.UssdContinueRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.UssdContinueRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.StartPeriodicNotificationRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.StartPeriodicNotificationRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  
 
private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, org.csapi.www.service.Cmcc_mas_wbsStub.LocationNotificationRequest param, boolean optimizeContent)
throws org.apache.axis2.AxisFault{

  
 try{

 org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
 emptyEnvelope.getBody().addChild(param.getOMElement(org.csapi.www.service.Cmcc_mas_wbsStub.LocationNotificationRequest.MY_QNAME,factory));
 return emptyEnvelope;
} catch(org.apache.axis2.databinding.ADBException e){
 throw org.apache.axis2.AxisFault.makeFault(e);
}


}

  
  /* methods to provide back word compatibility */

  


/**
*  get the default envelope
*/
private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory){
return factory.getDefaultEnvelope();
}


private  java.lang.Object fromOM(
org.apache.axiom.om.OMElement param,
java.lang.Class type,
java.util.Map extraNamespaces) throws org.apache.axis2.AxisFault{

try {

if (org.csapi.www.service.Cmcc_mas_wbsStub.SendPushRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.SendPushRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.SendPushResponse.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.SendPushResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.APStatusRepReq.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.APStatusRepReq.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.APStatusRepRsp.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.APStatusRepRsp.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationForGroupRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationForGroupRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationForGroupResponse.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationForGroupResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.HandleUssdRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.HandleUssdRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.HandleUssdResponse.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.HandleUssdResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.APLogOutReq.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.APLogOutReq.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.APLogOutRsp.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.APLogOutRsp.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.APRegistrationReq.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.APRegistrationReq.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.APRegistrationRsp.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.APRegistrationRsp.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.EndUssdRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.EndUssdRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedMessagesRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedMessagesRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedMessagesResponse.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedMessagesResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.NotifyUssdEndRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.NotifyUssdEndRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationResponse.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.GetLocationResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.SendSmsRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.SendSmsRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.SendSmsResponse.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.SendSmsResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedSmsRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedSmsRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedSmsResponse.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.GetReceivedSmsResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.NotifySmsDeliveryStatusRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.NotifySmsDeliveryStatusRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.APSvcAuthenticReq.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.APSvcAuthenticReq.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.APSvcAuthenticRsp.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.APSvcAuthenticRsp.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.NotifySmsReceptionRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.NotifySmsReceptionRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.StopNotificationRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.StopNotificationRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.EndNotificationRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.EndNotificationRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.StartNotificationRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.StartNotificationRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.AlarmReq.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.AlarmReq.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.AlarmRsp.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.AlarmRsp.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.NotifyMessageReceptionRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.NotifyMessageReceptionRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.SendMessageRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.SendMessageRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.SendMessageResponse.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.SendMessageResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.APSvcPerfReportReq.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.APSvcPerfReportReq.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.GetPushDeliveryStatusRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.GetPushDeliveryStatusRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.GetPushDeliveryStatusResponse.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.GetPushDeliveryStatusResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.NotifyMessageDeliveryReceiptRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.NotifyMessageDeliveryReceiptRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.NotifyPushDeliveryReceiptRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.NotifyPushDeliveryReceiptRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.LocationErrorRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.LocationErrorRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.MakeUssdRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.MakeUssdRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.MakeUssdResponse.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.MakeUssdResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.APSvcPerfCmdReq.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.APSvcPerfCmdReq.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageDeliveryStatusRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageDeliveryStatusRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageDeliveryStatusResponse.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageDeliveryStatusResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.LocationEndRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.LocationEndRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.GetSmsDeliveryStatusRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.GetSmsDeliveryStatusRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.GetSmsDeliveryStatusResponse.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.GetSmsDeliveryStatusResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.RecoveryAPReq.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.RecoveryAPReq.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.RecoveryAPRsp.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.RecoveryAPRsp.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PauseAPReq.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PauseAPReq.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PauseAPRsp.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PauseAPRsp.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageResponse.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.GetMessageResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.UssdContinueRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.UssdContinueRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.UssdContinueResponse.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.UssdContinueResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.StartPeriodicNotificationRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.StartPeriodicNotificationRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.StartPeriodicNotificationResponse.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.StartPeriodicNotificationResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.LocationNotificationRequest.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.LocationNotificationRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.PolicyExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

if (org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.class.equals(type)){

return org.csapi.www.service.Cmcc_mas_wbsStub.ServiceExceptionE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
 

}

} catch (java.lang.Exception e) {
throw org.apache.axis2.AxisFault.makeFault(e);
}
return null;
}



 
}
